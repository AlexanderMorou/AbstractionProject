 /* ----------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.  |
 |  Version: 0.5.0.0                                          |
 |------------------------------------------------------------|
 |  To ensure the code works properly,                        |
 |  please do not make any changes to the file.               |
 |------------------------------------------------------------|
 |  The specific language is C♯                               |
 |  Sub-tool Name: C♯ Code Translator                         |
 |  Sub-tool Version: 1.0.0.0                                 |
 \---------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Cli.Metadata;
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables;
using AllenCopeland.Abstraction.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Reflection;
namespace AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables
{
    /// <summary>
    /// Provides a locked row class for a locked table which defines the information about
    /// the types within the image's metadata.
    /// </summary>
    internal class CliMetadataTypeDefinitionLockedTableRow :
        ICliMetadataTypeDefinitionTableRow, 
        _ICliTypeParent
    {
        /// <summary>
        /// Data member for <see cref="Index"/>.
        /// </summary>
        private uint index;
        private ICliMetadataRoot metadataRoot;
        /// <summary>
        /// Data member for <see cref="TypeAttributes"/>.
        /// </summary>
        private TypeAttributes typeAttributes;
        /// <summary>
        /// Data member for <see cref="Name"/>.
        /// </summary>
        private uint nameIndex;
        /// <summary>
        /// Data member for <see cref="Namespace"/>.
        /// </summary>
        private uint namespaceIndex;
        /// <summary>
        /// Data member for <see cref="Extends"/>.
        /// </summary>
        private uint extendsIndex;
        private CliMetadataTypeDefOrRefTag extendsSource;
        /// <summary>
        /// Data member for <see cref="FieldStart"/>.
        /// </summary>
        private uint fieldStartIndex;
        /// <summary>
        /// Data member for <see cref="MethodStart"/>.
        /// </summary>
        private uint methodStartIndex;
        /// <summary>
        /// Data member which denotes the state of the row, used to calculate the size of the
        /// <see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables.CliMetadataTypeDefinitionTableReader"/>
        /// </summary>
        private byte state;
        /// <summary>
        /// Data member for <see cref="ImplementedInterfaces"/>.
        /// </summary>
        private IControlledCollection<ICliMetadataInterfaceImplTableRow> implementedInterfaces;
        /// <summary>
        /// Data member for <see cref="ImplementationMap"/>.
        /// </summary>
        private IControlledCollection<ICliMetadataMethodImplTableRow> implementationMap;
        /// <summary>
        /// Data member for <see cref="NestedClasses"/>.
        /// </summary>
        private IControlledCollection<ICliMetadataTypeDefinitionTableRow> nestedClasses;
        /// <summary>
        /// Data member for <see cref="Events"/>
        /// </summary>
        private IControlledCollection<ICliMetadataEventTableRow> events;
        /// <summary>
        /// Data member for <see cref="Properties"/>
        /// </summary>
        private IControlledCollection<ICliMetadataPropertyTableRow> properties;
        /// <summary>
        /// Data member for <see cref="CustomAttributes"/>.
        /// </summary>
        private IControlledCollection<ICliMetadataCustomAttributeTableRow> customAttributes;
        /// <summary>
        /// Data member for <see cref="TypeParameters"/>.
        /// </summary>
        private IControlledCollection<ICliMetadataGenericParameterTableRow> typeParameters;
        /// <summary>
        /// Data member for <see cref="Fields"/>
        /// </summary>
        private IControlledCollection<ICliMetadataFieldTableRow> fields;
        /// <summary>
        /// Data member for <see cref="Methods"/>
        /// </summary>
        private IControlledCollection<ICliMetadataMethodDefinitionTableRow> methods;
        private bool checkedLayout;
        /// <summary>
        /// Data member for <see cref="Layout"/>
        /// </summary>
        private ICliMetadataClassLayoutTableRow layout;
        private bool checkedDeclaringType;
        /// <summary>
        /// Data member for <see cref="DeclaringType"/>
        /// </summary>
        private ICliMetadataTypeDefinitionTableRow declaringType;
        /// <summary>
        /// Returns the index of the row within the <see cref="CliMetadataTypeDefinitionTableReader"/>
        /// since the rows from the containing table are referenced by other tables.
        /// </summary>
        public uint Index
        {
            get
            {
                return this.index;
            }
        }
        /// <summary>
        /// Returns the root of the metadata from which the current <see cref="CliMetadataTypeDefinitionLockedTableRow"/>
        /// was derived.
        /// </summary>
        public ICliMetadataRoot MetadataRoot
        {
            get
            {
                return this.metadataRoot;
            }
        }
        /// <summary>
        /// Returns the <see cref="TypeAttributes"/> which denote information about the type's
        /// structure.
        /// </summary>
        public TypeAttributes TypeAttributes
        {
            get
            {
                return this.typeAttributes;
            }
        }
        /// <summary>
        /// Returns the name of the defined type.
        /// </summary>
        public string Name
        {
            get
            {
                return this.metadataRoot.StringsHeap[this.nameIndex];
            }
        }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.StringsHeap"/> from which <see cref="Name"/>
        /// is derived.
        /// </summary>
        public uint NameIndex
        {
            get
            {
                return this.nameIndex;
            }
        }
        /// <summary>
        /// Returns the namespace of the defined type.
        /// </summary>
        public string Namespace
        {
            get
            {
                return this.metadataRoot.StringsHeap[this.namespaceIndex];
            }
        }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.StringsHeap"/> from which <see cref="Namespace"/>
        /// is derived.
        /// </summary>
        public uint NamespaceIndex
        {
            get
            {
                return this.namespaceIndex;
            }
        }
        /// <summary>
        /// Returns the <see cref="ICliMetadataTypeDefOrRefRow"/> from which the type derives.
        /// </summary>
        public ICliMetadataTypeDefOrRefRow Extends
        {
            get
            {
                if (this.extendsIndex == 0)
                    return null;
                switch (this.extendsSource)
                {
                    case CliMetadataTypeDefOrRefTag.TypeDefinition:
                        return this.metadataRoot.TableStream.TypeDefinitionTable[((int)(this.extendsIndex))];
                    case CliMetadataTypeDefOrRefTag.TypeReference:
                        return this.metadataRoot.TableStream.TypeRefTable[((int)(this.extendsIndex))];
                    case CliMetadataTypeDefOrRefTag.TypeSpecification:
                        return this.metadataRoot.TableStream.TypeSpecificationTable[((int)(this.extendsIndex))];
                }
                return null;
            }
        }
        /// <summary>
        /// Returns the decoded index of the <see cref="Extends"/> relative to the appropriate
        /// table.
        /// </summary>
        /// <remarks>
        /// Refer to <see cref="ExtendsSource"/> to discern the proper table for <see cref="ExtendsIndex"/>
        /// </remarks>
        public uint ExtendsIndex
        {
            get
            {
                return this.extendsIndex;
            }
        }
        /// <summary>
        /// Returns the <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataTypeDefOrRefTag"/>
        /// which determines the table that <see cref="ExtendsIndex"/> refers to.
        /// </summary>
        /// <remarks>
        /// <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataTypeDefOrRefTag"/>
        /// encoding <see cref="CliMetadataTableStreamAndHeader"/> tables:<list type="table"><listheader><term>Encoding</term><description>TableStream
        /// Property</description></listheader><item><term><see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataTypeDefOrRefTag.TypeDefinition"/></term><description><see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.CliMetadataTableStreamAndHeader.TypeDefinitionTable"/></description></item>
        /// <item><term><see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataTypeDefOrRefTag.TypeReference"/></term><description><see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.CliMetadataTableStreamAndHeader.TypeRefTable"/></description></item>
        /// <item><term><see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataTypeDefOrRefTag.TypeSpecification"/></term><description><see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.CliMetadataTableStreamAndHeader.TypeSpecificationTable"/></description></item>
        /// </list>
        /// </remarks>
        public CliMetadataTypeDefOrRefTag ExtendsSource
        {
            get
            {
                return this.extendsSource;
            }
        }
        /// <summary>
        /// Returns the <see cref="UInt32"/> value which determines the index of the first <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables.ICliMetadataFieldTableRow"/>
        /// within <see cref="Fields"/>
        /// </summary>
        public uint FieldStartIndex
        {
            get
            {
                return this.fieldStartIndex;
            }
        }
        /// <summary>
        /// Returns the <see cref="UInt32"/> value which determines the index of the first <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables.ICliMetadataMethodDefinitionTableRow"/>
        /// within <see cref="Methods"/>
        /// </summary>
        public uint MethodStartIndex
        {
            get
            {
                return this.methodStartIndex;
            }
        }
        public int Size
        {
            get
            {
                switch (this.state)
                {
                    case 1: case 2: case 8:
                        return CliMetadataTypeDefinitionTableReader.__COR_TYPEDEFINITION_CALC_SIZE_2__;
                    case 3: case 4: case 9: case 10:
                        return CliMetadataTypeDefinitionTableReader.__COR_TYPEDEFINITION_CALC_SIZE_3__;
                    case 5: case 6: case 11: case 12:
                        return CliMetadataTypeDefinitionTableReader.__COR_TYPEDEFINITION_CALC_SIZE_4__;
                    case 7: case 13: case 14:
                        return CliMetadataTypeDefinitionTableReader.__COR_TYPEDEFINITION_CALC_SIZE_5__;
                    case 15:
                        return CliMetadataTypeDefinitionTableReader.__COR_TYPEDEFINITION_CALC_SIZE_6__;
                }
                return CliMetadataTypeDefinitionTableReader.__COR_TYPEDEFINITION_CALC_SIZE_1__;
            }
        }
        /// <summary>
        /// Returns a set of <see cref="ICliMetadataInterfaceImplTableRow"/> which are associated
        /// to the <see cref="CliMetadataTypeDefinitionLockedTableRow"/>.
        /// </summary>
        /// <remarks>
        /// Created through references from the <see cref="ICliMetadataInterfaceImplTable"/>.
        /// </remarks>
        public IControlledCollection<ICliMetadataInterfaceImplTableRow> ImplementedInterfaces
        {
            get
            {
                if (this.implementedInterfaces == null)
                {
                    var implementedInterfacesTable = this.metadataRoot.TableStream.InterfaceImplTable;
                    if (implementedInterfacesTable != null)
                    {
                        List<uint> implementedInterfaces = new List<uint>();
                        foreach (var interfaceImpl in implementedInterfacesTable)
                            if (interfaceImpl.ClassIndex == this.Index)
                                implementedInterfaces.Add(interfaceImpl.Index);
                        this.implementedInterfaces = new CliMetadataLazySet<ICliMetadataInterfaceImplTableRow>(implementedInterfaces.ToArray(), this.metadataRoot.TableStream.InterfaceImplTable);
                    }
                }
                return this.implementedInterfaces;
            }
        }
        /// <summary>
        /// Returns the set of implementation mappings related to a class' implemented interfaces.
        /// </summary>
        /// <remarks>
        /// Created through references from the <see cref="ICliMetadataMethodImplTable"/>.
        /// </remarks>
        public IControlledCollection<ICliMetadataMethodImplTableRow> ImplementationMap
        {
            get
            {
                if (this.implementationMap == null)
                {
                    var implementationMapTable = this.metadataRoot.TableStream.MethodImplTable;
                    if (implementationMapTable != null)
                    {
                        List<uint> implementationMap = new List<uint>();
                        foreach (var methodImpl in implementationMapTable)
                            if (methodImpl.ClassIndex == this.Index)
                                implementationMap.Add(methodImpl.Index);
                        this.implementationMap = new CliMetadataLazySet<ICliMetadataMethodImplTableRow>(implementationMap.ToArray(), this.metadataRoot.TableStream.MethodImplTable);
                    }
                }
                return this.implementationMap;
            }
        }
        /// <summary>
        /// Returns the nested types for the current type.
        /// </summary>
        /// <remarks>
        /// Created through references from the <see cref="ICliMetadataNestedClassTable"/>.
        /// </remarks>
        public IControlledCollection<ICliMetadataTypeDefinitionTableRow> NestedClasses
        {
            get
            {
                if (this.nestedClasses == null)
                {
                    var nestedClassesTable = this.metadataRoot.TableStream.NestedClassTable;
                    if (nestedClassesTable != null)
                    {
                        List<uint> nestedClasses = new List<uint>();
                        foreach (var nestedClass in nestedClassesTable)
                            if (nestedClass.EnclosingClassIndex == this.Index)
                                nestedClasses.Add(nestedClass.NestedClassIndex);
                        this.nestedClasses = new CliMetadataLazySet<ICliMetadataTypeDefinitionTableRow>(nestedClasses.ToArray(), this.metadataRoot.TableStream.TypeDefinitionTable);
                    }
                }
                return this.nestedClasses;
            }
        }
        /// <summary>
        /// Returns returns the events for the current type definition.
        /// </summary>
        public IControlledCollection<ICliMetadataEventTableRow> Events
        {
            get
            {
                if (this.events == null)
                {
                    ICliMetadataEventMapTableRow currentEventMap = null;
                    ICliMetadataEventMapTable eventMapTable = this.metadataRoot.TableStream.EventMapTable;
                    if (eventMapTable == null)
                        return null;
                    foreach (var eventMap in eventMapTable)
                        if (this.Index == eventMap.ParentIndex)
                        {
                            currentEventMap = eventMap;
                            break;
                        }
                    if (currentEventMap == null)
                        this.events = new CliMetadataLazySequentialSet<ICliMetadataEventTableRow>(0, 0, this.metadataRoot.TableStream.EventTable);
                    else
                    {
                        ICliMetadataEventMapTableRow nextEventMap = this.metadataRoot.TableStream.EventMapTable[((int)(currentEventMap.Index + 1))];
                        uint lastEventIndex;
                        if (nextEventMap == null)
                            lastEventIndex = ((uint)(this.metadataRoot.TableStream.EventTable.Count + 1));
                        else
                            lastEventIndex = nextEventMap.EventListIndex;
                        this.events = new CliMetadataLazySequentialSet<ICliMetadataEventTableRow>(currentEventMap.EventListIndex, lastEventIndex, this.metadataRoot.TableStream.EventTable);
                    }
                }
                return this.events;
            }
        }
        /// <summary>
        /// Returns returns the properties for the current type definition.
        /// </summary>
        public IControlledCollection<ICliMetadataPropertyTableRow> Properties
        {
            get
            {
                if (this.properties == null)
                {
                    ICliMetadataPropertyMapTableRow currentPropertyMap = null;
                    ICliMetadataPropertyMapTable propertyMapTable = this.metadataRoot.TableStream.PropertyMapTable;
                    if (propertyMapTable == null)
                        return null;
                    foreach (var propertyMap in propertyMapTable)
                        if (this.Index == propertyMap.ParentIndex)
                        {
                            currentPropertyMap = propertyMap;
                            break;
                        }
                    if (currentPropertyMap == null)
                        this.properties = new CliMetadataLazySequentialSet<ICliMetadataPropertyTableRow>(0, 0, this.metadataRoot.TableStream.PropertyTable);
                    else
                    {
                        ICliMetadataPropertyMapTableRow nextPropertyMap = this.metadataRoot.TableStream.PropertyMapTable[((int)(currentPropertyMap.Index + 1))];
                        uint lastPropertyIndex;
                        if (nextPropertyMap == null)
                            lastPropertyIndex = ((uint)(this.metadataRoot.TableStream.PropertyTable.Count + 1));
                        else
                            lastPropertyIndex = nextPropertyMap.PropertyListIndex;
                        this.properties = new CliMetadataLazySequentialSet<ICliMetadataPropertyTableRow>(currentPropertyMap.PropertyListIndex, lastPropertyIndex, this.metadataRoot.TableStream.PropertyTable);
                    }
                }
                return this.properties;
            }
        }
        /// <summary>
        /// Returns the set of custom metadata elements applied to the member.
        /// </summary>
        /// <remarks>
        /// Created through references from the <see cref="ICliMetadataCustomAttributeTable"/>.
        /// </remarks>
        public IControlledCollection<ICliMetadataCustomAttributeTableRow> CustomAttributes
        {
            get
            {
                if (this.customAttributes == null)
                {
                    var customAttributesTable = this.metadataRoot.TableStream.CustomAttributeTable;
                    if (customAttributesTable != null)
                    {
                        List<uint> customAttributes = new List<uint>();
                        foreach (var customAttribute in customAttributesTable)
                            if (this.ParentSource == CliMetadataHasCustomAttributeTag.TypeDefinition && customAttribute.ParentIndex == this.Index)
                                customAttributes.Add(customAttribute.Index);
                            else if (customAttribute.ParentIndex > this.Index)
                                break;
                        this.customAttributes = new CliMetadataLazySet<ICliMetadataCustomAttributeTableRow>(customAttributes.ToArray(), this.metadataRoot.TableStream.CustomAttributeTable);
                    }
                }
                return this.customAttributes;
            }
        }
        /// <summary>
        /// Returns the type-parameters relative to the current row.
        /// </summary>
        /// <remarks>
        /// Created through references from the <see cref="ICliMetadataGenericParameterTable"/>.
        /// </remarks>
        public IControlledCollection<ICliMetadataGenericParameterTableRow> TypeParameters
        {
            get
            {
                if (this.typeParameters == null)
                {
                    var typeParametersTable = this.metadataRoot.TableStream.GenericParameterTable;
                    if (typeParametersTable != null)
                    {
                        List<uint> typeParameters = new List<uint>();
                        foreach (var genericParameter in typeParametersTable)
                            if (this.OwnerSource == CliMetadataTypeOrMethodDef.TypeDefinition && genericParameter.OwnerIndex == this.Index)
                                typeParameters.Add(genericParameter.Index);
                            else if (genericParameter.OwnerIndex > this.Index)
                                break;
                        this.typeParameters = new CliMetadataLazySet<ICliMetadataGenericParameterTableRow>(typeParameters.ToArray(), this.metadataRoot.TableStream.GenericParameterTable);
                    }
                }
                return this.typeParameters;
            }
        }
        /// <summary>
        /// Returns returns the fields for the current type.
        /// </summary>
        public IControlledCollection<ICliMetadataFieldTableRow> Fields
        {
            get
            {
                if (this.fields == null)
                {
                    ICliMetadataTypeDefinitionTableRow nextTypeDefinition = this.metadataRoot.TableStream.TypeDefinitionTable[((int)(this.Index + 1))];
                    uint lastFieldStartIndex;
                    ICliMetadataFieldTable fieldTable = this.metadataRoot.TableStream.FieldTable;
                    if (nextTypeDefinition != null)
                        lastFieldStartIndex = nextTypeDefinition.FieldStartIndex;
                    else if (fieldTable != null)
                        lastFieldStartIndex = ((uint)(fieldTable.Count + 1));
                    else
                        lastFieldStartIndex = this.FieldStartIndex;
                    this.fields = new CliMetadataLazySequentialSet<ICliMetadataFieldTableRow>(this.FieldStartIndex, lastFieldStartIndex, fieldTable);
                }
                return this.fields;
            }
        }
        /// <summary>
        /// Returns returns the methods for the current type.
        /// </summary>
        public IControlledCollection<ICliMetadataMethodDefinitionTableRow> Methods
        {
            get
            {
                if (this.methods == null)
                {
                    ICliMetadataTypeDefinitionTableRow nextTypeDefinition = this.metadataRoot.TableStream.TypeDefinitionTable[((int)(this.Index + 1))];
                    uint lastMethodStartIndex;
                    ICliMetadataMethodDefinitionTable methodDefinitionTable = this.metadataRoot.TableStream.MethodDefinitionTable;
                    if (nextTypeDefinition != null)
                        lastMethodStartIndex = nextTypeDefinition.MethodStartIndex;
                    else if (methodDefinitionTable != null)
                        lastMethodStartIndex = ((uint)(methodDefinitionTable.Count + 1));
                    else
                        lastMethodStartIndex = this.MethodStartIndex;
                    this.methods = new CliMetadataLazySequentialSet<ICliMetadataMethodDefinitionTableRow>(this.MethodStartIndex, lastMethodStartIndex, methodDefinitionTable);
                }
                return this.methods;
            }
        }
        /// <summary>
        /// Returns the class layout information which determines the data and packing size of
        /// the type.
        /// </summary>
        /// <remarks>
        /// Can be null.
        /// </remarks>
        public ICliMetadataClassLayoutTableRow Layout
        {
            get
            {
                if (!this.checkedLayout && this.layout == null)
                {
                    ICliMetadataClassLayoutTable classLayoutTable = this.metadataRoot.TableStream.ClassLayoutTable;
                    if (classLayoutTable != null)
                        foreach (var layout in classLayoutTable)
                            if (layout.ParentIndex == this.Index)
                            {
                                this.layout = layout;
                                break;
                            }
                    this.checkedLayout = true;
                }
                return this.layout;
            }
        }
        /// <summary>
        /// Returns the type which declares the current type.
        /// </summary>
        /// <remarks>
        /// Can be null.
        /// </remarks>
        public ICliMetadataTypeDefinitionTableRow DeclaringType
        {
            get
            {
                if (!this.checkedDeclaringType && this.declaringType == null)
                {
                    ICliMetadataNestedClassTable nestedClassTable = this.metadataRoot.TableStream.NestedClassTable;
                    if (nestedClassTable != null)
                        foreach (var declaringType in nestedClassTable)
                            if (declaringType.NestedClassIndex == this.Index)
                            {
                                this.declaringType = declaringType.EnclosingClass;
                                break;
                            }
                    this.checkedDeclaringType = true;
                }
                return this.declaringType;
            }
        }
        CliMetadataTypeDefOrRefTag ICliMetadataTypeDefOrRefRow.TypeDefOrRefEncoding
        {
            get
            {
                return CliMetadataTypeDefOrRefTag.TypeDefinition;
            }
        }
        CliMetadataHasCustomAttributeTag ICliMetadataHasCustomAttributeRow.HasCustomAttributeEncoding
        {
            get
            {
                return CliMetadataHasCustomAttributeTag.TypeDefinition;
            }
        }
        CliMetadataHasDeclSecurityTag ICliMetadataHasDeclSecurityRow.HasDeclSecurityEncoding
        {
            get
            {
                return CliMetadataHasDeclSecurityTag.TypeDefinition;
            }
        }
        CliMetadataMemberRefParentTag ICliMetadataMemberRefParentRow.MemberRefParentEncoding
        {
            get
            {
                return CliMetadataMemberRefParentTag.TypeDefinition;
            }
        }
        CliMetadataTypeOrMethodDef ICliMetadataTypeOrMethodDefRow.TypeOrMethodDefEncoding
        {
            get
            {
                return CliMetadataTypeOrMethodDef.TypeDefinition;
            }
        }
        IControlledCollection<ICliMetadataTypeDefinitionTableRow> _ICliTypeParent._Types
        {
            get
            {
                return this.NestedClasses;
            }
        }
        public override string ToString()
        {
            return string.Format("TypeDefinition: Name = {0}, Namespace = {1}", this.Name, this.Namespace);
        }
        internal CliMetadataTypeDefinitionLockedTableRow(uint index, byte state, ICliMetadataRoot metadataRoot, TypeAttributes typeAttributes, uint nameIndex, uint namespaceIndex, CliMetadataTypeDefOrRefTag extendsSource, uint extendsIndex, uint fieldStartIndex, uint methodStartIndex)
        {
            this.index = index;
            this.metadataRoot = metadataRoot;
            this.state = state;
            this.typeAttributes = typeAttributes;
            this.nameIndex = nameIndex;
            this.namespaceIndex = namespaceIndex;
            this.extendsSource = extendsSource;
            this.extendsIndex = extendsIndex;
            this.fieldStartIndex = fieldStartIndex;
            this.methodStartIndex = methodStartIndex;
        }
    };
};
