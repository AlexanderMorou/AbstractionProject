 /* ----------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.  |
 |  Version: 0.5.0.0                                          |
 |------------------------------------------------------------|
 |  To ensure the code works properly,                        |
 |  please do not make any changes to the file.               |
 |------------------------------------------------------------|
 |  The specific language is C♯                               |
 |  Sub-tool Name: C♯ Code Translator                         |
 |  Sub-tool Version: 1.0.0.0                                 |
 \---------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Cli.Metadata;
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables;
using AllenCopeland.Abstraction.Slf.Platforms.WindowsNT;
using AllenCopeland.Abstraction.Utilities.Collections;
using System;
using System.Collections.Generic;
namespace AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables
{
    /// <summary>
    /// Provides a locked row class for a locked table which defines the assembly references
    /// of a module through its manifest.
    /// </summary>
    internal class CliMetadataAssemblyRefLockedTableRow :
        ICliMetadataAssemblyRefTableRow
    {
        /// <summary>
        /// Data member for <see cref="Index"/>.
        /// </summary>
        private uint index;
        private ICliMetadataRoot metadataRoot;
        /// <summary>
        /// Data member for <see cref="Version"/>.
        /// </summary>
        private QWordLongVersion version;
        /// <summary>
        /// Data member for <see cref="Flags"/>.
        /// </summary>
        private CliMetadataAssemblyFlags flags;
        /// <summary>
        /// Data member for <see cref="PublicKeyOrToken"/>.
        /// </summary>
        private uint publicKeyOrTokenIndex;
        /// <summary>
        /// Data member for <see cref="Name"/>.
        /// </summary>
        private uint nameIndex;
        /// <summary>
        /// Data member for <see cref="Culture"/>.
        /// </summary>
        private uint cultureIndex;
        /// <summary>
        /// Data member for <see cref="HashValue"/>.
        /// </summary>
        private uint hashValueIndex;
        /// <summary>
        /// Data member which denotes the state of the row, used to calculate the size of the
        /// <see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables.CliMetadataAssemblyRefTableReader"/>
        /// </summary>
        private byte state;
        /// <summary>
        /// Data member for <see cref="CustomAttributes"/>.
        /// </summary>
        private IControlledCollection<ICliMetadataCustomAttributeTableRow> customAttributes;
        /// <summary>
        /// Returns the index of the row within the <see cref="CliMetadataAssemblyRefTableReader"/>
        /// since the rows from the containing table are referenced by other tables.
        /// </summary>
        public uint Index
        {
            get
            {
                return this.index;
            }
        }
        /// <summary>
        /// Returns the root of the metadata from which the current <see cref="CliMetadataAssemblyRefLockedTableRow"/>
        /// was derived.
        /// </summary>
        public ICliMetadataRoot MetadataRoot
        {
            get
            {
                return this.metadataRoot;
            }
        }
        public QWordLongVersion Version
        {
            get
            {
                return this.version;
            }
        }
        public CliMetadataAssemblyFlags Flags
        {
            get
            {
                return this.flags;
            }
        }
        public byte[] PublicKeyOrToken
        {
            get
            {
                return this.metadataRoot.BlobHeap[this.publicKeyOrTokenIndex];
            }
        }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.BlobHeap"/> from which <see cref="PublicKeyOrToken"/>
        /// is derived.
        /// </summary>
        public uint PublicKeyOrTokenIndex
        {
            get
            {
                return this.publicKeyOrTokenIndex;
            }
        }
        public string Name
        {
            get
            {
                return this.metadataRoot.StringsHeap[this.nameIndex];
            }
        }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.StringsHeap"/> from which <see cref="Name"/>
        /// is derived.
        /// </summary>
        public uint NameIndex
        {
            get
            {
                return this.nameIndex;
            }
        }
        public string Culture
        {
            get
            {
                return this.metadataRoot.StringsHeap[this.cultureIndex];
            }
        }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.StringsHeap"/> from which <see cref="Culture"/>
        /// is derived.
        /// </summary>
        public uint CultureIndex
        {
            get
            {
                return this.cultureIndex;
            }
        }
        public byte[] HashValue
        {
            get
            {
                return this.metadataRoot.BlobHeap[this.hashValueIndex];
            }
        }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.BlobHeap"/> from which <see cref="HashValue"/>
        /// is derived.
        /// </summary>
        public uint HashValueIndex
        {
            get
            {
                return this.hashValueIndex;
            }
        }
        public int Size
        {
            get
            {
                switch (this.state)
                {
                    case 1: case 2:
                        return CliMetadataAssemblyRefTableReader.__COR_ASSEMBLYREF_CALC_SIZE_2__;
                    case 3:
                        return CliMetadataAssemblyRefTableReader.__COR_ASSEMBLYREF_CALC_SIZE_3__;
                }
                return CliMetadataAssemblyRefTableReader.__COR_ASSEMBLYREF_CALC_SIZE_1__;
            }
        }
        /// <summary>
        /// Returns the set of custom metadata elements applied to the member.
        /// </summary>
        /// <remarks>
        /// Created through references from the <see cref="ICliMetadataCustomAttributeTable"/>.
        /// </remarks>
        public IControlledCollection<ICliMetadataCustomAttributeTableRow> CustomAttributes
        {
            get
            {
                if (this.customAttributes == null)
                {
                    var customAttributesTable = this.metadataRoot.TableStream.CustomAttributeTable;
                    if (customAttributesTable != null)
                    {
                        List<uint> customAttributes = new List<uint>();
                        foreach (var customAttribute in customAttributesTable)
                            if (this.ParentSource == CliMetadataHasCustomAttributeTag.AssemblyReference && customAttribute.ParentIndex == this.Index)
                                customAttributes.Add(customAttribute.Index);
                            else if (customAttribute.ParentIndex > this.Index)
                                break;
                        this.customAttributes = new CliMetadataLazySet<ICliMetadataCustomAttributeTableRow>(customAttributes.ToArray(), this.metadataRoot.TableStream.CustomAttributeTable);
                    }
                }
                return this.customAttributes;
            }
        }
        CliMetadataHasCustomAttributeTag ICliMetadataHasCustomAttributeRow.HasCustomAttributeEncoding
        {
            get
            {
                return CliMetadataHasCustomAttributeTag.AssemblyReference;
            }
        }
        CliMetadataImplementationTag ICliMetadataImplementationRow.ImplementationEncoding
        {
            get
            {
                return CliMetadataImplementationTag.AssemblyReference;
            }
        }
        CliMetadataResolutionScopeTag ICliMetadataResolutionScopeRow.ResolutionScopeEncoding
        {
            get
            {
                return CliMetadataResolutionScopeTag.AssemblyReference;
            }
        }
        public override string ToString()
        {
            return string.Format("AssemblyRef: Version = {0}, PublicKeyOrToken = {1}, Name = {2}, Culture = {3}, HashValue = {4}", this.Version, this.PublicKeyOrToken, this.Name, this.Culture, this.HashValue);
        }
        internal CliMetadataAssemblyRefLockedTableRow(uint index, byte state, ICliMetadataRoot metadataRoot, QWordLongVersion version, CliMetadataAssemblyFlags flags, uint publicKeyOrTokenIndex, uint nameIndex, uint cultureIndex, uint hashValueIndex)
        {
            this.index = index;
            this.metadataRoot = metadataRoot;
            this.state = state;
            this.version = version;
            this.flags = flags;
            this.publicKeyOrTokenIndex = publicKeyOrTokenIndex;
            this.nameIndex = nameIndex;
            this.cultureIndex = cultureIndex;
            this.hashValueIndex = hashValueIndex;
        }
    };
};
