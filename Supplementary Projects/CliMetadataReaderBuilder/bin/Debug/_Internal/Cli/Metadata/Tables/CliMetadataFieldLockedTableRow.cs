 /* ----------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.  |
 |  Version: 0.5.0.0                                          |
 |------------------------------------------------------------|
 |  To ensure the code works properly,                        |
 |  please do not make any changes to the file.               |
 |------------------------------------------------------------|
 |  The specific language is C♯                               |
 |  Sub-tool Name: C♯ Code Translator                         |
 |  Sub-tool Version: 1.0.0.0                                 |
 \---------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Cli.Metadata;
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Blobs;
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables;
using AllenCopeland.Abstraction.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Reflection;
namespace AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables
{
    /// <summary>
    /// Provides a locked row class for a locked table which defines information about the
    /// image's fields.
    /// </summary>
    internal class CliMetadataFieldLockedTableRow :
        ICliMetadataFieldTableRow
    {
        /// <summary>
        /// Data member for <see cref="Index"/>.
        /// </summary>
        private uint index;
        private ICliMetadataRoot metadataRoot;
        /// <summary>
        /// Data member for <see cref="FieldAttributes"/>.
        /// </summary>
        private FieldAttributes fieldAttributes;
        /// <summary>
        /// Data member for <see cref="Name"/>.
        /// </summary>
        private uint nameIndex;
        /// <summary>
        /// Data member for <see cref="FieldType"/>.
        /// </summary>
        private uint fieldTypeIndex;
        /// <summary>
        /// Data member which denotes the state of the row, used to calculate the size of the
        /// <see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables.CliMetadataFieldTableReader"/>
        /// </summary>
        private byte state;
        /// <summary>
        /// Data member for <see cref="CustomAttributes"/>.
        /// </summary>
        private IControlledCollection<ICliMetadataCustomAttributeTableRow> customAttributes;
        private bool checkedLayout;
        /// <summary>
        /// Data member for <see cref="Layout"/>
        /// </summary>
        private ICliMetadataFieldLayoutTableRow layout;
        private bool checkedRVA;
        /// <summary>
        /// Data member for <see cref="RVA"/>
        /// </summary>
        private ICliMetadataFieldRVATableRow rva;
        /// <summary>
        /// Returns the index of the row within the <see cref="CliMetadataFieldTableReader"/>
        /// since the rows from the containing table are referenced by other tables.
        /// </summary>
        public uint Index
        {
            get
            {
                return this.index;
            }
        }
        /// <summary>
        /// Returns the root of the metadata from which the current <see cref="CliMetadataFieldLockedTableRow"/>
        /// was derived.
        /// </summary>
        public ICliMetadataRoot MetadataRoot
        {
            get
            {
                return this.metadataRoot;
            }
        }
        /// <summary>
        /// Returns conditional information about the field and its accessibility.
        /// </summary>
        public FieldAttributes FieldAttributes
        {
            get
            {
                return this.fieldAttributes;
            }
        }
        /// <summary>
        /// Returns the name of the field.
        /// </summary>
        public string Name
        {
            get
            {
                return this.metadataRoot.StringsHeap[this.nameIndex];
            }
        }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.StringsHeap"/> from which <see cref="Name"/>
        /// is derived.
        /// </summary>
        public uint NameIndex
        {
            get
            {
                return this.nameIndex;
            }
        }
        /// <summary>
        /// Returns the type of the field, in signature form.
        /// </summary>
        public ICliMetadataFieldSignature FieldType
        {
            get
            {
                return this.metadataRoot.BlobHeap.GetSignature<ICliMetadataFieldSignature>(SignatureKinds.FieldSig, this.fieldTypeIndex);
            }
        }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.BlobHeap"/> from which <see cref="FieldType"/>
        /// is derived.
        /// </summary>
        public uint FieldTypeIndex
        {
            get
            {
                return this.fieldTypeIndex;
            }
        }
        public int Size
        {
            get
            {
                switch (this.state)
                {
                    case 1: case 2:
                        return CliMetadataFieldTableReader.__COR_FIELD_CALC_SIZE_2__;
                    case 3:
                        return CliMetadataFieldTableReader.__COR_FIELD_CALC_SIZE_3__;
                }
                return CliMetadataFieldTableReader.__COR_FIELD_CALC_SIZE_1__;
            }
        }
        /// <summary>
        /// Returns the set of custom metadata elements applied to the member.
        /// </summary>
        /// <remarks>
        /// Created through references from the <see cref="ICliMetadataCustomAttributeTable"/>.
        /// </remarks>
        public IControlledCollection<ICliMetadataCustomAttributeTableRow> CustomAttributes
        {
            get
            {
                if (this.customAttributes == null)
                {
                    var customAttributesTable = this.metadataRoot.TableStream.CustomAttributeTable;
                    if (customAttributesTable != null)
                    {
                        List<uint> customAttributes = new List<uint>();
                        foreach (var customAttribute in customAttributesTable)
                            if (this.ParentSource == CliMetadataHasCustomAttributeTag.Field && customAttribute.ParentIndex == this.Index)
                                customAttributes.Add(customAttribute.Index);
                            else if (customAttribute.ParentIndex > this.Index)
                                break;
                        this.customAttributes = new CliMetadataLazySet<ICliMetadataCustomAttributeTableRow>(customAttributes.ToArray(), this.metadataRoot.TableStream.CustomAttributeTable);
                    }
                }
                return this.customAttributes;
            }
        }
        /// <summary>
        /// Returns the layout of the field which determines the byte offset of the field relative
        /// to the structure which contains it.
        /// </summary>
        /// <remarks>
        /// Can be null.
        /// </remarks>
        public ICliMetadataFieldLayoutTableRow Layout
        {
            get
            {
                if (!this.checkedLayout && this.layout == null)
                {
                    ICliMetadataFieldLayoutTable fieldLayoutTable = this.metadataRoot.TableStream.FieldLayoutTable;
                    if (fieldLayoutTable != null)
                        foreach (var layout in fieldLayoutTable)
                            if (layout.FieldIndex == this.Index)
                            {
                                this.layout = layout;
                                break;
                            }
                    this.checkedLayout = true;
                }
                return this.layout;
            }
        }
        /// <summary>
        /// Returns the relative virtual address for the field.
        /// </summary>
        /// <remarks>
        /// Usually null except for initialized and uninitialized '.data' fields which store sequential
        /// bytes of data within the application's memory space.  The data-types of such fields
        /// must have no private fields of their own and contain no reference type fields as they
        /// point into the GC Heap.
        /// </remarks>
        public ICliMetadataFieldRVATableRow RVA
        {
            get
            {
                if (!this.checkedRVA && this.rva == null)
                {
                    ICliMetadataFieldRVATable fieldRelativeVirtualAddressTable = this.metadataRoot.TableStream.FieldRVATable;
                    if (fieldRelativeVirtualAddressTable != null)
                        foreach (var rva in fieldRelativeVirtualAddressTable)
                            if (rva.FieldIndex == this.Index)
                            {
                                this.rva = rva;
                                break;
                            }
                    this.checkedRVA = true;
                }
                return this.rva;
            }
        }
        CliMetadataHasConstantTag ICliMetadataHasConstantRow.HasConstantEncoding
        {
            get
            {
                return CliMetadataHasConstantTag.Field;
            }
        }
        CliMetadataHasCustomAttributeTag ICliMetadataHasCustomAttributeRow.HasCustomAttributeEncoding
        {
            get
            {
                return CliMetadataHasCustomAttributeTag.Field;
            }
        }
        CliMetadataHasFieldMarshalTag ICliMetadataHasFieldMarshalRow.HasFieldMarshalEncoding
        {
            get
            {
                return CliMetadataHasFieldMarshalTag.Field;
            }
        }
        CliMetadataMemberForwardedTag ICliMetadataMemberForwardedRow.MemberForwardedEncoding
        {
            get
            {
                return CliMetadataMemberForwardedTag.Field;
            }
        }
        public override string ToString()
        {
            return string.Format("Field: Name = {0}, FieldType = {1}", this.Name, this.FieldType);
        }
        internal CliMetadataFieldLockedTableRow(uint index, byte state, ICliMetadataRoot metadataRoot, FieldAttributes fieldAttributes, uint nameIndex, uint fieldTypeIndex)
        {
            this.index = index;
            this.metadataRoot = metadataRoot;
            this.state = state;
            this.fieldAttributes = fieldAttributes;
            this.nameIndex = nameIndex;
            this.fieldTypeIndex = fieldTypeIndex;
        }
    };
};
