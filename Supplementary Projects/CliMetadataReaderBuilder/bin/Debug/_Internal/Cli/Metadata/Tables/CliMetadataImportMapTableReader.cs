 /* ----------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.  |
 |  Version: 0.5.0.0                                          |
 |------------------------------------------------------------|
 |  To ensure the code works properly,                        |
 |  please do not make any changes to the file.               |
 |------------------------------------------------------------|
 |  The specific language is C♯                               |
 |  Sub-tool Name: C♯ Code Translator                         |
 |  Sub-tool Version: 1.0.0.0                                 |
 \---------------------------------------------------------- */
using AllenCopeland.Abstraction.IO;
using AllenCopeland.Abstraction.Slf.Cli.Metadata;
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables;
using System;
using System.IO;
namespace AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables
{
    internal class CliMetadataImportMapTableReader :
        CliMetadataLazyTable<ICliMetadataImportMapTableRow>, 
        ICliMetadataTable, 
        ICliMetadataImportMapTable
    {
        private ICliMetadataRoot metadataRoot;
        private EndianAwareBinaryReader reader;
        private object syncObject;
        private FileStream fStream;
        private uint rowCount;
        /// <summary>
        /// Size constant used when the total size of the <see cref="CliMetadataImportMapLockedTableRow"/>
        /// is 8 bytes long.
        /// </summary>
        internal const int __COR_IMPORTMAP_CALC_SIZE_1__ = 8;
        /// <summary>
        /// Size constant used when the total size of the <see cref="CliMetadataImportMapLockedTableRow"/>
        /// is 10 bytes long.
        /// </summary>
        internal const int __COR_IMPORTMAP_CALC_SIZE_2__ = 10;
        /// <summary>
        /// Size constant used when the total size of the <see cref="CliMetadataImportMapLockedTableRow"/>
        /// is 12 bytes long.
        /// </summary>
        internal const int __COR_IMPORTMAP_CALC_SIZE_3__ = 12;
        /// <summary>
        /// Size constant used when the total size of the <see cref="CliMetadataImportMapLockedTableRow"/>
        /// is 14 bytes long.
        /// </summary>
        internal const int __COR_IMPORTMAP_CALC_SIZE_4__ = 14;
        private int __size;
        private byte state;
        /// <summary>
        /// Data member which denotes where in the original stream the <see cref="CliMetadataImportMapTableReader"/>
        /// is.
        /// </summary>
        private long streamOffset;
        private long length;
        private bool fullyRead;
        public override CliMetadataTableKinds Kind
        {
            get
            {
                return CliMetadataTableKinds.ImportMap;
            }
        }
        public long Length
        {
            get
            {
                return this.length;
            }
        }
        /// <summary>
        /// Initializes the <see cref="CliMetadataImportMapTableReader"/> with the <paramref name="streamOffset"/>,<paramref name="memberForwardedSize"/>,
        /// <paramref name="moduleReferenceSize"/>, and <paramref name="stringsHeapSize"/> provided.
        /// </summary>
        /// <param name="streamOffset">
        /// The <see cref="Int64"/> value which denotes where in the stream of <see cref="reader"/>
        /// the <see cref="CliMetadataImportMapTableReader"/> is.
        /// </param>
        /// <param name="memberForwardedSize">
        /// The <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables.CliMetadataReferenceIndexSize"/>
        /// used to denote the word size of the indices nwith the <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataMemberForwardedTag"/>
        /// encoding.
        /// </param>
        /// <param name="moduleReferenceSize">
        /// The <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables.CliMetadataReferenceIndexSize"/>
        /// used to denote the word size of the <see cref="ICliMetadataModuleReferenceTable"/>.
        /// </param>
        /// <param name="stringsHeapSize">
        /// The <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables.CliMetadataReferenceIndexSize"/>
        /// used to denote the word size of the <see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.CliMetadataStringsHeaderAndHeap"/>.
        /// </param>
        internal void Initialize(long streamOffset, CliMetadataReferenceIndexSize memberForwardedSize, CliMetadataReferenceIndexSize moduleReferenceSize, CliMetadataReferenceIndexSize stringsHeapSize)
        {
            this.streamOffset = streamOffset;
            if (memberForwardedSize == CliMetadataReferenceIndexSize.DWord)
                if (moduleReferenceSize == CliMetadataReferenceIndexSize.DWord)
                    if (stringsHeapSize == CliMetadataReferenceIndexSize.DWord)
                    {
                        this.state = 7;
                        this.__size = CliMetadataImportMapTableReader.__COR_IMPORTMAP_CALC_SIZE_4__;
                    }
                    else
                    {
                        this.state = 3;
                        this.__size = CliMetadataImportMapTableReader.__COR_IMPORTMAP_CALC_SIZE_3__;
                    }
                else if (stringsHeapSize == CliMetadataReferenceIndexSize.DWord)
                {
                    this.state = 5;
                    this.__size = CliMetadataImportMapTableReader.__COR_IMPORTMAP_CALC_SIZE_3__;
                }
                else
                {
                    this.state = 1;
                    this.__size = CliMetadataImportMapTableReader.__COR_IMPORTMAP_CALC_SIZE_2__;
                }
            else if (moduleReferenceSize == CliMetadataReferenceIndexSize.DWord)
                if (stringsHeapSize == CliMetadataReferenceIndexSize.DWord)
                {
                    this.state = 6;
                    this.__size = CliMetadataImportMapTableReader.__COR_IMPORTMAP_CALC_SIZE_3__;
                }
                else
                {
                    this.state = 2;
                    this.__size = CliMetadataImportMapTableReader.__COR_IMPORTMAP_CALC_SIZE_2__;
                }
            else if (stringsHeapSize == CliMetadataReferenceIndexSize.DWord)
            {
                this.state = 4;
                this.__size = CliMetadataImportMapTableReader.__COR_IMPORTMAP_CALC_SIZE_2__;
            }
            else
            {
                this.state = 0;
                this.__size = CliMetadataImportMapTableReader.__COR_IMPORTMAP_CALC_SIZE_1__;
            }
            this.length = this.__size * this.rowCount;
        }
        protected override ICliMetadataImportMapTableRow ReadElementAt(uint index)
        {
            bool gotLock = false;
            System.Threading.Monitor.Enter(this.syncObject, ref gotLock);
            if (index == 0)
                return null;
            this.fStream.Seek(this.streamOffset + (index - 1) * this.__size, SeekOrigin.Begin);
            PlatformInvokeCharacterSet mappingCharset = ((PlatformInvokeCharacterSet)(this.reader.ReadByte()));
            PlatformInvokeCallingConvention mappingCallingConvention = ((PlatformInvokeCallingConvention)(this.reader.ReadByte()));
            uint memberForwardedIndex;
            CliMetadataMemberForwardedTag memberForwardedSource;
            switch (this.state)
            {
                case 1: case 3: case 5: case 7:
                    memberForwardedIndex = this.reader.ReadUInt32();
                    break;
                default:
                    memberForwardedIndex = this.reader.ReadUInt16();
                    break;
            }
            memberForwardedSource = ((CliMetadataMemberForwardedTag)(memberForwardedIndex & 1));
            memberForwardedIndex = memberForwardedIndex >> 1;
            uint importNameIndex;
            switch (this.state)
            {
                case 4: case 5: case 6: case 7:
                    importNameIndex = this.reader.ReadUInt32();
                    break;
                default:
                    importNameIndex = this.reader.ReadUInt16();
                    break;
            }
            uint importScopeIndex;
            switch (this.state)
            {
                case 2: case 3: case 6: case 7:
                    importScopeIndex = this.reader.ReadUInt32();
                    break;
                default:
                    importScopeIndex = this.reader.ReadUInt16();
                    break;
            }
            if (gotLock)
                System.Threading.Monitor.Exit(this.syncObject);
            return new CliMetadataImportMapLockedTableRow(this.state, this.metadataRoot, mappingCharset, mappingCallingConvention, memberForwardedSource, memberForwardedIndex, importNameIndex, importScopeIndex);
        }
        public override void Read()
        {
            if (this.fullyRead)
                return;
            for (uint index = 1; index <= this.Count; index++)
            {
                bool gotLock = false;
                System.Threading.Monitor.Enter(this.syncObject, ref gotLock);
                if (!base.ItemLoaded(index))
                {
                    this.fStream.Seek(this.streamOffset + (index - 1) * this.__size, SeekOrigin.Begin);
                    PlatformInvokeCharacterSet mappingCharset = ((PlatformInvokeCharacterSet)(this.reader.ReadByte()));
                    PlatformInvokeCallingConvention mappingCallingConvention = ((PlatformInvokeCallingConvention)(this.reader.ReadByte()));
                    uint memberForwardedIndex;
                    CliMetadataMemberForwardedTag memberForwardedSource;
                    switch (this.state)
                    {
                        case 1: case 3: case 5: case 7:
                            memberForwardedIndex = this.reader.ReadUInt32();
                            break;
                        default:
                            memberForwardedIndex = this.reader.ReadUInt16();
                            break;
                    }
                    memberForwardedSource = ((CliMetadataMemberForwardedTag)(memberForwardedIndex & 1));
                    memberForwardedIndex = memberForwardedIndex >> 1;
                    uint importNameIndex;
                    switch (this.state)
                    {
                        case 4: case 5: case 6: case 7:
                            importNameIndex = this.reader.ReadUInt32();
                            break;
                        default:
                            importNameIndex = this.reader.ReadUInt16();
                            break;
                    }
                    uint importScopeIndex;
                    switch (this.state)
                    {
                        case 2: case 3: case 6: case 7:
                            importScopeIndex = this.reader.ReadUInt32();
                            break;
                        default:
                            importScopeIndex = this.reader.ReadUInt16();
                            break;
                    }
                    base.InjectLoadedItem(new CliMetadataImportMapLockedTableRow(this.state, this.metadataRoot, mappingCharset, mappingCallingConvention, memberForwardedSource, memberForwardedIndex, importNameIndex, importScopeIndex), index);
                }
                if (gotLock)
                    System.Threading.Monitor.Exit(this.syncObject);
            }
            this.fullyRead = true;
        }
        public CliMetadataImportMapTableReader(ICliMetadataRoot metadataRoot, Tuple<object, FileStream, EndianAwareBinaryReader> readerInfo, uint rowCount)
            : base(metadataRoot, rowCount)
        {
            this.metadataRoot = metadataRoot;
            this.syncObject = readerInfo.Item1;
            this.fStream = readerInfo.Item2;
            this.reader = readerInfo.Item3;
            this.rowCount = rowCount;
        }
    };
};
