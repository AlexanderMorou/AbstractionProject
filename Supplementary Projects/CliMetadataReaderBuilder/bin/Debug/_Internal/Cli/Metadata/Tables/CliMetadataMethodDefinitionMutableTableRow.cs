 /* ----------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.  |
 |  Version: 0.5.0.0                                          |
 |------------------------------------------------------------|
 |  To ensure the code works properly,                        |
 |  please do not make any changes to the file.               |
 |------------------------------------------------------------|
 |  The specific language is C♯                               |
 |  Sub-tool Name: C♯ Code Translator                         |
 |  Sub-tool Version: 1.0.0.0                                 |
 \---------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Ast.Cli.Metadata;
using AllenCopeland.Abstraction.Utilities.Collections;
using System.Collections.ObjectModel;
namespace AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables
{
    /// <summary>
    /// Provides a mutable row class for a mutable table which defines information about the
    /// image's methods.
    /// </summary>
    class CliMetadataMethodDefinitionMutableTableRow
    {
        private ICliMetadataMutableRoot metadataRoot;
        private Collection<ICliMetadataParameterMutableTableRow> parameters;
        private CovariantReadOnlyCollection<AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables.ICliMetadataParameterTableRow, ICliMetadataParameterMutableTableRow> _parameters;
        /// <summary>
        /// Returns the root of the metadata from which the current <see cref="CliMetadataMethodDefinitionLockedTableRow"/>
        /// was derived.
        /// </summary>
        public ICliMetadataMutableRoot MetadataRoot
        {
            get
            {
                return this.metadataRoot;
            }
        }
        /// <summary>
        /// Returns returns the parameters for the current method.
        /// </summary>
        public Collection<ICliMetadataParameterMutableTableRow> Parameters
        {
            get
            {
                if (this.parameters == null)
                    this.parameters = new Collection<ICliMetadataParameterMutableTableRow>();
                return this.parameters;
            }
        }
        IControlledCollection<AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables.ICliMetadataParameterTableRow> AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables.ICliMetadataMethodDefinitionTableRow.Parameters
        {
            get
            {
                if (this._parameters == null)
                    this._parameters = new CovariantReadOnlyCollection<AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables.ICliMetadataParameterTableRow, ICliMetadataParameterMutableTableRow>(new ControlledCollection<ICliMetadataParameterMutableTableRow>(this.Parameters));
                return this._parameters;
            }
        }
    };
};
