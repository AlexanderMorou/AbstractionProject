 /* ----------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.  |
 |  Version: 0.5.0.0                                          |
 |------------------------------------------------------------|
 |  To ensure the code works properly,                        |
 |  please do not make any changes to the file.               |
 |------------------------------------------------------------|
 |  The specific language is C♯                               |
 |  Sub-tool Name: C♯ Code Translator                         |
 |  Sub-tool Version: 1.0.0.0                                 |
 \---------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Cli.Metadata;
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables;
using AllenCopeland.Abstraction.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Reflection;
namespace AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables
{
    internal class CliMetadataExportedTypeLockedTableRow :
        ICliMetadataExportedTypeTableRow
    {
        /// <summary>
        /// Data member for <see cref="Index"/>.
        /// </summary>
        private uint index;
        private ICliMetadataRoot metadataRoot;
        /// <summary>
        /// Data member for <see cref="TypeAttributes"/>.
        /// </summary>
        private TypeAttributes typeAttributes;
        /// <summary>
        /// Data member for <see cref="TypeDefIdentifier"/>.
        /// </summary>
        private uint typeDefIdentifier;
        /// <summary>
        /// Data member for <see cref="Name"/>.
        /// </summary>
        private uint nameIndex;
        /// <summary>
        /// Data member for <see cref="Namespace"/>.
        /// </summary>
        private uint namespaceIndex;
        /// <summary>
        /// Data member for <see cref="Implementation"/>.
        /// </summary>
        private uint implementationIndex;
        private CliMetadataImplementationTag implementationSource;
        /// <summary>
        /// Data member which denotes the state of the row, used to calculate the size of the
        /// <see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables.CliMetadataExportedTypeTableReader"/>
        /// </summary>
        private byte state;
        /// <summary>
        /// Data member for <see cref="CustomAttributes"/>.
        /// </summary>
        private IControlledCollection<ICliMetadataCustomAttributeTableRow> customAttributes;
        /// <summary>
        /// Returns the index of the row within the <see cref="CliMetadataExportedTypeTableReader"/>
        /// since the rows from the containing table are referenced by other tables.
        /// </summary>
        public uint Index
        {
            get
            {
                return this.index;
            }
        }
        /// <summary>
        /// Returns the root of the metadata from which the current <see cref="CliMetadataExportedTypeLockedTableRow"/>
        /// was derived.
        /// </summary>
        public ICliMetadataRoot MetadataRoot
        {
            get
            {
                return this.metadataRoot;
            }
        }
        public TypeAttributes TypeAttributes
        {
            get
            {
                return this.typeAttributes;
            }
        }
        public uint TypeDefIdentifier
        {
            get
            {
                return this.typeDefIdentifier;
            }
        }
        public string Name
        {
            get
            {
                return this.metadataRoot.StringsHeap[this.nameIndex];
            }
        }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.StringsHeap"/> from which <see cref="Name"/>
        /// is derived.
        /// </summary>
        public uint NameIndex
        {
            get
            {
                return this.nameIndex;
            }
        }
        public string Namespace
        {
            get
            {
                return this.metadataRoot.StringsHeap[this.namespaceIndex];
            }
        }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.StringsHeap"/> from which <see cref="Namespace"/>
        /// is derived.
        /// </summary>
        public uint NamespaceIndex
        {
            get
            {
                return this.namespaceIndex;
            }
        }
        public ICliMetadataImplementationRow Implementation
        {
            get
            {
                if (this.implementationIndex == 0)
                    return null;
                switch (this.implementationSource)
                {
                    case CliMetadataImplementationTag.AssemblyReference:
                        return this.metadataRoot.TableStream.AssemblyRefTable[((int)(this.implementationIndex))];
                    case CliMetadataImplementationTag.ExportedType:
                        return this.metadataRoot.TableStream.ExportedTypeTable[((int)(this.implementationIndex))];
                    case CliMetadataImplementationTag.File:
                        return this.metadataRoot.TableStream.FileTable[((int)(this.implementationIndex))];
                }
                return null;
            }
        }
        /// <summary>
        /// Returns the decoded index of the <see cref="Implementation"/> relative to the appropriate
        /// table.
        /// </summary>
        /// <remarks>
        /// Refer to <see cref="ImplementationSource"/> to discern the proper table for <see cref="ImplementationIndex"/>
        /// </remarks>
        public uint ImplementationIndex
        {
            get
            {
                return this.implementationIndex;
            }
        }
        /// <summary>
        /// Returns the <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataImplementationTag"/>
        /// which determines the table that <see cref="ImplementationIndex"/> refers to.
        /// </summary>
        /// <remarks>
        /// <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataImplementationTag"/>
        /// encoding <see cref="CliMetadataTableStreamAndHeader"/> tables:<list type="table"><listheader><term>Encoding</term><description>TableStream
        /// Property</description></listheader><item><term><see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataImplementationTag.AssemblyReference"/></term><description><see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.CliMetadataTableStreamAndHeader.AssemblyRefTable"/></description></item>
        /// <item><term><see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataImplementationTag.ExportedType"/></term><description><see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.CliMetadataTableStreamAndHeader.ExportedTypeTable"/></description></item>
        /// <item><term><see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataImplementationTag.File"/></term><description><see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.CliMetadataTableStreamAndHeader.FileTable"/></description></item>
        /// </list>
        /// </remarks>
        public CliMetadataImplementationTag ImplementationSource
        {
            get
            {
                return this.implementationSource;
            }
        }
        public int Size
        {
            get
            {
                switch (this.state)
                {
                    case 1:
                        return CliMetadataExportedTypeTableReader.__COR_EXPORTEDTYPE_CALC_SIZE_2__;
                    case 2:
                        return CliMetadataExportedTypeTableReader.__COR_EXPORTEDTYPE_CALC_SIZE_3__;
                    case 3:
                        return CliMetadataExportedTypeTableReader.__COR_EXPORTEDTYPE_CALC_SIZE_4__;
                }
                return CliMetadataExportedTypeTableReader.__COR_EXPORTEDTYPE_CALC_SIZE_1__;
            }
        }
        /// <summary>
        /// Returns the set of custom metadata elements applied to the member.
        /// </summary>
        /// <remarks>
        /// Created through references from the <see cref="ICliMetadataCustomAttributeTable"/>.
        /// </remarks>
        public IControlledCollection<ICliMetadataCustomAttributeTableRow> CustomAttributes
        {
            get
            {
                if (this.customAttributes == null)
                {
                    var customAttributesTable = this.metadataRoot.TableStream.CustomAttributeTable;
                    if (customAttributesTable != null)
                    {
                        List<uint> customAttributes = new List<uint>();
                        foreach (var customAttribute in customAttributesTable)
                            if (this.ParentSource == CliMetadataHasCustomAttributeTag.ExportedType && customAttribute.ParentIndex == this.Index)
                                customAttributes.Add(customAttribute.Index);
                            else if (customAttribute.ParentIndex > this.Index)
                                break;
                        this.customAttributes = new CliMetadataLazySet<ICliMetadataCustomAttributeTableRow>(customAttributes.ToArray(), this.metadataRoot.TableStream.CustomAttributeTable);
                    }
                }
                return this.customAttributes;
            }
        }
        CliMetadataHasCustomAttributeTag ICliMetadataHasCustomAttributeRow.HasCustomAttributeEncoding
        {
            get
            {
                return CliMetadataHasCustomAttributeTag.ExportedType;
            }
        }
        CliMetadataImplementationTag ICliMetadataImplementationRow.ImplementationEncoding
        {
            get
            {
                return CliMetadataImplementationTag.ExportedType;
            }
        }
        public override string ToString()
        {
            return string.Format("ExportedType: TypeDefIdentifier = {0}, Name = {1}, Namespace = {2}", this.TypeDefIdentifier, this.Name, this.Namespace);
        }
        internal CliMetadataExportedTypeLockedTableRow(uint index, byte state, ICliMetadataRoot metadataRoot, TypeAttributes typeAttributes, uint typeDefIdentifier, uint nameIndex, uint namespaceIndex, CliMetadataImplementationTag implementationSource, uint implementationIndex)
        {
            this.index = index;
            this.metadataRoot = metadataRoot;
            this.state = state;
            this.typeAttributes = typeAttributes;
            this.typeDefIdentifier = typeDefIdentifier;
            this.nameIndex = nameIndex;
            this.namespaceIndex = namespaceIndex;
            this.implementationSource = implementationSource;
            this.implementationIndex = implementationIndex;
        }
    };
};
