 /* ----------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.  |
 |  Version: 0.5.0.0                                          |
 |------------------------------------------------------------|
 |  To ensure the code works properly,                        |
 |  please do not make any changes to the file.               |
 |------------------------------------------------------------|
 |  The specific language is C♯                               |
 |  Sub-tool Name: C♯ Code Translator                         |
 |  Sub-tool Version: 1.0.0.0                                 |
 \---------------------------------------------------------- */
using AllenCopeland.Abstraction.IO;
using AllenCopeland.Abstraction.Slf.Cli.Metadata;
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables;
using System;
using System.IO;
namespace AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables
{
    internal class CliMetadataNestedClassTableReader :
        CliMetadataLazyTable<ICliMetadataNestedClassTableRow>, 
        ICliMetadataTable, 
        ICliMetadataNestedClassTable
    {
        private ICliMetadataRoot metadataRoot;
        private EndianAwareBinaryReader reader;
        private object syncObject;
        private FileStream fStream;
        private uint rowCount;
        /// <summary>
        /// Size constant used when the total size of the <see cref="CliMetadataNestedClassLockedTableRow"/>
        /// is 4 bytes long.
        /// </summary>
        internal const int __COR_NESTEDCLASS_CALC_SIZE_1__ = 4;
        /// <summary>
        /// Size constant used when the total size of the <see cref="CliMetadataNestedClassLockedTableRow"/>
        /// is 8 bytes long.
        /// </summary>
        internal const int __COR_NESTEDCLASS_CALC_SIZE_2__ = 8;
        private int __size;
        private byte state;
        /// <summary>
        /// Data member which denotes where in the original stream the <see cref="CliMetadataNestedClassTableReader"/>
        /// is.
        /// </summary>
        private long streamOffset;
        private long length;
        private bool fullyRead;
        public override CliMetadataTableKinds Kind
        {
            get
            {
                return CliMetadataTableKinds.NestedClass;
            }
        }
        public long Length
        {
            get
            {
                return this.length;
            }
        }
        /// <summary>
        /// Initializes the <see cref="CliMetadataNestedClassTableReader"/> with the <paramref name="streamOffset"/>,<paramref name="typeDefinitionSize"/>
        /// provided.
        /// </summary>
        /// <param name="streamOffset">
        /// The <see cref="Int64"/> value which denotes where in the stream of <see cref="reader"/>
        /// the <see cref="CliMetadataNestedClassTableReader"/> is.
        /// </param>
        /// <param name="typeDefinitionSize">
        /// The <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables.CliMetadataReferenceIndexSize"/>
        /// used to denote the word size of the <see cref="ICliMetadataTypeDefinitionTable"/>.
        /// </param>
        internal void Initialize(long streamOffset, CliMetadataReferenceIndexSize typeDefinitionSize)
        {
            this.streamOffset = streamOffset;
            if (typeDefinitionSize == CliMetadataReferenceIndexSize.DWord)
            {
                this.state = 1;
                this.__size = CliMetadataNestedClassTableReader.__COR_NESTEDCLASS_CALC_SIZE_2__;
            }
            else
            {
                this.state = 0;
                this.__size = CliMetadataNestedClassTableReader.__COR_NESTEDCLASS_CALC_SIZE_1__;
            }
            this.length = this.__size * this.rowCount;
        }
        protected override ICliMetadataNestedClassTableRow ReadElementAt(uint index)
        {
            bool gotLock = false;
            System.Threading.Monitor.Enter(this.syncObject, ref gotLock);
            if (index == 0)
                return null;
            this.fStream.Seek(this.streamOffset + (index - 1) * this.__size, SeekOrigin.Begin);
            uint nestedClassIndex;
            uint enclosingClassIndex;
            switch (this.state)
            {
                case 1:
                    nestedClassIndex = this.reader.ReadUInt32();
                    enclosingClassIndex = this.reader.ReadUInt32();
                    break;
                default:
                    nestedClassIndex = this.reader.ReadUInt16();
                    enclosingClassIndex = this.reader.ReadUInt16();
                    break;
            }
            if (gotLock)
                System.Threading.Monitor.Exit(this.syncObject);
            return new CliMetadataNestedClassLockedTableRow(this.state, this.metadataRoot, nestedClassIndex, enclosingClassIndex);
        }
        public override void Read()
        {
            if (this.fullyRead)
                return;
            for (uint index = 1; index <= this.Count; index++)
            {
                bool gotLock = false;
                System.Threading.Monitor.Enter(this.syncObject, ref gotLock);
                if (!base.ItemLoaded(index))
                {
                    this.fStream.Seek(this.streamOffset + (index - 1) * this.__size, SeekOrigin.Begin);
                    uint nestedClassIndex;
                    uint enclosingClassIndex;
                    switch (this.state)
                    {
                        case 1:
                            nestedClassIndex = this.reader.ReadUInt32();
                            enclosingClassIndex = this.reader.ReadUInt32();
                            break;
                        default:
                            nestedClassIndex = this.reader.ReadUInt16();
                            enclosingClassIndex = this.reader.ReadUInt16();
                            break;
                    }
                    base.InjectLoadedItem(new CliMetadataNestedClassLockedTableRow(this.state, this.metadataRoot, nestedClassIndex, enclosingClassIndex), index);
                }
                if (gotLock)
                    System.Threading.Monitor.Exit(this.syncObject);
            }
            this.fullyRead = true;
        }
        public CliMetadataNestedClassTableReader(ICliMetadataRoot metadataRoot, Tuple<object, FileStream, EndianAwareBinaryReader> readerInfo, uint rowCount)
            : base(metadataRoot, rowCount)
        {
            this.metadataRoot = metadataRoot;
            this.syncObject = readerInfo.Item1;
            this.fStream = readerInfo.Item2;
            this.reader = readerInfo.Item3;
            this.rowCount = rowCount;
        }
    };
};
