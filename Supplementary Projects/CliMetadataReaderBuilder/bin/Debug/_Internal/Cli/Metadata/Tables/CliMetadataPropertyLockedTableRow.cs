 /* ----------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.  |
 |  Version: 0.5.0.0                                          |
 |------------------------------------------------------------|
 |  To ensure the code works properly,                        |
 |  please do not make any changes to the file.               |
 |------------------------------------------------------------|
 |  The specific language is C♯                               |
 |  Sub-tool Name: C♯ Code Translator                         |
 |  Sub-tool Version: 1.0.0.0                                 |
 \---------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Cli.Metadata;
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Blobs;
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables;
using AllenCopeland.Abstraction.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Reflection;
namespace AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables
{
    /// <summary>
    /// Provides a locked row class for a locked table which defines information about a property.
    /// </summary>
    internal class CliMetadataPropertyLockedTableRow :
        ICliMetadataPropertyTableRow
    {
        /// <summary>
        /// Data member for <see cref="Index"/>.
        /// </summary>
        private uint index;
        private ICliMetadataRoot metadataRoot;
        /// <summary>
        /// Data member for <see cref="Flags"/>.
        /// </summary>
        private PropertyAttributes flags;
        /// <summary>
        /// Data member for <see cref="Name"/>.
        /// </summary>
        private uint nameIndex;
        /// <summary>
        /// Data member for <see cref="PropertyType"/>.
        /// </summary>
        private uint propertyTypeIndex;
        /// <summary>
        /// Data member which denotes the state of the row, used to calculate the size of the
        /// <see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables.CliMetadataPropertyTableReader"/>
        /// </summary>
        private byte state;
        /// <summary>
        /// Data member for <see cref="CustomAttributes"/>.
        /// </summary>
        private IControlledCollection<ICliMetadataCustomAttributeTableRow> customAttributes;
        /// <summary>
        /// Data member for <see cref="Methods"/>.
        /// </summary>
        private IControlledCollection<ICliMetadataMethodSemanticsTableRow> methods;
        bool checkedGetMethod;
        ICliMetadataMethodDefinitionTableRow getMethod;
        bool checkedSetMethod;
        ICliMetadataMethodDefinitionTableRow setMethod;
        /// <summary>
        /// Returns the index of the row within the <see cref="CliMetadataPropertyTableReader"/>
        /// since the rows from the containing table are referenced by other tables.
        /// </summary>
        public uint Index
        {
            get
            {
                return this.index;
            }
        }
        /// <summary>
        /// Returns the root of the metadata from which the current <see cref="CliMetadataPropertyLockedTableRow"/>
        /// was derived.
        /// </summary>
        public ICliMetadataRoot MetadataRoot
        {
            get
            {
                return this.metadataRoot;
            }
        }
        /// <summary>
        /// Returns conditional information about the property, such as special runtime handling
        /// semantics.
        /// </summary>
        public PropertyAttributes Flags
        {
            get
            {
                return this.flags;
            }
        }
        /// <summary>
        /// Returns the name of the property.
        /// </summary>
        public string Name
        {
            get
            {
                return this.metadataRoot.StringsHeap[this.nameIndex];
            }
        }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.StringsHeap"/> from which <see cref="Name"/>
        /// is derived.
        /// </summary>
        public uint NameIndex
        {
            get
            {
                return this.nameIndex;
            }
        }
        /// <summary>
        /// Returns the signature of the property.
        /// </summary>
        public ICliMetadataPropertySignature PropertyType
        {
            get
            {
                return this.metadataRoot.BlobHeap.GetSignature<ICliMetadataPropertySignature>(SignatureKinds.PropertySig, this.propertyTypeIndex);
            }
        }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.BlobHeap"/> from which <see cref="PropertyType"/>
        /// is derived.
        /// </summary>
        public uint PropertyTypeIndex
        {
            get
            {
                return this.propertyTypeIndex;
            }
        }
        public int Size
        {
            get
            {
                switch (this.state)
                {
                    case 1: case 2:
                        return CliMetadataPropertyTableReader.__COR_PROPERTY_CALC_SIZE_2__;
                    case 3:
                        return CliMetadataPropertyTableReader.__COR_PROPERTY_CALC_SIZE_3__;
                }
                return CliMetadataPropertyTableReader.__COR_PROPERTY_CALC_SIZE_1__;
            }
        }
        /// <summary>
        /// Returns the set of custom metadata elements applied to the member.
        /// </summary>
        /// <remarks>
        /// Created through references from the <see cref="ICliMetadataCustomAttributeTable"/>.
        /// </remarks>
        public IControlledCollection<ICliMetadataCustomAttributeTableRow> CustomAttributes
        {
            get
            {
                if (this.customAttributes == null)
                {
                    var customAttributesTable = this.metadataRoot.TableStream.CustomAttributeTable;
                    if (customAttributesTable != null)
                    {
                        List<uint> customAttributes = new List<uint>();
                        foreach (var customAttribute in customAttributesTable)
                            if (this.ParentSource == CliMetadataHasCustomAttributeTag.Property && customAttribute.ParentIndex == this.Index)
                                customAttributes.Add(customAttribute.Index);
                            else if (customAttribute.ParentIndex > this.Index)
                                break;
                        this.customAttributes = new CliMetadataLazySet<ICliMetadataCustomAttributeTableRow>(customAttributes.ToArray(), this.metadataRoot.TableStream.CustomAttributeTable);
                    }
                }
                return this.customAttributes;
            }
        }
        /// <summary>
        /// Returns the methods with semantics relative to the current row.
        /// </summary>
        /// <remarks>
        /// Created through references from the <see cref="ICliMetadataMethodSemanticsTable"/>.
        /// </remarks>
        public IControlledCollection<ICliMetadataMethodSemanticsTableRow> Methods
        {
            get
            {
                if (this.methods == null)
                {
                    var methodsTable = this.metadataRoot.PropertySemantics;
                    if (methodsTable != null)
                    {
                        List<uint> methods = new List<uint>();
                        foreach (var methodSemantics in methodsTable)
                            if (methodSemantics.AssociationIndex == this.Index)
                                methods.Add(methodSemantics.Index);
                            else if (methodSemantics.AssociationIndex > this.Index)
                                break;
                        this.methods = new CliMetadataLazySet<ICliMetadataMethodSemanticsTableRow>(methods.ToArray(), this.metadataRoot.TableStream.MethodSemanticsTable);
                    }
                }
                return this.methods;
            }
        }
        public ICliMetadataMethodDefinitionTableRow GetMethod
        {
            get
            {
                if (!this.checkedGetMethod)
                {
                    foreach (var semanticsMethod in this.Methods)
                        if ((semanticsMethod && MethodSemanticsAttributes.Getter | MethodSemanticsAttributes.Setter | MethodSemanticsAttributes.Other) == MethodSemanticsAttributes.Getter)
                            this.getMethod = semanticsMethod.Method;
                    this.checkedGetMethod = true;
                }
                return this.getMethod;
            }
        }
        public ICliMetadataMethodDefinitionTableRow SetMethod
        {
            get
            {
                if (!this.checkedSetMethod)
                {
                    foreach (var semanticsMethod in this.Methods)
                        if ((semanticsMethod && MethodSemanticsAttributes.Getter | MethodSemanticsAttributes.Setter | MethodSemanticsAttributes.Other) == MethodSemanticsAttributes.Setter)
                            this.setMethod = semanticsMethod.Method;
                    this.checkedSetMethod = true;
                }
                return this.setMethod;
            }
        }
        CliMetadataHasConstantTag ICliMetadataHasConstantRow.HasConstantEncoding
        {
            get
            {
                return CliMetadataHasConstantTag.Property;
            }
        }
        CliMetadataHasCustomAttributeTag ICliMetadataHasCustomAttributeRow.HasCustomAttributeEncoding
        {
            get
            {
                return CliMetadataHasCustomAttributeTag.Property;
            }
        }
        CliMetadataHasSemanticsTag ICliMetadataHasSemanticsRow.HasSemanticsEncoding
        {
            get
            {
                return CliMetadataHasSemanticsTag.Property;
            }
        }
        public override string ToString()
        {
            return string.Format("Property: Name = {0}, PropertyType = {1}", this.Name, this.PropertyType);
        }
        internal CliMetadataPropertyLockedTableRow(uint index, byte state, ICliMetadataRoot metadataRoot, PropertyAttributes flags, uint nameIndex, uint propertyTypeIndex)
        {
            this.index = index;
            this.metadataRoot = metadataRoot;
            this.state = state;
            this.flags = flags;
            this.nameIndex = nameIndex;
            this.propertyTypeIndex = propertyTypeIndex;
        }
    };
};
