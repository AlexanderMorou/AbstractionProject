 /* ----------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.  |
 |  Version: 0.5.0.0                                          |
 |------------------------------------------------------------|
 |  To ensure the code works properly,                        |
 |  please do not make any changes to the file.               |
 |------------------------------------------------------------|
 |  The specific language is C♯                               |
 |  Sub-tool Name: C♯ Code Translator                         |
 |  Sub-tool Version: 1.0.0.0                                 |
 \---------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Cli.Metadata;
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Blobs;
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables;
using AllenCopeland.Abstraction.Utilities.Collections;
using System;
using System.Collections.Generic;
namespace AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables
{
    /// <summary>
    /// Provides a locked row class for a locked table which defines information about the
    /// members referenced by the metadata's method bodies.
    /// </summary>
    internal class CliMetadataMemberReferenceLockedTableRow :
        ICliMetadataMemberReferenceTableRow
    {
        /// <summary>
        /// Data member for <see cref="Index"/>.
        /// </summary>
        private uint index;
        private ICliMetadataRoot metadataRoot;
        /// <summary>
        /// Data member for <see cref="Class"/>.
        /// </summary>
        private uint classIndex;
        private CliMetadataMemberRefParentTag classSource;
        /// <summary>
        /// Data member for <see cref="Name"/>.
        /// </summary>
        private uint nameIndex;
        /// <summary>
        /// Data member for <see cref="Signature"/>.
        /// </summary>
        private uint signatureIndex;
        /// <summary>
        /// Data member which denotes the state of the row, used to calculate the size of the
        /// <see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables.CliMetadataMemberReferenceTableReader"/>
        /// </summary>
        private byte state;
        /// <summary>
        /// Data member for <see cref="CustomAttributes"/>.
        /// </summary>
        private IControlledCollection<ICliMetadataCustomAttributeTableRow> customAttributes;
        /// <summary>
        /// Returns the index of the row within the <see cref="CliMetadataMemberReferenceTableReader"/>
        /// since the rows from the containing table are referenced by other tables.
        /// </summary>
        public uint Index
        {
            get
            {
                return this.index;
            }
        }
        /// <summary>
        /// Returns the root of the metadata from which the current <see cref="CliMetadataMemberReferenceLockedTableRow"/>
        /// was derived.
        /// </summary>
        public ICliMetadataRoot MetadataRoot
        {
            get
            {
                return this.metadataRoot;
            }
        }
        public ICliMetadataMemberRefParentRow Class
        {
            get
            {
                if (this.classIndex == 0)
                    return null;
                switch (this.classSource)
                {
                    case CliMetadataMemberRefParentTag.MethodDefinition:
                        return this.metadataRoot.TableStream.MethodDefinitionTable[((int)(this.classIndex))];
                    case CliMetadataMemberRefParentTag.ModuleReference:
                        return this.metadataRoot.TableStream.ModuleReferenceTable[((int)(this.classIndex))];
                    case CliMetadataMemberRefParentTag.TypeDefinition:
                        return this.metadataRoot.TableStream.TypeDefinitionTable[((int)(this.classIndex))];
                    case CliMetadataMemberRefParentTag.TypeReference:
                        return this.metadataRoot.TableStream.TypeRefTable[((int)(this.classIndex))];
                    case CliMetadataMemberRefParentTag.TypeSpecification:
                        return this.metadataRoot.TableStream.TypeSpecificationTable[((int)(this.classIndex))];
                }
                return null;
            }
        }
        /// <summary>
        /// Returns the decoded index of the <see cref="Class"/> relative to the appropriate table.
        /// </summary>
        /// <remarks>
        /// Refer to <see cref="ClassSource"/> to discern the proper table for <see cref="ClassIndex"/>
        /// </remarks>
        public uint ClassIndex
        {
            get
            {
                return this.classIndex;
            }
        }
        /// <summary>
        /// Returns the <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataMemberRefParentTag"/>
        /// which determines the table that <see cref="ClassIndex"/> refers to.
        /// </summary>
        /// <remarks>
        /// <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataMemberRefParentTag"/>
        /// encoding <see cref="CliMetadataTableStreamAndHeader"/> tables:<list type="table"><listheader><term>Encoding</term><description>TableStream
        /// Property</description></listheader><item><term><see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataMemberRefParentTag.MethodDefinition"/></term><description><see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.CliMetadataTableStreamAndHeader.MethodDefinitionTable"/></description></item>
        /// <item><term><see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataMemberRefParentTag.ModuleReference"/></term><description><see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.CliMetadataTableStreamAndHeader.ModuleReferenceTable"/></description></item>
        /// <item><term><see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataMemberRefParentTag.TypeDefinition"/></term><description><see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.CliMetadataTableStreamAndHeader.TypeDefinitionTable"/></description></item>
        /// <item><term><see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataMemberRefParentTag.TypeReference"/></term><description><see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.CliMetadataTableStreamAndHeader.TypeRefTable"/></description></item>
        /// <item><term><see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataMemberRefParentTag.TypeSpecification"/></term><description><see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.CliMetadataTableStreamAndHeader.TypeSpecificationTable"/></description></item>
        /// </list>
        /// </remarks>
        public CliMetadataMemberRefParentTag ClassSource
        {
            get
            {
                return this.classSource;
            }
        }
        /// <summary>
        /// Returns the name of the member reference.
        /// </summary>
        public string Name
        {
            get
            {
                return this.metadataRoot.StringsHeap[this.nameIndex];
            }
        }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.StringsHeap"/> from which <see cref="Name"/>
        /// is derived.
        /// </summary>
        public uint NameIndex
        {
            get
            {
                return this.nameIndex;
            }
        }
        /// <summary>
        /// Returns 
        /// </summary>
        public ICliMetadataMemberRefSignature Signature
        {
            get
            {
                return this.metadataRoot.BlobHeap.GetSignature<ICliMetadataMemberRefSignature>(SignatureKinds.MemberRefSig, this.signatureIndex);
            }
        }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.BlobHeap"/> from which <see cref="Signature"/>
        /// is derived.
        /// </summary>
        public uint SignatureIndex
        {
            get
            {
                return this.signatureIndex;
            }
        }
        public int Size
        {
            get
            {
                switch (this.state)
                {
                    case 1: case 2: case 4:
                        return CliMetadataMemberReferenceTableReader.__COR_MEMBERREFERENCE_CALC_SIZE_2__;
                    case 3: case 5: case 6:
                        return CliMetadataMemberReferenceTableReader.__COR_MEMBERREFERENCE_CALC_SIZE_3__;
                    case 7:
                        return CliMetadataMemberReferenceTableReader.__COR_MEMBERREFERENCE_CALC_SIZE_4__;
                }
                return CliMetadataMemberReferenceTableReader.__COR_MEMBERREFERENCE_CALC_SIZE_1__;
            }
        }
        /// <summary>
        /// Returns the set of custom metadata elements applied to the member.
        /// </summary>
        /// <remarks>
        /// Created through references from the <see cref="ICliMetadataCustomAttributeTable"/>.
        /// </remarks>
        public IControlledCollection<ICliMetadataCustomAttributeTableRow> CustomAttributes
        {
            get
            {
                if (this.customAttributes == null)
                {
                    var customAttributesTable = this.metadataRoot.TableStream.CustomAttributeTable;
                    if (customAttributesTable != null)
                    {
                        List<uint> customAttributes = new List<uint>();
                        foreach (var customAttribute in customAttributesTable)
                            if (this.ParentSource == CliMetadataHasCustomAttributeTag.MemberRef && customAttribute.ParentIndex == this.Index)
                                customAttributes.Add(customAttribute.Index);
                            else if (customAttribute.ParentIndex > this.Index)
                                break;
                        this.customAttributes = new CliMetadataLazySet<ICliMetadataCustomAttributeTableRow>(customAttributes.ToArray(), this.metadataRoot.TableStream.CustomAttributeTable);
                    }
                }
                return this.customAttributes;
            }
        }
        CliMetadataHasCustomAttributeTag ICliMetadataHasCustomAttributeRow.HasCustomAttributeEncoding
        {
            get
            {
                return CliMetadataHasCustomAttributeTag.MemberRef;
            }
        }
        CliMetadataMethodDefOrRefTag ICliMetadataMethodDefOrRefRow.MethodDefOrRefEncoding
        {
            get
            {
                return CliMetadataMethodDefOrRefTag.MemberRef;
            }
        }
        CliMetadataCustomAttributeTypeTag ICliMetadataCustomAttributeTypeRow.CustomAttributeTypeEncoding
        {
            get
            {
                return CliMetadataCustomAttributeTypeTag.MemberReference;
            }
        }
        public override string ToString()
        {
            return string.Format("MemberReference: Name = {0}, Signature = {1}", this.Name, this.Signature);
        }
        internal CliMetadataMemberReferenceLockedTableRow(uint index, byte state, ICliMetadataRoot metadataRoot, CliMetadataMemberRefParentTag classSource, uint classIndex, uint nameIndex, uint signatureIndex)
        {
            this.index = index;
            this.metadataRoot = metadataRoot;
            this.state = state;
            this.classSource = classSource;
            this.classIndex = classIndex;
            this.nameIndex = nameIndex;
            this.signatureIndex = signatureIndex;
        }
    };
};
