 /* ----------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.  |
 |  Version: 0.5.0.0                                          |
 |------------------------------------------------------------|
 |  To ensure the code works properly,                        |
 |  please do not make any changes to the file.               |
 |------------------------------------------------------------|
 |  The specific language is C♯                               |
 |  Sub-tool Name: C♯ Code Translator                         |
 |  Sub-tool Version: 1.0.0.0                                 |
 \---------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Cli.Metadata;
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables;
using System;
namespace AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables
{
    /// <summary>
    /// Provides a locked row class for a locked table which defines the target operating
    /// system of the assembly.
    /// </summary>
    internal class CliMetadataAssemblyRefOSLockedTableRow :
        ICliMetadataAssemblyRefOSTableRow
    {
        private ICliMetadataRoot metadataRoot;
        /// <summary>
        /// Data member for <see cref="PlatformId"/>.
        /// </summary>
        private uint platformId;
        /// <summary>
        /// Data member for <see cref="MajorVersion"/>.
        /// </summary>
        private uint majorVersion;
        /// <summary>
        /// Data member for <see cref="MinorVersion"/>.
        /// </summary>
        private uint minorVersion;
        /// <summary>
        /// Data member for <see cref="AssemblyRef"/>.
        /// </summary>
        private uint assemblyRefIndex;
        /// <summary>
        /// Data member which denotes the state of the row, used to calculate the size of the
        /// <see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables.CliMetadataAssemblyRefOSTableReader"/>
        /// </summary>
        private byte state;
        /// <summary>
        /// Returns the root of the metadata from which the current <see cref="CliMetadataAssemblyRefOSLockedTableRow"/>
        /// was derived.
        /// </summary>
        public ICliMetadataRoot MetadataRoot
        {
            get
            {
                return this.metadataRoot;
            }
        }
        public uint PlatformId
        {
            get
            {
                return this.platformId;
            }
        }
        public uint MajorVersion
        {
            get
            {
                return this.majorVersion;
            }
        }
        public uint MinorVersion
        {
            get
            {
                return this.minorVersion;
            }
        }
        public uint AssemblyRefIndex
        {
            get
            {
                return this.assemblyRefIndex;
            }
        }
        public ICliMetadataAssemblyRefTableRow AssemblyRef
        {
            get
            {
                return this.metadataRoot.TableStream.AssemblyRefTable[((int)(this.assemblyRefIndex))];
            }
        }
        public int Size
        {
            get
            {
                switch (this.state)
                {
                    case 1:
                        return CliMetadataAssemblyRefOSTableReader.__COR_ASSEMBLYREFOS_CALC_SIZE_2__;
                }
                return CliMetadataAssemblyRefOSTableReader.__COR_ASSEMBLYREFOS_CALC_SIZE_1__;
            }
        }
        public override string ToString()
        {
            return string.Format("AssemblyRefOS: PlatformId = {0}, MajorVersion = {1}, MinorVersion = {2}", this.PlatformId, this.MajorVersion, this.MinorVersion);
        }
        internal CliMetadataAssemblyRefOSLockedTableRow(byte state, ICliMetadataRoot metadataRoot, uint platformId, uint majorVersion, uint minorVersion, uint assemblyRefIndex)
        {
            this.metadataRoot = metadataRoot;
            this.state = state;
            this.platformId = platformId;
            this.majorVersion = majorVersion;
            this.minorVersion = minorVersion;
            this.assemblyRefIndex = assemblyRefIndex;
        }
    };
};
