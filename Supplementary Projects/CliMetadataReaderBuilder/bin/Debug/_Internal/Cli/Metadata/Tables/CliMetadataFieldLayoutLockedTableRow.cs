 /* ----------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.  |
 |  Version: 0.5.0.0                                          |
 |------------------------------------------------------------|
 |  To ensure the code works properly,                        |
 |  please do not make any changes to the file.               |
 |------------------------------------------------------------|
 |  The specific language is C♯                               |
 |  Sub-tool Name: C♯ Code Translator                         |
 |  Sub-tool Version: 1.0.0.0                                 |
 \---------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Cli.Metadata;
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables;
using System;
namespace AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables
{
    /// <summary>
    /// Provides a locked row class for a locked table which defines the layout of the fields
    /// on an <see cref="LayoutKind.Explicit"/> layout type.
    /// </summary>
    internal class CliMetadataFieldLayoutLockedTableRow :
        ICliMetadataFieldLayoutTableRow
    {
        private ICliMetadataRoot metadataRoot;
        /// <summary>
        /// Data member for <see cref="Offset"/>.
        /// </summary>
        private uint offset;
        /// <summary>
        /// Data member for <see cref="Field"/>.
        /// </summary>
        private uint fieldIndex;
        /// <summary>
        /// Data member which denotes the state of the row, used to calculate the size of the
        /// <see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables.CliMetadataFieldLayoutTableReader"/>
        /// </summary>
        private byte state;
        /// <summary>
        /// Returns the root of the metadata from which the current <see cref="CliMetadataFieldLayoutLockedTableRow"/>
        /// was derived.
        /// </summary>
        public ICliMetadataRoot MetadataRoot
        {
            get
            {
                return this.metadataRoot;
            }
        }
        public uint Offset
        {
            get
            {
                return this.offset;
            }
        }
        /// <summary>
        /// Returns the <see cref="UInt32"/> value which represents the field for which the layout
        /// exists.
        /// </summary>
        public uint FieldIndex
        {
            get
            {
                return this.fieldIndex;
            }
        }
        public int Size
        {
            get
            {
                switch (this.state)
                {
                    case 1:
                        return CliMetadataFieldLayoutTableReader.__COR_FIELDLAYOUT_CALC_SIZE_2__;
                }
                return CliMetadataFieldLayoutTableReader.__COR_FIELDLAYOUT_CALC_SIZE_1__;
            }
        }
        public override string ToString()
        {
            return string.Format("FieldLayout: Offset = {0}", this.Offset);
        }
        internal CliMetadataFieldLayoutLockedTableRow(byte state, ICliMetadataRoot metadataRoot, uint offset, uint fieldIndex)
        {
            this.metadataRoot = metadataRoot;
            this.state = state;
            this.offset = offset;
            this.fieldIndex = fieldIndex;
        }
    };
};
