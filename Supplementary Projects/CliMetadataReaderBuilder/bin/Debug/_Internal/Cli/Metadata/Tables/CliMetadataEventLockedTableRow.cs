 /* ----------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.  |
 |  Version: 0.5.0.0                                          |
 |------------------------------------------------------------|
 |  To ensure the code works properly,                        |
 |  please do not make any changes to the file.               |
 |------------------------------------------------------------|
 |  The specific language is C♯                               |
 |  Sub-tool Name: C♯ Code Translator                         |
 |  Sub-tool Version: 1.0.0.0                                 |
 \---------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Cli.Metadata;
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables;
using AllenCopeland.Abstraction.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Reflection;
namespace AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables
{
    /// <summary>
    /// Provides a locked row class for a locked table which defines information about an
    /// event.
    /// </summary>
    internal class CliMetadataEventLockedTableRow :
        ICliMetadataEventTableRow
    {
        /// <summary>
        /// Data member for <see cref="Index"/>.
        /// </summary>
        private uint index;
        private ICliMetadataRoot metadataRoot;
        /// <summary>
        /// Data member for <see cref="Flags"/>.
        /// </summary>
        private EventAttributes flags;
        /// <summary>
        /// Data member for <see cref="Name"/>.
        /// </summary>
        private uint nameIndex;
        /// <summary>
        /// Data member for <see cref="SignatureType"/>.
        /// </summary>
        private uint signatureTypeIndex;
        private CliMetadataTypeDefOrRefTag signatureSource;
        /// <summary>
        /// Data member which denotes the state of the row, used to calculate the size of the
        /// <see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables.CliMetadataEventTableReader"/>
        /// </summary>
        private byte state;
        /// <summary>
        /// Data member for <see cref="CustomAttributes"/>.
        /// </summary>
        private IControlledCollection<ICliMetadataCustomAttributeTableRow> customAttributes;
        /// <summary>
        /// Data member for <see cref="Methods"/>.
        /// </summary>
        private IControlledCollection<ICliMetadataMethodSemanticsTableRow> methods;
        bool checkedOnAdd;
        ICliMetadataMethodDefinitionTableRow onAdd;
        bool checkedOnRemove;
        ICliMetadataMethodDefinitionTableRow onRemove;
        bool checkedOnFire;
        ICliMetadataMethodDefinitionTableRow onFire;
        /// <summary>
        /// Returns the index of the row within the <see cref="CliMetadataEventTableReader"/>
        /// since the rows from the containing table are referenced by other tables.
        /// </summary>
        public uint Index
        {
            get
            {
                return this.index;
            }
        }
        /// <summary>
        /// Returns the root of the metadata from which the current <see cref="CliMetadataEventLockedTableRow"/>
        /// was derived.
        /// </summary>
        public ICliMetadataRoot MetadataRoot
        {
            get
            {
                return this.metadataRoot;
            }
        }
        /// <summary>
        /// Returns the <see cref="EventAttributes"/> which denote how the event is handled.
        /// </summary>
        public EventAttributes Flags
        {
            get
            {
                return this.flags;
            }
        }
        /// <summary>
        /// Returns the name of the event.
        /// </summary>
        public string Name
        {
            get
            {
                return this.metadataRoot.StringsHeap[this.nameIndex];
            }
        }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.StringsHeap"/> from which <see cref="Name"/>
        /// is derived.
        /// </summary>
        public uint NameIndex
        {
            get
            {
                return this.nameIndex;
            }
        }
        /// <summary>
        /// Returns the <see cref="ITypeDefOrRefRow"/> which is the delegate that acts as the
        /// event's signature.
        /// </summary>
        public ICliMetadataTypeDefOrRefRow SignatureType
        {
            get
            {
                if (this.signatureTypeIndex == 0)
                    return null;
                switch (this.signatureSource)
                {
                    case CliMetadataTypeDefOrRefTag.TypeDefinition:
                        return this.metadataRoot.TableStream.TypeDefinitionTable[((int)(this.signatureTypeIndex))];
                    case CliMetadataTypeDefOrRefTag.TypeReference:
                        return this.metadataRoot.TableStream.TypeRefTable[((int)(this.signatureTypeIndex))];
                    case CliMetadataTypeDefOrRefTag.TypeSpecification:
                        return this.metadataRoot.TableStream.TypeSpecificationTable[((int)(this.signatureTypeIndex))];
                }
                return null;
            }
        }
        /// <summary>
        /// Returns the decoded index of the <see cref="SignatureType"/> relative to the appropriate
        /// table.
        /// </summary>
        /// <remarks>
        /// Refer to <see cref="SignatureSource"/> to discern the proper table for <see cref="SignatureTypeIndex"/>
        /// </remarks>
        public uint SignatureTypeIndex
        {
            get
            {
                return this.signatureTypeIndex;
            }
        }
        /// <summary>
        /// Returns the <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataTypeDefOrRefTag"/>
        /// which determines the table that <see cref="SignatureTypeIndex"/> refers to.
        /// </summary>
        /// <remarks>
        /// <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataTypeDefOrRefTag"/>
        /// encoding <see cref="CliMetadataTableStreamAndHeader"/> tables:<list type="table"><listheader><term>Encoding</term><description>TableStream
        /// Property</description></listheader><item><term><see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataTypeDefOrRefTag.TypeDefinition"/></term><description><see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.CliMetadataTableStreamAndHeader.TypeDefinitionTable"/></description></item>
        /// <item><term><see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataTypeDefOrRefTag.TypeReference"/></term><description><see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.CliMetadataTableStreamAndHeader.TypeRefTable"/></description></item>
        /// <item><term><see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.CliMetadataTypeDefOrRefTag.TypeSpecification"/></term><description><see cref="AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.CliMetadataTableStreamAndHeader.TypeSpecificationTable"/></description></item>
        /// </list>
        /// </remarks>
        public CliMetadataTypeDefOrRefTag SignatureSource
        {
            get
            {
                return this.signatureSource;
            }
        }
        public int Size
        {
            get
            {
                switch (this.state)
                {
                    case 1: case 2:
                        return CliMetadataEventTableReader.__COR_EVENT_CALC_SIZE_2__;
                    case 3:
                        return CliMetadataEventTableReader.__COR_EVENT_CALC_SIZE_3__;
                }
                return CliMetadataEventTableReader.__COR_EVENT_CALC_SIZE_1__;
            }
        }
        /// <summary>
        /// Returns the set of custom metadata elements applied to the member.
        /// </summary>
        /// <remarks>
        /// Created through references from the <see cref="ICliMetadataCustomAttributeTable"/>.
        /// </remarks>
        public IControlledCollection<ICliMetadataCustomAttributeTableRow> CustomAttributes
        {
            get
            {
                if (this.customAttributes == null)
                {
                    var customAttributesTable = this.metadataRoot.TableStream.CustomAttributeTable;
                    if (customAttributesTable != null)
                    {
                        List<uint> customAttributes = new List<uint>();
                        foreach (var customAttribute in customAttributesTable)
                            if (this.ParentSource == CliMetadataHasCustomAttributeTag.Event && customAttribute.ParentIndex == this.Index)
                                customAttributes.Add(customAttribute.Index);
                            else if (customAttribute.ParentIndex > this.Index)
                                break;
                        this.customAttributes = new CliMetadataLazySet<ICliMetadataCustomAttributeTableRow>(customAttributes.ToArray(), this.metadataRoot.TableStream.CustomAttributeTable);
                    }
                }
                return this.customAttributes;
            }
        }
        /// <summary>
        /// Returns the methods with semantics relative to the current row.
        /// </summary>
        /// <remarks>
        /// Created through references from the <see cref="ICliMetadataMethodSemanticsTable"/>.
        /// </remarks>
        public IControlledCollection<ICliMetadataMethodSemanticsTableRow> Methods
        {
            get
            {
                if (this.methods == null)
                {
                    var methodsTable = this.metadataRoot.EventSemantics;
                    if (methodsTable != null)
                    {
                        List<uint> methods = new List<uint>();
                        foreach (var methodSemantics in methodsTable)
                            if (methodSemantics.AssociationIndex == this.Index)
                                methods.Add(methodSemantics.Index);
                            else if (methodSemantics.AssociationIndex > this.Index)
                                break;
                        this.methods = new CliMetadataLazySet<ICliMetadataMethodSemanticsTableRow>(methods.ToArray(), this.metadataRoot.TableStream.MethodSemanticsTable);
                    }
                }
                return this.methods;
            }
        }
        public ICliMetadataMethodDefinitionTableRow OnAdd
        {
            get
            {
                if (!this.checkedOnAdd)
                {
                    foreach (var semanticsMethod in this.Methods)
                        if ((semanticsMethod && MethodSemanticsAttributes.AddOn | MethodSemanticsAttributes.RemoveOn | MethodSemanticsAttributes.Fire | MethodSemanticsAttributes.Other) == MethodSemanticsAttributes.AddOn)
                            this.onAdd = semanticsMethod.Method;
                    this.checkedOnAdd = true;
                }
                return this.onAdd;
            }
        }
        public ICliMetadataMethodDefinitionTableRow OnRemove
        {
            get
            {
                if (!this.checkedOnRemove)
                {
                    foreach (var semanticsMethod in this.Methods)
                        if ((semanticsMethod && MethodSemanticsAttributes.AddOn | MethodSemanticsAttributes.RemoveOn | MethodSemanticsAttributes.Fire | MethodSemanticsAttributes.Other) == MethodSemanticsAttributes.RemoveOn)
                            this.onRemove = semanticsMethod.Method;
                    this.checkedOnRemove = true;
                }
                return this.onRemove;
            }
        }
        public ICliMetadataMethodDefinitionTableRow OnFire
        {
            get
            {
                if (!this.checkedOnFire)
                {
                    foreach (var semanticsMethod in this.Methods)
                        if ((semanticsMethod && MethodSemanticsAttributes.AddOn | MethodSemanticsAttributes.RemoveOn | MethodSemanticsAttributes.Fire | MethodSemanticsAttributes.Other) == MethodSemanticsAttributes.Fire)
                            this.onFire = semanticsMethod.Method;
                    this.checkedOnFire = true;
                }
                return this.onFire;
            }
        }
        CliMetadataHasCustomAttributeTag ICliMetadataHasCustomAttributeRow.HasCustomAttributeEncoding
        {
            get
            {
                return CliMetadataHasCustomAttributeTag.Event;
            }
        }
        CliMetadataHasSemanticsTag ICliMetadataHasSemanticsRow.HasSemanticsEncoding
        {
            get
            {
                return CliMetadataHasSemanticsTag.Event;
            }
        }
        public override string ToString()
        {
            return string.Format("Event: Name = {0}", this.Name);
        }
        internal CliMetadataEventLockedTableRow(uint index, byte state, ICliMetadataRoot metadataRoot, EventAttributes flags, uint nameIndex, CliMetadataTypeDefOrRefTag signatureSource, uint signatureTypeIndex)
        {
            this.index = index;
            this.metadataRoot = metadataRoot;
            this.state = state;
            this.flags = flags;
            this.nameIndex = nameIndex;
            this.signatureSource = signatureSource;
            this.signatureTypeIndex = signatureTypeIndex;
        }
    };
};
