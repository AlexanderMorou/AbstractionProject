 /* ----------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.  |
 |  Version: 0.5.0.0                                          |
 |------------------------------------------------------------|
 |  To ensure the code works properly,                        |
 |  please do not make any changes to the file.               |
 |------------------------------------------------------------|
 |  The specific language is C♯                               |
 |  Sub-tool Name: C♯ Code Translator                         |
 |  Sub-tool Version: 1.0.0.0                                 |
 \---------------------------------------------------------- */
using AllenCopeland.Abstraction.IO;
using AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata.Tables;
using AllenCopeland.Abstraction.Slf.Cli.Metadata;
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables;
using AllenCopeland.Abstraction.Slf.Platforms.WindowsNT;
using AllenCopeland.Abstraction.Utilities.Collections;
using System;
namespace AllenCopeland.Abstraction.Slf._Internal.Cli.Metadata
{
    partial class CliMetadataTableStreamAndHeader :
        ControlledDictionary<CliMetadataTableKinds, ICliMetadataTable>, 
        ICliMetadataTableStreamAndHeader
    {
        private uint reservedA;
        private WordVersion schemataVersion;
        private CliMetadataHeapSizes heapSizes;
        private byte reservedB;
        private CliMetadataTableKinds tablesPresent;
        private CliMetadataTableKinds sortedTables;
        /// <summary>
        /// Data member for <see cref="ModuleTable"/>.
        /// </summary>
        private CliMetadataModuleTableReader moduleTable;
        /// <summary>
        /// Data member for <see cref="TypeRefTable"/>.
        /// </summary>
        private CliMetadataTypeRefTableReader typeRefTable;
        /// <summary>
        /// Data member for <see cref="TypeDefinitionTable"/>.
        /// </summary>
        private CliMetadataTypeDefinitionTableReader typeDefinitionTable;
        /// <summary>
        /// Data member for <see cref="FieldTable"/>.
        /// </summary>
        private CliMetadataFieldTableReader fieldTable;
        /// <summary>
        /// Data member for <see cref="MethodDefinitionTable"/>.
        /// </summary>
        private CliMetadataMethodDefinitionTableReader methodDefinitionTable;
        /// <summary>
        /// Data member for <see cref="ParameterTable"/>.
        /// </summary>
        private CliMetadataParameterTableReader parameterTable;
        /// <summary>
        /// Data member for <see cref="InterfaceImplTable"/>.
        /// </summary>
        private CliMetadataInterfaceImplTableReader interfaceImplTable;
        /// <summary>
        /// Data member for <see cref="MemberReferenceTable"/>.
        /// </summary>
        private CliMetadataMemberReferenceTableReader memberReferenceTable;
        /// <summary>
        /// Data member for <see cref="ConstantTable"/>.
        /// </summary>
        private CliMetadataConstantTableReader constantTable;
        /// <summary>
        /// Data member for <see cref="CustomAttributeTable"/>.
        /// </summary>
        private CliMetadataCustomAttributeTableReader customAttributeTable;
        /// <summary>
        /// Data member for <see cref="FieldMarshalTable"/>.
        /// </summary>
        private CliMetadataFieldMarshalTableReader fieldMarshalTable;
        /// <summary>
        /// Data member for <see cref="DeclSecurityTable"/>.
        /// </summary>
        private CliMetadataDeclSecurityTableReader declSecurityTable;
        /// <summary>
        /// Data member for <see cref="ClassLayoutTable"/>.
        /// </summary>
        private CliMetadataClassLayoutTableReader classLayoutTable;
        /// <summary>
        /// Data member for <see cref="FieldLayoutTable"/>.
        /// </summary>
        private CliMetadataFieldLayoutTableReader fieldLayoutTable;
        /// <summary>
        /// Data member for <see cref="StandAloneSigTable"/>.
        /// </summary>
        private CliMetadataStandAloneSigTableReader standAloneSigTable;
        /// <summary>
        /// Data member for <see cref="EventMapTable"/>.
        /// </summary>
        private CliMetadataEventMapTableReader eventMapTable;
        /// <summary>
        /// Data member for <see cref="EventTable"/>.
        /// </summary>
        private CliMetadataEventTableReader eventTable;
        /// <summary>
        /// Data member for <see cref="PropertyMapTable"/>.
        /// </summary>
        private CliMetadataPropertyMapTableReader propertyMapTable;
        /// <summary>
        /// Data member for <see cref="PropertyTable"/>.
        /// </summary>
        private CliMetadataPropertyTableReader propertyTable;
        /// <summary>
        /// Data member for <see cref="MethodSemanticsTable"/>.
        /// </summary>
        private CliMetadataMethodSemanticsTableReader methodSemanticsTable;
        /// <summary>
        /// Data member for <see cref="MethodImplTable"/>.
        /// </summary>
        private CliMetadataMethodImplTableReader methodImplTable;
        /// <summary>
        /// Data member for <see cref="ModuleReferenceTable"/>.
        /// </summary>
        private CliMetadataModuleReferenceTableReader moduleReferenceTable;
        /// <summary>
        /// Data member for <see cref="TypeSpecificationTable"/>.
        /// </summary>
        private CliMetadataTypeSpecificationTableReader typeSpecificationTable;
        /// <summary>
        /// Data member for <see cref="ImportMapTable"/>.
        /// </summary>
        private CliMetadataImportMapTableReader importMapTable;
        /// <summary>
        /// Data member for <see cref="FieldRVATable"/>.
        /// </summary>
        private CliMetadataFieldRVATableReader fieldRVATable;
        /// <summary>
        /// Data member for <see cref="AssemblyTable"/>.
        /// </summary>
        private CliMetadataAssemblyTableReader assemblyTable;
        /// <summary>
        /// Data member for <see cref="AssemblyProcessorTable"/>.
        /// </summary>
        private CliMetadataAssemblyProcessorTableReader assemblyProcessorTable;
        /// <summary>
        /// Data member for <see cref="AssemblyOSTable"/>.
        /// </summary>
        private CliMetadataAssemblyOSTableReader assemblyOSTable;
        /// <summary>
        /// Data member for <see cref="AssemblyRefTable"/>.
        /// </summary>
        private CliMetadataAssemblyRefTableReader assemblyRefTable;
        /// <summary>
        /// Data member for <see cref="AssemblyRefProcessorTable"/>.
        /// </summary>
        private CliMetadataAssemblyRefProcessorTableReader assemblyRefProcessorTable;
        /// <summary>
        /// Data member for <see cref="AssemblyRefOSTable"/>.
        /// </summary>
        private CliMetadataAssemblyRefOSTableReader assemblyRefOSTable;
        /// <summary>
        /// Data member for <see cref="FileTable"/>.
        /// </summary>
        private CliMetadataFileTableReader fileTable;
        /// <summary>
        /// Data member for <see cref="ExportedTypeTable"/>.
        /// </summary>
        private CliMetadataExportedTypeTableReader exportedTypeTable;
        /// <summary>
        /// Data member for <see cref="ManifestResourceTable"/>.
        /// </summary>
        private CliMetadataManifestResourceTableReader manifestResourceTable;
        /// <summary>
        /// Data member for <see cref="NestedClassTable"/>.
        /// </summary>
        private CliMetadataNestedClassTableReader nestedClassTable;
        /// <summary>
        /// Data member for <see cref="GenericParameterTable"/>.
        /// </summary>
        private CliMetadataGenericParameterTableReader genericParameterTable;
        /// <summary>
        /// Data member for <see cref="MethodSpecificationTable"/>.
        /// </summary>
        private CliMetadataMethodSpecificationTableReader methodSpecificationTable;
        /// <summary>
        /// Data member for <see cref="GenericParamConstraintTable"/>.
        /// </summary>
        private CliMetadataGenericParamConstraintTableReader genericParamConstraintTable;
        /// <summary>
        /// Returns the <see cref="CliMetadataModuleTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataModuleTable ModuleTable
        {
            get
            {
                if (this.moduleTable == null)
                {
                    ICliMetadataTable moduleTable;
                    if (this.TryGetValue(CliMetadataTableKinds.Module, out moduleTable))
                        this.moduleTable = ((CliMetadataModuleTableReader)(moduleTable));
                }
                return this.moduleTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataTypeRefTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataTypeRefTable TypeRefTable
        {
            get
            {
                if (this.typeRefTable == null)
                {
                    ICliMetadataTable typeRefTable;
                    if (this.TryGetValue(CliMetadataTableKinds.TypeReference, out typeRefTable))
                        this.typeRefTable = ((CliMetadataTypeRefTableReader)(typeRefTable));
                }
                return this.typeRefTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataTypeDefinitionTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataTypeDefinitionTable TypeDefinitionTable
        {
            get
            {
                if (this.typeDefinitionTable == null)
                {
                    ICliMetadataTable typeDefinitionTable;
                    if (this.TryGetValue(CliMetadataTableKinds.TypeDefinition, out typeDefinitionTable))
                        this.typeDefinitionTable = ((CliMetadataTypeDefinitionTableReader)(typeDefinitionTable));
                }
                return this.typeDefinitionTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataFieldTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataFieldTable FieldTable
        {
            get
            {
                if (this.fieldTable == null)
                {
                    ICliMetadataTable fieldTable;
                    if (this.TryGetValue(CliMetadataTableKinds.Field, out fieldTable))
                        this.fieldTable = ((CliMetadataFieldTableReader)(fieldTable));
                }
                return this.fieldTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataMethodDefinitionTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataMethodDefinitionTable MethodDefinitionTable
        {
            get
            {
                if (this.methodDefinitionTable == null)
                {
                    ICliMetadataTable methodDefinitionTable;
                    if (this.TryGetValue(CliMetadataTableKinds.MethodDefinition, out methodDefinitionTable))
                        this.methodDefinitionTable = ((CliMetadataMethodDefinitionTableReader)(methodDefinitionTable));
                }
                return this.methodDefinitionTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataParameterTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataParameterTable ParameterTable
        {
            get
            {
                if (this.parameterTable == null)
                {
                    ICliMetadataTable parameterTable;
                    if (this.TryGetValue(CliMetadataTableKinds.Parameter, out parameterTable))
                        this.parameterTable = ((CliMetadataParameterTableReader)(parameterTable));
                }
                return this.parameterTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataInterfaceImplTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataInterfaceImplTable InterfaceImplTable
        {
            get
            {
                if (this.interfaceImplTable == null)
                {
                    ICliMetadataTable interfaceImplTable;
                    if (this.TryGetValue(CliMetadataTableKinds.InterfaceImpl, out interfaceImplTable))
                        this.interfaceImplTable = ((CliMetadataInterfaceImplTableReader)(interfaceImplTable));
                }
                return this.interfaceImplTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataMemberReferenceTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataMemberReferenceTable MemberReferenceTable
        {
            get
            {
                if (this.memberReferenceTable == null)
                {
                    ICliMetadataTable memberReferenceTable;
                    if (this.TryGetValue(CliMetadataTableKinds.MemberReference, out memberReferenceTable))
                        this.memberReferenceTable = ((CliMetadataMemberReferenceTableReader)(memberReferenceTable));
                }
                return this.memberReferenceTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataConstantTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataConstantTable ConstantTable
        {
            get
            {
                if (this.constantTable == null)
                {
                    ICliMetadataTable constantTable;
                    if (this.TryGetValue(CliMetadataTableKinds.Constant, out constantTable))
                        this.constantTable = ((CliMetadataConstantTableReader)(constantTable));
                }
                return this.constantTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataCustomAttributeTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataCustomAttributeTable CustomAttributeTable
        {
            get
            {
                if (this.customAttributeTable == null)
                {
                    ICliMetadataTable customAttributeTable;
                    if (this.TryGetValue(CliMetadataTableKinds.CustomAttribute, out customAttributeTable))
                        this.customAttributeTable = ((CliMetadataCustomAttributeTableReader)(customAttributeTable));
                }
                return this.customAttributeTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataFieldMarshalTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataFieldMarshalTable FieldMarshalTable
        {
            get
            {
                if (this.fieldMarshalTable == null)
                {
                    ICliMetadataTable fieldMarshalTable;
                    if (this.TryGetValue(CliMetadataTableKinds.FieldMarshal, out fieldMarshalTable))
                        this.fieldMarshalTable = ((CliMetadataFieldMarshalTableReader)(fieldMarshalTable));
                }
                return this.fieldMarshalTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataDeclSecurityTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataDeclSecurityTable DeclSecurityTable
        {
            get
            {
                if (this.declSecurityTable == null)
                {
                    ICliMetadataTable declSecurityTable;
                    if (this.TryGetValue(CliMetadataTableKinds.DeclSecurity, out declSecurityTable))
                        this.declSecurityTable = ((CliMetadataDeclSecurityTableReader)(declSecurityTable));
                }
                return this.declSecurityTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataClassLayoutTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataClassLayoutTable ClassLayoutTable
        {
            get
            {
                if (this.classLayoutTable == null)
                {
                    ICliMetadataTable classLayoutTable;
                    if (this.TryGetValue(CliMetadataTableKinds.ClassLayout, out classLayoutTable))
                        this.classLayoutTable = ((CliMetadataClassLayoutTableReader)(classLayoutTable));
                }
                return this.classLayoutTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataFieldLayoutTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataFieldLayoutTable FieldLayoutTable
        {
            get
            {
                if (this.fieldLayoutTable == null)
                {
                    ICliMetadataTable fieldLayoutTable;
                    if (this.TryGetValue(CliMetadataTableKinds.FieldLayout, out fieldLayoutTable))
                        this.fieldLayoutTable = ((CliMetadataFieldLayoutTableReader)(fieldLayoutTable));
                }
                return this.fieldLayoutTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataStandAloneSigTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataStandAloneSigTable StandAloneSigTable
        {
            get
            {
                if (this.standAloneSigTable == null)
                {
                    ICliMetadataTable standAloneSigTable;
                    if (this.TryGetValue(CliMetadataTableKinds.StandAloneSig, out standAloneSigTable))
                        this.standAloneSigTable = ((CliMetadataStandAloneSigTableReader)(standAloneSigTable));
                }
                return this.standAloneSigTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataEventMapTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataEventMapTable EventMapTable
        {
            get
            {
                if (this.eventMapTable == null)
                {
                    ICliMetadataTable eventMapTable;
                    if (this.TryGetValue(CliMetadataTableKinds.EventMap, out eventMapTable))
                        this.eventMapTable = ((CliMetadataEventMapTableReader)(eventMapTable));
                }
                return this.eventMapTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataEventTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataEventTable EventTable
        {
            get
            {
                if (this.eventTable == null)
                {
                    ICliMetadataTable eventTable;
                    if (this.TryGetValue(CliMetadataTableKinds.Event, out eventTable))
                        this.eventTable = ((CliMetadataEventTableReader)(eventTable));
                }
                return this.eventTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataPropertyMapTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataPropertyMapTable PropertyMapTable
        {
            get
            {
                if (this.propertyMapTable == null)
                {
                    ICliMetadataTable propertyMapTable;
                    if (this.TryGetValue(CliMetadataTableKinds.PropertyMap, out propertyMapTable))
                        this.propertyMapTable = ((CliMetadataPropertyMapTableReader)(propertyMapTable));
                }
                return this.propertyMapTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataPropertyTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataPropertyTable PropertyTable
        {
            get
            {
                if (this.propertyTable == null)
                {
                    ICliMetadataTable propertyTable;
                    if (this.TryGetValue(CliMetadataTableKinds.Property, out propertyTable))
                        this.propertyTable = ((CliMetadataPropertyTableReader)(propertyTable));
                }
                return this.propertyTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataMethodSemanticsTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataMethodSemanticsTable MethodSemanticsTable
        {
            get
            {
                if (this.methodSemanticsTable == null)
                {
                    ICliMetadataTable methodSemanticsTable;
                    if (this.TryGetValue(CliMetadataTableKinds.MethodSemantics, out methodSemanticsTable))
                        this.methodSemanticsTable = ((CliMetadataMethodSemanticsTableReader)(methodSemanticsTable));
                }
                return this.methodSemanticsTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataMethodImplTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataMethodImplTable MethodImplTable
        {
            get
            {
                if (this.methodImplTable == null)
                {
                    ICliMetadataTable methodImplTable;
                    if (this.TryGetValue(CliMetadataTableKinds.MethodImpl, out methodImplTable))
                        this.methodImplTable = ((CliMetadataMethodImplTableReader)(methodImplTable));
                }
                return this.methodImplTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataModuleReferenceTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataModuleReferenceTable ModuleReferenceTable
        {
            get
            {
                if (this.moduleReferenceTable == null)
                {
                    ICliMetadataTable moduleReferenceTable;
                    if (this.TryGetValue(CliMetadataTableKinds.ModuleReference, out moduleReferenceTable))
                        this.moduleReferenceTable = ((CliMetadataModuleReferenceTableReader)(moduleReferenceTable));
                }
                return this.moduleReferenceTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataTypeSpecificationTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataTypeSpecificationTable TypeSpecificationTable
        {
            get
            {
                if (this.typeSpecificationTable == null)
                {
                    ICliMetadataTable typeSpecificationTable;
                    if (this.TryGetValue(CliMetadataTableKinds.TypeSpecification, out typeSpecificationTable))
                        this.typeSpecificationTable = ((CliMetadataTypeSpecificationTableReader)(typeSpecificationTable));
                }
                return this.typeSpecificationTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataImportMapTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataImportMapTable ImportMapTable
        {
            get
            {
                if (this.importMapTable == null)
                {
                    ICliMetadataTable importMapTable;
                    if (this.TryGetValue(CliMetadataTableKinds.ImportMap, out importMapTable))
                        this.importMapTable = ((CliMetadataImportMapTableReader)(importMapTable));
                }
                return this.importMapTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataFieldRVATableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataFieldRVATable FieldRVATable
        {
            get
            {
                if (this.fieldRVATable == null)
                {
                    ICliMetadataTable fieldRVATable;
                    if (this.TryGetValue(CliMetadataTableKinds.FieldRelativeVirtualAddress, out fieldRVATable))
                        this.fieldRVATable = ((CliMetadataFieldRVATableReader)(fieldRVATable));
                }
                return this.fieldRVATable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataAssemblyTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataAssemblyTable AssemblyTable
        {
            get
            {
                if (this.assemblyTable == null)
                {
                    ICliMetadataTable assemblyTable;
                    if (this.TryGetValue(CliMetadataTableKinds.Assembly, out assemblyTable))
                        this.assemblyTable = ((CliMetadataAssemblyTableReader)(assemblyTable));
                }
                return this.assemblyTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataAssemblyProcessorTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataAssemblyProcessorTable AssemblyProcessorTable
        {
            get
            {
                if (this.assemblyProcessorTable == null)
                {
                    ICliMetadataTable assemblyProcessorTable;
                    if (this.TryGetValue(CliMetadataTableKinds.AssemblyProcessor, out assemblyProcessorTable))
                        this.assemblyProcessorTable = ((CliMetadataAssemblyProcessorTableReader)(assemblyProcessorTable));
                }
                return this.assemblyProcessorTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataAssemblyOSTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataAssemblyOSTable AssemblyOSTable
        {
            get
            {
                if (this.assemblyOSTable == null)
                {
                    ICliMetadataTable assemblyOSTable;
                    if (this.TryGetValue(CliMetadataTableKinds.AssemblyOS, out assemblyOSTable))
                        this.assemblyOSTable = ((CliMetadataAssemblyOSTableReader)(assemblyOSTable));
                }
                return this.assemblyOSTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataAssemblyRefTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataAssemblyRefTable AssemblyRefTable
        {
            get
            {
                if (this.assemblyRefTable == null)
                {
                    ICliMetadataTable assemblyRefTable;
                    if (this.TryGetValue(CliMetadataTableKinds.AssemblyReference, out assemblyRefTable))
                        this.assemblyRefTable = ((CliMetadataAssemblyRefTableReader)(assemblyRefTable));
                }
                return this.assemblyRefTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataAssemblyRefProcessorTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataAssemblyRefProcessorTable AssemblyRefProcessorTable
        {
            get
            {
                if (this.assemblyRefProcessorTable == null)
                {
                    ICliMetadataTable assemblyRefProcessorTable;
                    if (this.TryGetValue(CliMetadataTableKinds.AssemblyReferenceProcessor, out assemblyRefProcessorTable))
                        this.assemblyRefProcessorTable = ((CliMetadataAssemblyRefProcessorTableReader)(assemblyRefProcessorTable));
                }
                return this.assemblyRefProcessorTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataAssemblyRefOSTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataAssemblyRefOSTable AssemblyRefOSTable
        {
            get
            {
                if (this.assemblyRefOSTable == null)
                {
                    ICliMetadataTable assemblyRefOSTable;
                    if (this.TryGetValue(CliMetadataTableKinds.AssemblyReferenceOS, out assemblyRefOSTable))
                        this.assemblyRefOSTable = ((CliMetadataAssemblyRefOSTableReader)(assemblyRefOSTable));
                }
                return this.assemblyRefOSTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataFileTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataFileTable FileTable
        {
            get
            {
                if (this.fileTable == null)
                {
                    ICliMetadataTable fileTable;
                    if (this.TryGetValue(CliMetadataTableKinds.File, out fileTable))
                        this.fileTable = ((CliMetadataFileTableReader)(fileTable));
                }
                return this.fileTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataExportedTypeTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataExportedTypeTable ExportedTypeTable
        {
            get
            {
                if (this.exportedTypeTable == null)
                {
                    ICliMetadataTable exportedTypeTable;
                    if (this.TryGetValue(CliMetadataTableKinds.ExportedType, out exportedTypeTable))
                        this.exportedTypeTable = ((CliMetadataExportedTypeTableReader)(exportedTypeTable));
                }
                return this.exportedTypeTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataManifestResourceTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataManifestResourceTable ManifestResourceTable
        {
            get
            {
                if (this.manifestResourceTable == null)
                {
                    ICliMetadataTable manifestResourceTable;
                    if (this.TryGetValue(CliMetadataTableKinds.ManifestResource, out manifestResourceTable))
                        this.manifestResourceTable = ((CliMetadataManifestResourceTableReader)(manifestResourceTable));
                }
                return this.manifestResourceTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataNestedClassTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataNestedClassTable NestedClassTable
        {
            get
            {
                if (this.nestedClassTable == null)
                {
                    ICliMetadataTable nestedClassTable;
                    if (this.TryGetValue(CliMetadataTableKinds.NestedClass, out nestedClassTable))
                        this.nestedClassTable = ((CliMetadataNestedClassTableReader)(nestedClassTable));
                }
                return this.nestedClassTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataGenericParameterTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataGenericParameterTable GenericParameterTable
        {
            get
            {
                if (this.genericParameterTable == null)
                {
                    ICliMetadataTable genericParameterTable;
                    if (this.TryGetValue(CliMetadataTableKinds.GenericParameter, out genericParameterTable))
                        this.genericParameterTable = ((CliMetadataGenericParameterTableReader)(genericParameterTable));
                }
                return this.genericParameterTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataMethodSpecificationTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataMethodSpecificationTable MethodSpecificationTable
        {
            get
            {
                if (this.methodSpecificationTable == null)
                {
                    ICliMetadataTable methodSpecificationTable;
                    if (this.TryGetValue(CliMetadataTableKinds.MethodSpecification, out methodSpecificationTable))
                        this.methodSpecificationTable = ((CliMetadataMethodSpecificationTableReader)(methodSpecificationTable));
                }
                return this.methodSpecificationTable;
            }
        }
        /// <summary>
        /// Returns the <see cref="CliMetadataGenericParamConstraintTableReader"/> for the module.
        /// </summary>
        /// <remarks>
        /// May return null if the metadata is not present in the module.
        /// </remarks>
        public ICliMetadataGenericParamConstraintTable GenericParamConstraintTable
        {
            get
            {
                if (this.genericParamConstraintTable == null)
                {
                    ICliMetadataTable genericParamConstraintTable;
                    if (this.TryGetValue(CliMetadataTableKinds.GenericParamConstraint, out genericParamConstraintTable))
                        this.genericParamConstraintTable = ((CliMetadataGenericParamConstraintTableReader)(genericParamConstraintTable));
                }
                return this.genericParamConstraintTable;
            }
        }
        internal void Read(EndianAwareBinaryReader reader, ICliMetadataRoot metadataRoot)
        {
             /* ------------------------------------------------------------\
             |  Programs are best suited to this kind of code generation.   |
             |  Lots of interconnected relationships, and lots of room for  |
             |  human error.  Thus, why this generator was created.         |
             \------------------------------------------------------------ */
            // Reserved, always 0.
            this.reservedA = reader.ReadUInt32();
            // Shall be 2.0.
            this.schemataVersion.Read(reader);
            // Bit vector for heap sizes.
            this.heapSizes = ((CliMetadataHeapSizes)(reader.ReadByte()));
            // Reserved, always 1.
            this.reservedB = reader.ReadByte();
            CliMetadataReferenceIndexSize stringHeapSize;
            if ((this.heapSizes & CliMetadataHeapSizes.StringStream) == CliMetadataHeapSizes.StringStream)
                stringHeapSize = CliMetadataReferenceIndexSize.DWord;
            else
                stringHeapSize = CliMetadataReferenceIndexSize.Word;
            CliMetadataReferenceIndexSize blobHeapSize;
            if ((this.heapSizes & CliMetadataHeapSizes.BlobStream) == CliMetadataHeapSizes.BlobStream)
                blobHeapSize = CliMetadataReferenceIndexSize.DWord;
            else
                blobHeapSize = CliMetadataReferenceIndexSize.Word;
            CliMetadataReferenceIndexSize guidHeapSize;
            if ((this.heapSizes & CliMetadataHeapSizes.GuidStream) == CliMetadataHeapSizes.GuidStream)
                guidHeapSize = CliMetadataReferenceIndexSize.DWord;
            else
                guidHeapSize = CliMetadataReferenceIndexSize.Word;
            this.tablesPresent = ((CliMetadataTableKinds)(reader.ReadUInt64()));
            this.sortedTables = ((CliMetadataTableKinds)(reader.ReadUInt64()));
            if (((ulong)(this.tablesPresent & ~CliMetadataTableKinds.SupportedMask)) != 0)
                throw new BadImageFormatException("Unsupported metadata type.");
            // The following encodings reference Module: HasCustomAttribute, ResolutionScope
            CliMetadataReferenceIndexSize encHasCustomAttribute = CliMetadataReferenceIndexSize.Word;
            CliMetadataReferenceIndexSize encResolutionScope = CliMetadataReferenceIndexSize.Word;
            if ((this.tablesPresent & CliMetadataTableKinds.Module) == CliMetadataTableKinds.Module)
            {
                uint moduleCount = reader.ReadUInt32();
                 /* ------------------------------------------------------------------------------------\
                 |  It takes 5 bits to encode indices with the HasCustomAttribute tag, so if the count  |
                 |  for any target exceeds 2^11, use a DWord.                                           |
                 \------------------------------------------------------------------------------------ */
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && moduleCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                // ResolutionScope tags take 2 bits to encode, so if count exceeds 2^14, use a DWord.
                if (encResolutionScope == CliMetadataReferenceIndexSize.Word && moduleCount > 16383)
                    encResolutionScope = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.Module, new CliMetadataModuleTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), moduleCount));
            }
             /* -----------------------------------------------------------------------------------------------\
             |  The following encodings reference TypeRef: TypeDefOrRef, HasCustomAttribute, MemberRefParent,  |
             |  ResolutionScope                                                                                |
             \----------------------------------------------------------------------------------------------- */
            CliMetadataReferenceIndexSize encTypeDefOrRef = CliMetadataReferenceIndexSize.Word;
            CliMetadataReferenceIndexSize encMemberRefParent = CliMetadataReferenceIndexSize.Word;
            if ((this.tablesPresent & CliMetadataTableKinds.TypeReference) == CliMetadataTableKinds.TypeReference)
            {
                uint typeRefCount = reader.ReadUInt32();
                // TypeDefOrRef tags take 2 bits to encode, so if count exceeds 2^14, use a DWord.
                if (encTypeDefOrRef == CliMetadataReferenceIndexSize.Word && typeRefCount > 16383)
                    encTypeDefOrRef = CliMetadataReferenceIndexSize.DWord;
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && typeRefCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                // MemberRefParent tags take 3 bits to encode, so if count exceeds 2^13, use a DWord.
                if (encMemberRefParent == CliMetadataReferenceIndexSize.Word && typeRefCount > 8191)
                    encMemberRefParent = CliMetadataReferenceIndexSize.DWord;
                if (encResolutionScope == CliMetadataReferenceIndexSize.Word && typeRefCount > 16383)
                    encResolutionScope = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.TypeReference, new CliMetadataTypeRefTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), typeRefCount));
            }
            CliMetadataReferenceIndexSize typeDefinitionSize = CliMetadataReferenceIndexSize.Word;
             /* ------------------------------------------------------------------------------------------------------------\
             |  TypeDefinition is referenced by the following fields: InterfaceImpl.Class, ClassLayout.Parent,              |
             |  EventMap.Parent, PropertyMap.Parent, MethodImpl.Class, NestedClass.NestedClass, NestedClass.EnclosingClass  |
             |  The following encodings reference it as well:                                                               |
             |  TypeDefOrRef, HasCustomAttribute, HasDeclSecurity, MemberRefParent, TypeOrMethodDef                         |
             \------------------------------------------------------------------------------------------------------------ */
            CliMetadataReferenceIndexSize encHasDeclSecurity = CliMetadataReferenceIndexSize.Word;
            CliMetadataReferenceIndexSize encTypeOrMethodDef = CliMetadataReferenceIndexSize.Word;
            if ((this.tablesPresent & CliMetadataTableKinds.TypeDefinition) == CliMetadataTableKinds.TypeDefinition)
            {
                uint typeDefinitionCount = reader.ReadUInt32();
                if (typeDefinitionCount > ushort.MaxValue)
                    typeDefinitionSize = CliMetadataReferenceIndexSize.DWord;
                if (encTypeDefOrRef == CliMetadataReferenceIndexSize.Word && typeDefinitionCount > 16383)
                    encTypeDefOrRef = CliMetadataReferenceIndexSize.DWord;
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && typeDefinitionCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                // HasDeclSecurity tags take 2 bits to encode, so if count exceeds 2^14, use a DWord.
                if (encHasDeclSecurity == CliMetadataReferenceIndexSize.Word && typeDefinitionCount > 16383)
                    encHasDeclSecurity = CliMetadataReferenceIndexSize.DWord;
                if (encMemberRefParent == CliMetadataReferenceIndexSize.Word && typeDefinitionCount > 8191)
                    encMemberRefParent = CliMetadataReferenceIndexSize.DWord;
                // TypeOrMethodDef tags take 1 bit to encode, so if count exceeds 2^15, use a DWord.
                if (encTypeOrMethodDef == CliMetadataReferenceIndexSize.Word && typeDefinitionCount > 32767)
                    encTypeOrMethodDef = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.TypeDefinition, new CliMetadataTypeDefinitionTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), typeDefinitionCount));
            }
            CliMetadataReferenceIndexSize fieldSize = CliMetadataReferenceIndexSize.Word;
             /* --------------------------------------------------------------------------------------------\
             |  Field is referenced by the following fields: TypeDefinition.FieldStart, FieldLayout.Field,  |
             |  FieldRVA.Field The following encodings reference it as well:                                |
             |  HasConstant, HasCustomAttribute, HasFieldMarshal, MemberForwarded                           |
             \-------------------------------------------------------------------------------------------- */
            CliMetadataReferenceIndexSize encHasConstant = CliMetadataReferenceIndexSize.Word;
            CliMetadataReferenceIndexSize encHasFieldMarshal = CliMetadataReferenceIndexSize.Word;
            CliMetadataReferenceIndexSize encMemberForwarded = CliMetadataReferenceIndexSize.Word;
            if ((this.tablesPresent & CliMetadataTableKinds.Field) == CliMetadataTableKinds.Field)
            {
                uint fieldCount = reader.ReadUInt32();
                if (fieldCount > ushort.MaxValue)
                    fieldSize = CliMetadataReferenceIndexSize.DWord;
                // HasConstant tags take 2 bits to encode, so if count exceeds 2^14, use a DWord.
                if (encHasConstant == CliMetadataReferenceIndexSize.Word && fieldCount > 16383)
                    encHasConstant = CliMetadataReferenceIndexSize.DWord;
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && fieldCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                // HasFieldMarshal tags take 1 bit to encode, so if count exceeds 2^15, use a DWord.
                if (encHasFieldMarshal == CliMetadataReferenceIndexSize.Word && fieldCount > 32767)
                    encHasFieldMarshal = CliMetadataReferenceIndexSize.DWord;
                // MemberForwarded tags take 1 bit to encode, so if count exceeds 2^15, use a DWord.
                if (encMemberForwarded == CliMetadataReferenceIndexSize.Word && fieldCount > 32767)
                    encMemberForwarded = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.Field, new CliMetadataFieldTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), fieldCount));
            }
            CliMetadataReferenceIndexSize methodDefinitionSize = CliMetadataReferenceIndexSize.Word;
             /* ----------------------------------------------------------------------------------------\
             |  MethodDefinition is referenced by the following fields: TypeDefinition.MethodStart,     |
             |  MethodSemantics.Method The following encodings reference it as well:                    |
             |  HasCustomAttribute, HasDeclSecurity, MemberRefParent, MethodDefOrRef, MemberForwarded,  |
             |  CustomAttributeType, TypeOrMethodDef                                                    |
             \---------------------------------------------------------------------------------------- */
            CliMetadataReferenceIndexSize encMethodDefOrRef = CliMetadataReferenceIndexSize.Word;
            CliMetadataReferenceIndexSize encCustomAttributeType = CliMetadataReferenceIndexSize.Word;
            if ((this.tablesPresent & CliMetadataTableKinds.MethodDefinition) == CliMetadataTableKinds.MethodDefinition)
            {
                uint methodDefinitionCount = reader.ReadUInt32();
                if (methodDefinitionCount > ushort.MaxValue)
                    methodDefinitionSize = CliMetadataReferenceIndexSize.DWord;
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && methodDefinitionCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                if (encHasDeclSecurity == CliMetadataReferenceIndexSize.Word && methodDefinitionCount > 16383)
                    encHasDeclSecurity = CliMetadataReferenceIndexSize.DWord;
                if (encMemberRefParent == CliMetadataReferenceIndexSize.Word && methodDefinitionCount > 8191)
                    encMemberRefParent = CliMetadataReferenceIndexSize.DWord;
                // MethodDefOrRef tags take 1 bit to encode, so if count exceeds 2^15, use a DWord.
                if (encMethodDefOrRef == CliMetadataReferenceIndexSize.Word && methodDefinitionCount > 32767)
                    encMethodDefOrRef = CliMetadataReferenceIndexSize.DWord;
                if (encMemberForwarded == CliMetadataReferenceIndexSize.Word && methodDefinitionCount > 32767)
                    encMemberForwarded = CliMetadataReferenceIndexSize.DWord;
                // CustomAttributeType tags take 3 bits to encode, so if count exceeds 2^13, use a DWord.
                if (encCustomAttributeType == CliMetadataReferenceIndexSize.Word && methodDefinitionCount > 8191)
                    encCustomAttributeType = CliMetadataReferenceIndexSize.DWord;
                if (encTypeOrMethodDef == CliMetadataReferenceIndexSize.Word && methodDefinitionCount > 32767)
                    encTypeOrMethodDef = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.MethodDefinition, new CliMetadataMethodDefinitionTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), methodDefinitionCount));
            }
            CliMetadataReferenceIndexSize parameterSize = CliMetadataReferenceIndexSize.Word;
             /* --------------------------------------------------------------------------------------\
             |  Parameter is referenced by the following fields: MethodDefinition.ParameterStart The  |
             |  following encodings reference it as well:                                             |
             |  HasConstant, HasCustomAttribute, HasFieldMarshal                                      |
             \-------------------------------------------------------------------------------------- */
            if ((this.tablesPresent & CliMetadataTableKinds.Parameter) == CliMetadataTableKinds.Parameter)
            {
                uint parameterCount = reader.ReadUInt32();
                if (parameterCount > ushort.MaxValue)
                    parameterSize = CliMetadataReferenceIndexSize.DWord;
                if (encHasConstant == CliMetadataReferenceIndexSize.Word && parameterCount > 16383)
                    encHasConstant = CliMetadataReferenceIndexSize.DWord;
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && parameterCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                if (encHasFieldMarshal == CliMetadataReferenceIndexSize.Word && parameterCount > 32767)
                    encHasFieldMarshal = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.Parameter, new CliMetadataParameterTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), parameterCount));
            }
            // The following encodings reference InterfaceImpl: HasCustomAttribute
            if ((this.tablesPresent & CliMetadataTableKinds.InterfaceImpl) == CliMetadataTableKinds.InterfaceImpl)
            {
                uint interfaceImplCount = reader.ReadUInt32();
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && interfaceImplCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.InterfaceImpl, new CliMetadataInterfaceImplTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), interfaceImplCount));
            }
             /* ----------------------------------------------------------------------------------------\
             |  The following encodings reference MemberReference: HasCustomAttribute, MethodDefOrRef,  |
             |  CustomAttributeType                                                                     |
             \---------------------------------------------------------------------------------------- */
            if ((this.tablesPresent & CliMetadataTableKinds.MemberReference) == CliMetadataTableKinds.MemberReference)
            {
                uint memberReferenceCount = reader.ReadUInt32();
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && memberReferenceCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                if (encMethodDefOrRef == CliMetadataReferenceIndexSize.Word && memberReferenceCount > 32767)
                    encMethodDefOrRef = CliMetadataReferenceIndexSize.DWord;
                if (encCustomAttributeType == CliMetadataReferenceIndexSize.Word && memberReferenceCount > 8191)
                    encCustomAttributeType = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.MemberReference, new CliMetadataMemberReferenceTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), memberReferenceCount));
            }
            // Constant is not referenced by anything, so setup is much simpler.
            if ((this.tablesPresent & CliMetadataTableKinds.Constant) == CliMetadataTableKinds.Constant)
                this._Add(CliMetadataTableKinds.Constant, new CliMetadataConstantTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            // CustomAttribute is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.CustomAttribute) == CliMetadataTableKinds.CustomAttribute)
                this._Add(CliMetadataTableKinds.CustomAttribute, new CliMetadataCustomAttributeTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            // FieldMarshal is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.FieldMarshal) == CliMetadataTableKinds.FieldMarshal)
                this._Add(CliMetadataTableKinds.FieldMarshal, new CliMetadataFieldMarshalTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            // The following encodings reference DeclSecurity: HasCustomAttribute
            if ((this.tablesPresent & CliMetadataTableKinds.DeclSecurity) == CliMetadataTableKinds.DeclSecurity)
            {
                uint declSecurityCount = reader.ReadUInt32();
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && declSecurityCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.DeclSecurity, new CliMetadataDeclSecurityTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), declSecurityCount));
            }
            // ClassLayout is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.ClassLayout) == CliMetadataTableKinds.ClassLayout)
                this._Add(CliMetadataTableKinds.ClassLayout, new CliMetadataClassLayoutTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            // FieldLayout is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.FieldLayout) == CliMetadataTableKinds.FieldLayout)
                this._Add(CliMetadataTableKinds.FieldLayout, new CliMetadataFieldLayoutTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            // The following encodings reference StandAloneSig: HasCustomAttribute
            if ((this.tablesPresent & CliMetadataTableKinds.StandAloneSig) == CliMetadataTableKinds.StandAloneSig)
            {
                uint standAloneSigCount = reader.ReadUInt32();
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && standAloneSigCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.StandAloneSig, new CliMetadataStandAloneSigTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), standAloneSigCount));
            }
            // EventMap is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.EventMap) == CliMetadataTableKinds.EventMap)
                this._Add(CliMetadataTableKinds.EventMap, new CliMetadataEventMapTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            CliMetadataReferenceIndexSize eventSize = CliMetadataReferenceIndexSize.Word;
             /* -----------------------------------------------------------------------------------------\
             |  Event is referenced by the following fields: EventMap.EventList The following encodings  |
             |  reference it as well:                                                                    |
             |  HasCustomAttribute, HasSemantics                                                         |
             \----------------------------------------------------------------------------------------- */
            CliMetadataReferenceIndexSize encHasSemantics = CliMetadataReferenceIndexSize.Word;
            if ((this.tablesPresent & CliMetadataTableKinds.Event) == CliMetadataTableKinds.Event)
            {
                uint eventCount = reader.ReadUInt32();
                if (eventCount > ushort.MaxValue)
                    eventSize = CliMetadataReferenceIndexSize.DWord;
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && eventCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                // HasSemantics tags take 1 bit to encode, so if count exceeds 2^15, use a DWord.
                if (encHasSemantics == CliMetadataReferenceIndexSize.Word && eventCount > 32767)
                    encHasSemantics = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.Event, new CliMetadataEventTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), eventCount));
            }
            // PropertyMap is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.PropertyMap) == CliMetadataTableKinds.PropertyMap)
                this._Add(CliMetadataTableKinds.PropertyMap, new CliMetadataPropertyMapTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            CliMetadataReferenceIndexSize propertySize = CliMetadataReferenceIndexSize.Word;
             /* ----------------------------------------------------------------------------------------\
             |  Property is referenced by the following fields: PropertyMap.PropertyList The following  |
             |  encodings reference it as well:                                                         |
             |  HasConstant, HasCustomAttribute, HasSemantics                                           |
             \---------------------------------------------------------------------------------------- */
            if ((this.tablesPresent & CliMetadataTableKinds.Property) == CliMetadataTableKinds.Property)
            {
                uint propertyCount = reader.ReadUInt32();
                if (propertyCount > ushort.MaxValue)
                    propertySize = CliMetadataReferenceIndexSize.DWord;
                if (encHasConstant == CliMetadataReferenceIndexSize.Word && propertyCount > 16383)
                    encHasConstant = CliMetadataReferenceIndexSize.DWord;
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && propertyCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                if (encHasSemantics == CliMetadataReferenceIndexSize.Word && propertyCount > 32767)
                    encHasSemantics = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.Property, new CliMetadataPropertyTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), propertyCount));
            }
            // MethodSemantics is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.MethodSemantics) == CliMetadataTableKinds.MethodSemantics)
                this._Add(CliMetadataTableKinds.MethodSemantics, new CliMetadataMethodSemanticsTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            // MethodImpl is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.MethodImpl) == CliMetadataTableKinds.MethodImpl)
                this._Add(CliMetadataTableKinds.MethodImpl, new CliMetadataMethodImplTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            CliMetadataReferenceIndexSize moduleReferenceSize = CliMetadataReferenceIndexSize.Word;
             /* --------------------------------------------------------------------------------------------\
             |  ModuleReference is referenced by the following fields: ImportMap.ImportScope The following  |
             |  encodings reference it as well:                                                             |
             |  HasCustomAttribute, MemberRefParent, ResolutionScope                                        |
             \-------------------------------------------------------------------------------------------- */
            if ((this.tablesPresent & CliMetadataTableKinds.ModuleReference) == CliMetadataTableKinds.ModuleReference)
            {
                uint moduleReferenceCount = reader.ReadUInt32();
                if (moduleReferenceCount > ushort.MaxValue)
                    moduleReferenceSize = CliMetadataReferenceIndexSize.DWord;
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && moduleReferenceCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                if (encMemberRefParent == CliMetadataReferenceIndexSize.Word && moduleReferenceCount > 8191)
                    encMemberRefParent = CliMetadataReferenceIndexSize.DWord;
                if (encResolutionScope == CliMetadataReferenceIndexSize.Word && moduleReferenceCount > 16383)
                    encResolutionScope = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.ModuleReference, new CliMetadataModuleReferenceTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), moduleReferenceCount));
            }
             /* ----------------------------------------------------------------------------------------\
             |  The following encodings reference TypeSpecification: TypeDefOrRef, HasCustomAttribute,  |
             |  MemberRefParent                                                                         |
             \---------------------------------------------------------------------------------------- */
            if ((this.tablesPresent & CliMetadataTableKinds.TypeSpecification) == CliMetadataTableKinds.TypeSpecification)
            {
                uint typeSpecificationCount = reader.ReadUInt32();
                if (encTypeDefOrRef == CliMetadataReferenceIndexSize.Word && typeSpecificationCount > 16383)
                    encTypeDefOrRef = CliMetadataReferenceIndexSize.DWord;
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && typeSpecificationCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                if (encMemberRefParent == CliMetadataReferenceIndexSize.Word && typeSpecificationCount > 8191)
                    encMemberRefParent = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.TypeSpecification, new CliMetadataTypeSpecificationTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), typeSpecificationCount));
            }
            // ImportMap is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.ImportMap) == CliMetadataTableKinds.ImportMap)
                this._Add(CliMetadataTableKinds.ImportMap, new CliMetadataImportMapTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            // FieldRVA is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.FieldRelativeVirtualAddress) == CliMetadataTableKinds.FieldRelativeVirtualAddress)
                this._Add(CliMetadataTableKinds.FieldRelativeVirtualAddress, new CliMetadataFieldRVATableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            // The following encodings reference Assembly: HasCustomAttribute, HasDeclSecurity
            if ((this.tablesPresent & CliMetadataTableKinds.Assembly) == CliMetadataTableKinds.Assembly)
            {
                uint assemblyCount = reader.ReadUInt32();
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && assemblyCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                if (encHasDeclSecurity == CliMetadataReferenceIndexSize.Word && assemblyCount > 16383)
                    encHasDeclSecurity = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.Assembly, new CliMetadataAssemblyTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), assemblyCount));
            }
            // AssemblyProcessor is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.AssemblyProcessor) == CliMetadataTableKinds.AssemblyProcessor)
                this._Add(CliMetadataTableKinds.AssemblyProcessor, new CliMetadataAssemblyProcessorTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            // AssemblyOS is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.AssemblyOS) == CliMetadataTableKinds.AssemblyOS)
                this._Add(CliMetadataTableKinds.AssemblyOS, new CliMetadataAssemblyOSTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            CliMetadataReferenceIndexSize assemblyRefSize = CliMetadataReferenceIndexSize.Word;
             /* --------------------------------------------------------------------------------------\
             |  AssemblyRef is referenced by the following fields: AssemblyRefProcessor.AssemblyRef,  |
             |  AssemblyRefOS.AssemblyRef The following encodings reference it as well:               |
             |  HasCustomAttribute, Implementation, ResolutionScope                                   |
             \-------------------------------------------------------------------------------------- */
            CliMetadataReferenceIndexSize encImplementation = CliMetadataReferenceIndexSize.Word;
            if ((this.tablesPresent & CliMetadataTableKinds.AssemblyReference) == CliMetadataTableKinds.AssemblyReference)
            {
                uint assemblyRefCount = reader.ReadUInt32();
                if (assemblyRefCount > ushort.MaxValue)
                    assemblyRefSize = CliMetadataReferenceIndexSize.DWord;
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && assemblyRefCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                // Implementation tags take 2 bits to encode, so if count exceeds 2^14, use a DWord.
                if (encImplementation == CliMetadataReferenceIndexSize.Word && assemblyRefCount > 16383)
                    encImplementation = CliMetadataReferenceIndexSize.DWord;
                if (encResolutionScope == CliMetadataReferenceIndexSize.Word && assemblyRefCount > 16383)
                    encResolutionScope = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.AssemblyReference, new CliMetadataAssemblyRefTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), assemblyRefCount));
            }
            // AssemblyRefProcessor is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.AssemblyReferenceProcessor) == CliMetadataTableKinds.AssemblyReferenceProcessor)
                this._Add(CliMetadataTableKinds.AssemblyReferenceProcessor, new CliMetadataAssemblyRefProcessorTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            // AssemblyRefOS is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.AssemblyReferenceOS) == CliMetadataTableKinds.AssemblyReferenceOS)
                this._Add(CliMetadataTableKinds.AssemblyReferenceOS, new CliMetadataAssemblyRefOSTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            // The following encodings reference File: HasCustomAttribute, Implementation
            if ((this.tablesPresent & CliMetadataTableKinds.File) == CliMetadataTableKinds.File)
            {
                uint fileCount = reader.ReadUInt32();
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && fileCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                if (encImplementation == CliMetadataReferenceIndexSize.Word && fileCount > 16383)
                    encImplementation = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.File, new CliMetadataFileTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), fileCount));
            }
            // The following encodings reference ExportedType: HasCustomAttribute, Implementation
            if ((this.tablesPresent & CliMetadataTableKinds.ExportedType) == CliMetadataTableKinds.ExportedType)
            {
                uint exportedTypeCount = reader.ReadUInt32();
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && exportedTypeCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                if (encImplementation == CliMetadataReferenceIndexSize.Word && exportedTypeCount > 16383)
                    encImplementation = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.ExportedType, new CliMetadataExportedTypeTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), exportedTypeCount));
            }
            // The following encodings reference ManifestResource: HasCustomAttribute
            if ((this.tablesPresent & CliMetadataTableKinds.ManifestResource) == CliMetadataTableKinds.ManifestResource)
            {
                uint manifestResourceCount = reader.ReadUInt32();
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && manifestResourceCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.ManifestResource, new CliMetadataManifestResourceTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), manifestResourceCount));
            }
            // NestedClass is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.NestedClass) == CliMetadataTableKinds.NestedClass)
                this._Add(CliMetadataTableKinds.NestedClass, new CliMetadataNestedClassTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            CliMetadataReferenceIndexSize genericParameterSize = CliMetadataReferenceIndexSize.Word;
             /* --------------------------------------------------------------------------------------\
             |  GenericParameter is referenced by the following fields: GenericParamConstraint.Owner  |
             |  The following encodings reference it as well:                                         |
             |  HasCustomAttribute                                                                    |
             \-------------------------------------------------------------------------------------- */
            if ((this.tablesPresent & CliMetadataTableKinds.GenericParameter) == CliMetadataTableKinds.GenericParameter)
            {
                uint genericParameterCount = reader.ReadUInt32();
                if (genericParameterCount > ushort.MaxValue)
                    genericParameterSize = CliMetadataReferenceIndexSize.DWord;
                if (encHasCustomAttribute == CliMetadataReferenceIndexSize.Word && genericParameterCount > 2047)
                    encHasCustomAttribute = CliMetadataReferenceIndexSize.DWord;
                this._Add(CliMetadataTableKinds.GenericParameter, new CliMetadataGenericParameterTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), genericParameterCount));
            }
            // MethodSpecification is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.MethodSpecification) == CliMetadataTableKinds.MethodSpecification)
                this._Add(CliMetadataTableKinds.MethodSpecification, new CliMetadataMethodSpecificationTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            // GenericParamConstraint is not referenced by anything.
            if ((this.tablesPresent & CliMetadataTableKinds.GenericParamConstraint) == CliMetadataTableKinds.GenericParamConstraint)
                this._Add(CliMetadataTableKinds.GenericParamConstraint, new CliMetadataGenericParamConstraintTableReader(metadataRoot, metadataRoot.SourceImage.SecureReader(), reader.ReadUInt32()));
            long currentOffset = reader.BaseStream.Position;
            if ((this.tablesPresent & CliMetadataTableKinds.Module) == CliMetadataTableKinds.Module)
            {
                CliMetadataModuleTableReader currentModule = ((CliMetadataModuleTableReader)(this.ModuleTable));
                currentModule.Initialize(currentOffset, guidHeapSize, stringHeapSize);
                currentOffset += currentModule.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.TypeReference) == CliMetadataTableKinds.TypeReference)
            {
                CliMetadataTypeRefTableReader currentTypeRef = ((CliMetadataTypeRefTableReader)(this.TypeRefTable));
                currentTypeRef.Initialize(currentOffset, encResolutionScope, stringHeapSize);
                currentOffset += currentTypeRef.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.TypeDefinition) == CliMetadataTableKinds.TypeDefinition)
            {
                CliMetadataTypeDefinitionTableReader currentTypeDefinition = ((CliMetadataTypeDefinitionTableReader)(this.TypeDefinitionTable));
                currentTypeDefinition.Initialize(currentOffset, fieldSize, methodDefinitionSize, stringHeapSize, encTypeDefOrRef);
                currentOffset += currentTypeDefinition.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.Field) == CliMetadataTableKinds.Field)
            {
                CliMetadataFieldTableReader currentField = ((CliMetadataFieldTableReader)(this.FieldTable));
                currentField.Initialize(currentOffset, blobHeapSize, stringHeapSize);
                currentOffset += currentField.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.MethodDefinition) == CliMetadataTableKinds.MethodDefinition)
            {
                CliMetadataMethodDefinitionTableReader currentMethodDefinition = ((CliMetadataMethodDefinitionTableReader)(this.MethodDefinitionTable));
                currentMethodDefinition.Initialize(currentOffset, blobHeapSize, parameterSize, stringHeapSize);
                currentOffset += currentMethodDefinition.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.Parameter) == CliMetadataTableKinds.Parameter)
            {
                CliMetadataParameterTableReader currentParameter = ((CliMetadataParameterTableReader)(this.ParameterTable));
                currentParameter.Initialize(currentOffset, stringHeapSize);
                currentOffset += currentParameter.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.InterfaceImpl) == CliMetadataTableKinds.InterfaceImpl)
            {
                CliMetadataInterfaceImplTableReader currentInterfaceImpl = ((CliMetadataInterfaceImplTableReader)(this.InterfaceImplTable));
                currentInterfaceImpl.Initialize(currentOffset, typeDefinitionSize, encTypeDefOrRef);
                currentOffset += currentInterfaceImpl.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.MemberReference) == CliMetadataTableKinds.MemberReference)
            {
                CliMetadataMemberReferenceTableReader currentMemberReference = ((CliMetadataMemberReferenceTableReader)(this.MemberReferenceTable));
                currentMemberReference.Initialize(currentOffset, blobHeapSize, encMemberRefParent, stringHeapSize);
                currentOffset += currentMemberReference.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.Constant) == CliMetadataTableKinds.Constant)
            {
                CliMetadataConstantTableReader currentConstant = ((CliMetadataConstantTableReader)(this.ConstantTable));
                currentConstant.Initialize(currentOffset, blobHeapSize, encHasConstant);
                currentOffset += currentConstant.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.CustomAttribute) == CliMetadataTableKinds.CustomAttribute)
            {
                CliMetadataCustomAttributeTableReader currentCustomAttribute = ((CliMetadataCustomAttributeTableReader)(this.CustomAttributeTable));
                currentCustomAttribute.Initialize(currentOffset, blobHeapSize, encCustomAttributeType, encHasCustomAttribute);
                currentOffset += currentCustomAttribute.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.FieldMarshal) == CliMetadataTableKinds.FieldMarshal)
            {
                CliMetadataFieldMarshalTableReader currentFieldMarshal = ((CliMetadataFieldMarshalTableReader)(this.FieldMarshalTable));
                currentFieldMarshal.Initialize(currentOffset, blobHeapSize, encHasFieldMarshal);
                currentOffset += currentFieldMarshal.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.DeclSecurity) == CliMetadataTableKinds.DeclSecurity)
            {
                CliMetadataDeclSecurityTableReader currentDeclSecurity = ((CliMetadataDeclSecurityTableReader)(this.DeclSecurityTable));
                currentDeclSecurity.Initialize(currentOffset, blobHeapSize, encHasDeclSecurity);
                currentOffset += currentDeclSecurity.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.ClassLayout) == CliMetadataTableKinds.ClassLayout)
            {
                CliMetadataClassLayoutTableReader currentClassLayout = ((CliMetadataClassLayoutTableReader)(this.ClassLayoutTable));
                currentClassLayout.Initialize(currentOffset, typeDefinitionSize);
                currentOffset += currentClassLayout.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.FieldLayout) == CliMetadataTableKinds.FieldLayout)
            {
                CliMetadataFieldLayoutTableReader currentFieldLayout = ((CliMetadataFieldLayoutTableReader)(this.FieldLayoutTable));
                currentFieldLayout.Initialize(currentOffset, fieldSize);
                currentOffset += currentFieldLayout.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.StandAloneSig) == CliMetadataTableKinds.StandAloneSig)
            {
                CliMetadataStandAloneSigTableReader currentStandAloneSig = ((CliMetadataStandAloneSigTableReader)(this.StandAloneSigTable));
                currentStandAloneSig.Initialize(currentOffset, blobHeapSize);
                currentOffset += currentStandAloneSig.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.EventMap) == CliMetadataTableKinds.EventMap)
            {
                CliMetadataEventMapTableReader currentEventMap = ((CliMetadataEventMapTableReader)(this.EventMapTable));
                currentEventMap.Initialize(currentOffset, eventSize, typeDefinitionSize);
                currentOffset += currentEventMap.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.Event) == CliMetadataTableKinds.Event)
            {
                CliMetadataEventTableReader currentEvent = ((CliMetadataEventTableReader)(this.EventTable));
                currentEvent.Initialize(currentOffset, stringHeapSize, encTypeDefOrRef);
                currentOffset += currentEvent.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.PropertyMap) == CliMetadataTableKinds.PropertyMap)
            {
                CliMetadataPropertyMapTableReader currentPropertyMap = ((CliMetadataPropertyMapTableReader)(this.PropertyMapTable));
                currentPropertyMap.Initialize(currentOffset, propertySize, typeDefinitionSize);
                currentOffset += currentPropertyMap.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.Property) == CliMetadataTableKinds.Property)
            {
                CliMetadataPropertyTableReader currentProperty = ((CliMetadataPropertyTableReader)(this.PropertyTable));
                currentProperty.Initialize(currentOffset, blobHeapSize, stringHeapSize);
                currentOffset += currentProperty.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.MethodSemantics) == CliMetadataTableKinds.MethodSemantics)
            {
                CliMetadataMethodSemanticsTableReader currentMethodSemantics = ((CliMetadataMethodSemanticsTableReader)(this.MethodSemanticsTable));
                currentMethodSemantics.Initialize(currentOffset, encHasSemantics, methodDefinitionSize);
                currentOffset += currentMethodSemantics.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.MethodImpl) == CliMetadataTableKinds.MethodImpl)
            {
                CliMetadataMethodImplTableReader currentMethodImpl = ((CliMetadataMethodImplTableReader)(this.MethodImplTable));
                currentMethodImpl.Initialize(currentOffset, encMethodDefOrRef, typeDefinitionSize);
                currentOffset += currentMethodImpl.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.ModuleReference) == CliMetadataTableKinds.ModuleReference)
            {
                CliMetadataModuleReferenceTableReader currentModuleReference = ((CliMetadataModuleReferenceTableReader)(this.ModuleReferenceTable));
                currentModuleReference.Initialize(currentOffset, stringHeapSize);
                currentOffset += currentModuleReference.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.TypeSpecification) == CliMetadataTableKinds.TypeSpecification)
            {
                CliMetadataTypeSpecificationTableReader currentTypeSpecification = ((CliMetadataTypeSpecificationTableReader)(this.TypeSpecificationTable));
                currentTypeSpecification.Initialize(currentOffset, blobHeapSize);
                currentOffset += currentTypeSpecification.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.ImportMap) == CliMetadataTableKinds.ImportMap)
            {
                CliMetadataImportMapTableReader currentImportMap = ((CliMetadataImportMapTableReader)(this.ImportMapTable));
                currentImportMap.Initialize(currentOffset, encMemberForwarded, moduleReferenceSize, stringHeapSize);
                currentOffset += currentImportMap.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.FieldRelativeVirtualAddress) == CliMetadataTableKinds.FieldRelativeVirtualAddress)
            {
                CliMetadataFieldRVATableReader currentFieldRVA = ((CliMetadataFieldRVATableReader)(this.FieldRVATable));
                currentFieldRVA.Initialize(currentOffset, fieldSize);
                currentOffset += currentFieldRVA.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.Assembly) == CliMetadataTableKinds.Assembly)
            {
                CliMetadataAssemblyTableReader currentAssembly = ((CliMetadataAssemblyTableReader)(this.AssemblyTable));
                currentAssembly.Initialize(currentOffset, blobHeapSize, stringHeapSize);
                currentOffset += currentAssembly.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.AssemblyProcessor) == CliMetadataTableKinds.AssemblyProcessor)
            {
                CliMetadataAssemblyProcessorTableReader currentAssemblyProcessor = ((CliMetadataAssemblyProcessorTableReader)(this.AssemblyProcessorTable));
                currentAssemblyProcessor.Initialize(currentOffset);
                currentOffset += currentAssemblyProcessor.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.AssemblyOS) == CliMetadataTableKinds.AssemblyOS)
            {
                CliMetadataAssemblyOSTableReader currentAssemblyOS = ((CliMetadataAssemblyOSTableReader)(this.AssemblyOSTable));
                currentAssemblyOS.Initialize(currentOffset);
                currentOffset += currentAssemblyOS.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.AssemblyReference) == CliMetadataTableKinds.AssemblyReference)
            {
                CliMetadataAssemblyRefTableReader currentAssemblyRef = ((CliMetadataAssemblyRefTableReader)(this.AssemblyRefTable));
                currentAssemblyRef.Initialize(currentOffset, blobHeapSize, stringHeapSize);
                currentOffset += currentAssemblyRef.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.AssemblyReferenceProcessor) == CliMetadataTableKinds.AssemblyReferenceProcessor)
            {
                CliMetadataAssemblyRefProcessorTableReader currentAssemblyRefProcessor = ((CliMetadataAssemblyRefProcessorTableReader)(this.AssemblyRefProcessorTable));
                currentAssemblyRefProcessor.Initialize(currentOffset, assemblyRefSize);
                currentOffset += currentAssemblyRefProcessor.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.AssemblyReferenceOS) == CliMetadataTableKinds.AssemblyReferenceOS)
            {
                CliMetadataAssemblyRefOSTableReader currentAssemblyRefOS = ((CliMetadataAssemblyRefOSTableReader)(this.AssemblyRefOSTable));
                currentAssemblyRefOS.Initialize(currentOffset, assemblyRefSize);
                currentOffset += currentAssemblyRefOS.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.File) == CliMetadataTableKinds.File)
            {
                CliMetadataFileTableReader currentFile = ((CliMetadataFileTableReader)(this.FileTable));
                currentFile.Initialize(currentOffset, blobHeapSize, stringHeapSize);
                currentOffset += currentFile.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.ExportedType) == CliMetadataTableKinds.ExportedType)
            {
                CliMetadataExportedTypeTableReader currentExportedType = ((CliMetadataExportedTypeTableReader)(this.ExportedTypeTable));
                currentExportedType.Initialize(currentOffset, encImplementation, stringHeapSize);
                currentOffset += currentExportedType.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.ManifestResource) == CliMetadataTableKinds.ManifestResource)
            {
                CliMetadataManifestResourceTableReader currentManifestResource = ((CliMetadataManifestResourceTableReader)(this.ManifestResourceTable));
                currentManifestResource.Initialize(currentOffset, encImplementation, stringHeapSize);
                currentOffset += currentManifestResource.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.NestedClass) == CliMetadataTableKinds.NestedClass)
            {
                CliMetadataNestedClassTableReader currentNestedClass = ((CliMetadataNestedClassTableReader)(this.NestedClassTable));
                currentNestedClass.Initialize(currentOffset, typeDefinitionSize);
                currentOffset += currentNestedClass.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.GenericParameter) == CliMetadataTableKinds.GenericParameter)
            {
                CliMetadataGenericParameterTableReader currentGenericParameter = ((CliMetadataGenericParameterTableReader)(this.GenericParameterTable));
                currentGenericParameter.Initialize(currentOffset, stringHeapSize, encTypeOrMethodDef);
                currentOffset += currentGenericParameter.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.MethodSpecification) == CliMetadataTableKinds.MethodSpecification)
            {
                CliMetadataMethodSpecificationTableReader currentMethodSpecification = ((CliMetadataMethodSpecificationTableReader)(this.MethodSpecificationTable));
                currentMethodSpecification.Initialize(currentOffset, blobHeapSize, encMethodDefOrRef);
                currentOffset += currentMethodSpecification.Length;
            }
            if ((this.tablesPresent & CliMetadataTableKinds.GenericParamConstraint) == CliMetadataTableKinds.GenericParamConstraint)
            {
                CliMetadataGenericParamConstraintTableReader currentGenericParamConstraint = ((CliMetadataGenericParamConstraintTableReader)(this.GenericParamConstraintTable));
                currentGenericParamConstraint.Initialize(currentOffset, genericParameterSize, encTypeDefOrRef);
                currentOffset += currentGenericParamConstraint.Length;
            }
        }
        internal CliMetadataTableStreamAndHeader(CliMetadataStreamHeader originalHeader)
        {
            Tuple<uint, uint, string> data = originalHeader.GetData();
            this.Offset = data.Item1;
            this.Size = data.Item2;
            this.Name = data.Item3;
        }
    };
};
