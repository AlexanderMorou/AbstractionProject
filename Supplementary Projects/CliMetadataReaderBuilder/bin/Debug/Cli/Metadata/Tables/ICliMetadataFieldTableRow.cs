 /* ----------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.  |
 |  Version: 0.5.0.0                                          |
 |------------------------------------------------------------|
 |  To ensure the code works properly,                        |
 |  please do not make any changes to the file.               |
 |------------------------------------------------------------|
 |  The specific language is C♯                               |
 |  Sub-tool Name: C♯ Code Translator                         |
 |  Sub-tool Version: 1.0.0.0                                 |
 \---------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Blobs;
using AllenCopeland.Abstraction.Utilities.Collections;
using System;
using System.Reflection;
namespace AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables
{
    /// <summary>
    /// Defines properties and methods for a locked row in a table which defines information
    /// about the image's fields.
    /// </summary>
    public interface ICliMetadataFieldTableRow :
        ICliMetadataTableRow, 
        ICliMetadataHasConstantRow, 
        ICliMetadataHasCustomAttributeRow, 
        ICliMetadataHasFieldMarshalRow, 
        ICliMetadataMemberForwardedRow, 
        ICliMetadataIndexedRow
    {
        /// <summary>
        /// Returns conditional information about the field and its accessibility.
        /// </summary>
        FieldAttributes FieldAttributes { get; }
        /// <summary>
        /// Returns the type of the field, in signature form.
        /// </summary>
        ICliMetadataFieldSignature FieldType { get; }
        /// <summary>
        /// Returns the index onto the <see cref="CliMetadataRoot.BlobHeap"/> from which <see cref="FieldType"/>
        /// is derived.
        /// </summary>
        uint FieldTypeIndex { get; }
        /// <summary>
        /// Returns the layout of the field which determines the byte offset of the field relative
        /// to the structure which contains it.
        /// </summary>
        /// <remarks>
        /// Can be null.
        /// </remarks>
        ICliMetadataFieldLayoutTableRow Layout { get; }
        /// <summary>
        /// Returns the relative virtual address for the field.
        /// </summary>
        /// <remarks>
        /// Usually null except for initialized and uninitialized '.data' fields which store sequential
        /// bytes of data within the application's memory space.  The data-types of such fields
        /// must have no private fields of their own and contain no reference type fields as they
        /// point into the GC Heap.
        /// </remarks>
        ICliMetadataFieldRVATableRow RVA { get; }
        ICliMetadataRoot MetadataRoot { get; }
        string Name { get; }
        uint NameIndex { get; }
        IControlledCollection<ICliMetadataCustomAttributeTableRow> CustomAttributes { get; }
    };
};
