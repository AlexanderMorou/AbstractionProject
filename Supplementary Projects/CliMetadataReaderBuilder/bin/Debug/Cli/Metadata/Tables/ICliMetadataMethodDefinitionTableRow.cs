 /* ----------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.  |
 |  Version: 0.5.0.0                                          |
 |------------------------------------------------------------|
 |  To ensure the code works properly,                        |
 |  please do not make any changes to the file.               |
 |------------------------------------------------------------|
 |  The specific language is C♯                               |
 |  Sub-tool Name: C♯ Code Translator                         |
 |  Sub-tool Version: 1.0.0.0                                 |
 \---------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Cli.Metadata.Blobs;
using AllenCopeland.Abstraction.Utilities.Collections;
using System;
namespace AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables
{
    /// <summary>
    /// Defines properties and methods for a locked row in a table which defines information
    /// about the image's methods.
    /// </summary>
    public interface ICliMetadataMethodDefinitionTableRow :
        ICliMetadataTableRow, 
        ICliMetadataHasCustomAttributeRow, 
        ICliMetadataHasDeclSecurityRow, 
        ICliMetadataMemberRefParentRow, 
        ICliMetadataMethodDefOrRefRow, 
        ICliMetadataMemberForwardedRow, 
        ICliMetadataCustomAttributeTypeRow, 
        ICliMetadataTypeOrMethodDefRow, 
        ICliMetadataIndexedRow
    {
        /// <summary>
        /// Returns the relative virtual address of the method's body.
        /// </summary>
        uint RVA { get; }
        /// <summary>
        /// Returns the conditional information about the method's implementation.
        /// </summary>
        MethodImplementationDetails ImplementationDetails { get; }
        /// <summary>
        /// Returns conditional information about the method, its accessibility, and vtable information.
        /// </summary>
        MethodUseDetails UsageDetails { get; }
        /// <summary>
        /// Returns the signature of the method, that is: it's return type, parameter types, and
        /// potential generic calling convention.
        /// </summary>
        ICliMetadataMethodSignature Signature { get; }
        /// <summary>
        /// Returns the <see cref="UInt32"/> value which determines the index of the first <see cref="AllenCopeland.Abstraction.Slf.Cli.Metadata.Tables.ICliMetadataParameterTableRow"/>
        /// within <see cref="Parameters"/>
        /// </summary>
        uint ParameterStartIndex { get; }
        /// <summary>
        /// Returns returns the parameters for the current method.
        /// </summary>
        IControlledCollection<ICliMetadataParameterTableRow> Parameters { get; }
        ICliMetadataMethodBody Body { get; }
        ICliMetadataRoot MetadataRoot { get; }
        IControlledCollection<ICliMetadataCustomAttributeTableRow> CustomAttributes { get; }
        string Name { get; }
        uint NameIndex { get; }
    };
};
