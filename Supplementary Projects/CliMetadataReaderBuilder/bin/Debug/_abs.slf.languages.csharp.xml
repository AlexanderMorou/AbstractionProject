<?xml version="1.0"?>
<doc>
    <assembly>
        <name>_abs.slf.languages.csharp</name>
    </assembly>
    <members>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpAssembly">
            <summary>
            Provides a base implementation for an assembly
            defined within the C&#9839; language.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpAssembly">
            <summary>
            Defines properties and methods for working with a C&#9839; Assembly.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpAssembly.IdentityManager">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Cli.IIntermediateCliManager"/> used to 
            handle identities.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpAssembly.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpAssembly)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpAssembly"/> which is linked to another
            <paramref name="root"/> <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpAssembly"/>.
            </summary>
            <param name="root">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpAssembly"/>
            from which the current is a part of.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpAssembly.GetNewPart">
            <summary>
            Returns a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpAssembly"/> for the 
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages">
            <summary>
            Provides a series of methods and properties which relate to the
            errors and warnings of the C&#9839; language.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0028(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateClassMethodMember)">
            <summary><para>Creates a C♯ compiler warning, relative to the abstract model, (level 4) #28:</para><para>{0} has the wrong signature to be an entry point </para></summary>
            <param name="method">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateClassMethodMember"/></param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0028(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateStructMethodMember)">
            <summary><para>Creates a C&#9839; compiler warning, relative to the abstract model, (level 4) &#35;28:</para><para>{0} has the wrong signature to be an entry point </para></summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0067(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateClassEventMember)">
            <summary><para>Creates a C♯ compiler warning, relative to the abstract model, (level 3) #67:</para><para>The event {0} is never used</para></summary>
            <param name="event">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateClassEventMember"/> which is never used.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0067(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateStructEventMember)">
            <summary><para>Creates a C♯ compiler warning, relative to the abstract model, (level 3) #67:</para><para>The event {0} is never used</para></summary>
            <param name="event">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateStructEventMember"/> which is never used.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0078(AllenCopeland.Abstraction.Slf.Ast.Expressions.IPrimitiveExpression{System.UInt64})">
            <summary><para>Creates a C♯ compiler warning, relative to the abstract model, (level 4) #78:</para><para>The 'l' suffix is easily confused with the digit '1' -- use 'L' for clarity</para></summary>
            <param name="expression">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IPrimitiveExpression`1"/> of type <see cref="T:System.UInt64"/>
            which contains the potentially confusing suffix.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0105(AllenCopeland.Abstraction.Slf.Ast.INamespaceInclusionScopeCoercion)">
            <summary><para>Creates a C♯ compiler warning, relative to the abstract model, (level 3) #105:</para><para>The using directive for '<paramref name="coercion"/>' appeared previously in this namespace</para></summary>
            <param name="coercion">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.INamespaceInclusionScopeCoercion"/> which appeared previously in the 
            active scope.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0105(AllenCopeland.Abstraction.Slf.Ast.INamespaceInclusionRenameScopeCoercion)">
            <summary><para>Creates a C♯ compiler warning, relative to the abstract model, (level 3) #105:</para><para>The using directive for '<paramref name="coercion"/>' appeared previously in this namespace</para></summary>
            <param name="coercion">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.INamespaceInclusionRenameScopeCoercion"/> which appeared previously in the 
            active scope.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0105(AllenCopeland.Abstraction.Slf.Ast.ITypeInclusionScopeCoercion)">
            <summary><para>Creates a C♯ compiler warning, relative to the abstract model, (level 3) #105:</para><para>The using directive for <paramref name="coercion"/> appeared previously in this namespace</para></summary>
            <param name="coercion">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.ITypeInclusionScopeCoercion"/> which appeared previously in the 
            active scope.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0105(AllenCopeland.Abstraction.Slf.Ast.ITypeInclusionRenameScopeCoercion)">
            <summary><para>Creates a C♯ compiler warning, relative to the abstract model, (level 3) #105:</para><para>The using directive for '<paramref name="coercion"/>' appeared previously in this namespace</para></summary>
            <param name="coercion">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.ITypeInclusionRenameScopeCoercion"/> which appeared previously in the 
            active scope.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0108``2(``0,``1)">
            <summary><para>Creates a C&#9839; compiler warning, relative to the abstract model, (level 2) &#35;108:</para><para>{0} hides inherited member {1}. Use the new keyword if hiding was intended.</para></summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0109``1(``0)">
            <summary><para>Creates a C♯ compiler warning, relative to the abstract model, (level 4) #109:</para><para>The member '<paramref name="member"/>' does not hide an inherited member. The new keyword is not required</para></summary>
            <param name="member">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateMember"/> that is also a <see cref="T:AllenCopeland.Abstraction.Slf.Abstract.ISourceElement"/>
            which does not hide an inherited member, but the definition of the member indicates it does.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0114``2(``0,``1)">
            <summary><para>Creates a C♯ compiler warning, relative to the abstract model, (level 2) #114:</para><para>'<paramref name="member"/>' hides inherited member '<paramref name="original"/>'. To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.</para></summary>
            <param name="member">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateMember"/> which is also a <see cref="T:AllenCopeland.Abstraction.Slf.Abstract.ISourceElement"/> that hides the 
            <paramref name="original"/> definition without overriding it.</param>
            <param name="original">The <see cref="T:AllenCopeland.Abstraction.Slf.Abstract.Members.IMember"/> which is eclipsed by <paramref name="member"/>
            but not overridden by it.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0162(AllenCopeland.Abstraction.Slf.Ast.Statements.IStatement)">
            <summary><para>Creates a C♯ compiler warning, relative to the abstract model, (level 2) #162:</para><para>Unreachable code detected</para></summary>
            <param name="unreachableStatement">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Statements.IStatement"/> which is unreachable within the method body.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0162(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary><para>Creates a C♯ compiler warning, relative to the abstract model, (level 2) #162:</para><para>Unreachable code detected</para></summary>
            <param name="unreachableExpression">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> which is unreachable based off of the
            short-circuiting of the expression.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0164(AllenCopeland.Abstraction.Slf.Ast.Statements.ILabelStatement)">
            <summary><para>Creates a C♯ compiler warning, relative to the abstract model, (level 2) #164:</para><para>This label has not been referenced</para></summary>
            <param name="unreferencedLabel">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Statements.ILabelStatement"/> which was not referenced 
            within the defining method body.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0168(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary><para>Creates a C♯ compiler warning, relative to the 
            abstract model, (level 3) #168:</para><para>The variable
            '<paramref name="assignedButUnusedLocalVariable"/>' is assigned but
            its value is never used</para></summary>
            <param name="assignedButUnusedLocalVariable">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> which is assigned
            a value, but unused within the scope of the method.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0169(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateClassFieldMember)">
            <summary><para>Creates a C♯ compiler warning, relative to the 
            abstract model, (level 3) #169:</para>
            <para>The private field '<paramref name="unusedPrivateField"/>' is never used</para></summary>
            <param name="unusedPrivateField">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateClassFieldMember"/> which is
            defined, but never used.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0169(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateStructFieldMember)">
            <summary><para>Creates a C♯ compiler warning, relative to the 
            abstract model, (level 3) #169:</para>
            <para>The private field '<paramref name="unusedPrivateField"/>' is never used</para></summary>
            <param name="unusedPrivateField">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateStructFieldMember"/> which is
            defined, but never used.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0183(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression)">
            <summary><para>Creates a C♯ compiler warning, relative to the 
            abstract model, (level 1) #183:</para><para>The given expression is always of the provided (<see cref="P:AllenCopeland.Abstraction.Slf.Ast.Expressions.IBinaryOperationExpression`2.RightSide"/>) type.</para></summary>
            <param name="relationalConstant">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression"/>
            which always yields true, because the <see cref="P:AllenCopeland.Abstraction.Slf.Ast.Expressions.IBinaryOperationExpression`2.LeftSide"/>
            is always the type provided within <see cref="P:AllenCopeland.Abstraction.Slf.Ast.Expressions.IBinaryOperationExpression`2.RightSide"/>.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0184(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression)">
            <summary><para>Creates a C&#9839; compiler warning, relative to the 
            abstract model, (level 1) &#35;184:</para><para>The given expression is never of the provided ({0}) type</para></summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0197(AllenCopeland.Abstraction.Slf.Ast.Expressions.IDirectionExpression)">
            <summary><para>Creates a C&#9839; compiler warning, relative to the 
            abstract model, (level 1) &#35;197:</para><para>Passing {0} as ref or out or taking its address may cause a runtime exception because it is a field of a marshal-by-reference class</para></summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0219(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary><para>Creates a C&#9839; compiler warning, relative to the 
            abstract model, (level 3) &#35;219:</para><para>The variable {0} is assigned but its value is never used</para></summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0251(AllenCopeland.Abstraction.Slf.Ast.Expressions.IIndexerReferenceExpression)">
            <summary><para>Creates a C&#9839; compiler warning, relative to the 
            abstract model, (level 2) &#35;251:</para><para>Indexing an array with a negative index (array indices always start at zero)</para></summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0251(AllenCopeland.Abstraction.Slf.Ast.Expressions.IIndexerReferenceExpression{AllenCopeland.Abstraction.Slf.Abstract.Members.IClassIndexerMember,AllenCopeland.Abstraction.Slf.Abstract.IClassType})">
            <summary><para>Creates a C&#9839; compiler warning, relative to the 
            abstract model, (level 2) &#35;251:</para><para>Indexing an array with a negative index (array indices always start at zero)</para></summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0251(AllenCopeland.Abstraction.Slf.Ast.Expressions.IIndexerReferenceExpression{AllenCopeland.Abstraction.Slf.Abstract.Members.IStructIndexerMember,AllenCopeland.Abstraction.Slf.Abstract.IStructType})">
            <summary><para>Creates a C&#9839; compiler warning, relative to the 
            abstract model, (level 2) &#35;251:</para><para>Indexing an array with a negative index (array indices always start at zero)</para></summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0251(AllenCopeland.Abstraction.Slf.Ast.Expressions.IIndexerSignatureReferenceExpression{AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfaceIndexerMember,AllenCopeland.Abstraction.Slf.Abstract.IInterfaceType})">
            <summary><para>Creates a C&#9839; compiler warning, relative to the 
            abstract model, (level 2) &#35;251:</para><para>Indexing an array with a negative index (array indices always start at zero)</para></summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0252(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpInequalityExpression)">
            <summary><para>Creates a C&#9839; compiler warning, relative to the 
            abstract model, (level 2) &#35;252:</para><para>Possible unintended reference
            comparison; to get a value comparison, cast the left hand side to type {0}</para></summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0253(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpInequalityExpression)">
            <summary><para>Creates a C&#9839; compiler warning, relative to the 
            abstract model, (level 2) &#35;253:
            </para><para>Possible unintended reference comparison; to get
            a value comparison, cast the right hand side to type {0}</para></summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0278(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Abstract.IType,System.String,AllenCopeland.Abstraction.Slf.Abstract.Members.IMethodSignatureMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IMethodSignatureMember)">
            <summary><para>Creates a C&#9839; compiler warning, relative to the 
            abstract model, (level 2) &#35;278:</para><para><paramref name="offendingType"/> does not implement the <paramref name="patternName"/>. <paramref name="patternMethod1"/> is ambiguous with <paramref name="patternMethod2"/>.</para></summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0279(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Abstract.IType,System.String,AllenCopeland.Abstraction.Slf.Abstract.Members.IMethodSignatureMember)">
            <summary><para>Creates a C&#9839; compiler warning, relative to the 
            abstract model, (level 2) &#35;279:</para>
            <para><paramref name="offendingType"/> does not implement the <paramref name="patternName"/>. <paramref name="offendingMethod"/> is either static or not public.</para></summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0280(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Abstract.IType,System.String,AllenCopeland.Abstraction.Slf.Abstract.Members.IMethodSignatureMember)">
            <summary><para>Creates a C&#9839; compiler warning, relative to the 
            abstract model, (level 2) &#35;280:</para><para><paramref name="offendingType"/> does not implement the <paramref name="patternName"/>. <paramref name="offendingMethod"/> has the wrong signature.</para></summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0282(AllenCopeland.Abstraction.Slf.Ast.IIntermediateStructType)">
            <summary><para>Creates a C♯ compiler warning, relative
            to the abstract model, (level 3) #282:</para>
            <para>There is no defined ordering between fields in multiple
            declarations of <paramref name="offendingStruct"/>. To specify an
            ordering, all instance fields must be in the same declaration.
            </para></summary>
            <param name="offendingStruct">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.IIntermediateStructType"/>
            which contains one or more partial instance which contains
            fields.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0282(AllenCopeland.Abstraction.Slf.Ast.IIntermediateClassType)">
            <summary><para>Creates a C♯ compiler warning, relative
            to the abstract model, (level 3) #282:</para>
            <para>There is no defined ordering between fields in multiple
            declarations of <paramref name="offendingClass"/>. To specify an
            ordering, all instance fields must be in the same declaration.
            </para></summary>
            <param name="offendingClass">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.IIntermediateClassType"/>
            which contains one or more partial instance which contains
            fields.</param>
            <remarks>The ordering of the fields will become inconsistent
            unless all instance fields reside within the same partial instance.</remarks>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0402(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateMethodSignatureMember)">
            <summary><para>Creates a C♯ compiler warning, relative
            to the abstract model, (level 3) #402:</para>
            <para><paramref name="offendingMethod"/>: an entry point cannot be generic or in a generic type.
            </para></summary>
            <param name="offendingMethod">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateMethodMember"/>
            which cannot be an entrypoint because it is either generic, or contained within a 
            generic.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.WarningCS0414(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            <para>Creates a C♯ compiler warning, relative
            to the abstract model, (level 3) #414:</para>
            <para>The private field <paramref name="offendingField"/> is assigned but its value
            is never used.</para>
            </summary>
            <param name="offendingField">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> which is assigned its value
            but never used.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.FormatCS0453(System.String,System.String,System.String)">
            <summary><para>Formats the C♯ compiler error #453:</para><para>The type '<paramref name="usedType"/>' must be a non-nullable value type in order to use it as parameter '<paramref name="typeParameter"/>' in the generic type or method '<paramref name="genericTarget"/>'.</para></summary>
            <param name="usedType">The <see cref="T:System.String"/> representing the type that was used in place of the <paramref name="typeParameter"/>.</param>
            <param name="typeParameter">The name of the type-parameter that has the struct constraint.</param>
            <param name="genericTarget">The <see cref="T:System.String"/> value representing the name of the type which
            contains the <paramref name="typeParameter"/>.</param>
            <returns>A <see cref="T:System.String"/> value representing the C♯ compiler error #453 formatted with the <paramref name="usedType"/>,
            <paramref name="typeParameter"/> and <paramref name="genericTarget"/> provided.</returns>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0028">
            <summary><para>C&#9839; compiler warning (level 4) &#35;28:
            </para><para>{0} has the wrong signature to be an entry point
            </para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0067">
            <summary><para>C&#9839; compiler warning (level 3) &#35;67:
            </para><para>The event {0} is never used</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0078">
            <summary><para>C&#9839; compiler warning (level 4) &#35;78:
            </para><para>The 'l' suffix is easily confused with the
            digit '1' -- use 'L' for clarity</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0105">
            <summary><para>C&#9839; compiler warning (level 3) &#35;105:
            </para><para>The using directive for {0} appeared previously
            in this namespace</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0108">
            <summary><para>C&#9839; compiler warning (level 2) &#35;108:
            </para><para>{0} hides inherited member {1}. Use the new 
            keyword if hiding was intended.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0109">
            <summary><para>C&#9839; compiler warning (level 4) &#35;109:
            </para><para>The member {0} does not hide an inherited member.
            The new keyword is not required</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0114">
            <summary><para>C&#9839; compiler warning (level 2) &#35;114:
            </para><para>{0} hides inherited member {1}. To make the
            current method override that implementation, add the override
            keyword. Otherwise add the new keyword.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0162">
            <summary><para>C&#9839; compiler warning (level 2) &#35;162:
            </para><para>Unreachable code detected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0164">
            <summary><para>C&#9839; compiler warning (level 2) &#35;164:
            </para><para>This label has not been referenced</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0168">
            <summary><para>C&#9839; compiler warning (level 3) &#35;168:
            </para><para>The variable {0} is assigned but its value is
            never used</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0169">
            <summary><para>C&#9839; compiler warning (level 3) &#35;169:
            </para><para>The private field {0} is never used</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0183">
            <summary><para>C&#9839; compiler warning (level 1) &#35;183:
            </para><para>The given expression is always of the provided
            ({0}) type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0184">
            <summary><para>C&#9839; compiler warning (level 1) &#35;184:
            </para><para>The given expression is never of the provided
            ({0}) type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0197">
            <summary><para>C&#9839; compiler warning (level 1) &#35;197:
            </para><para>Passing {0} as ref or out or taking its address
            may cause a runtime exception because it is a field of a
            marshal-by-reference class</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0219">
            <summary><para>C&#9839; compiler warning (level 3) &#35;219:
            </para><para>The variable {0} is assigned but its value is
            never used</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0251">
            <summary><para>C&#9839; compiler warning (level 2) &#35;251:
            </para><para>Indexing an array with a negative index (array
            indices always start at zero)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0252">
            <summary><para>C&#9839; compiler warning (level 2) &#35;252:
            </para><para>Possible unintended reference comparison; to get
            a value comparison, cast the left hand side to type {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0253">
            <summary><para>C&#9839; compiler warning (level 2) &#35;253:
            </para><para>Possible unintended reference comparison; to get
            a value comparison, cast the right hand side to type {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0278">
            <summary><para>C&#9839; compiler warning (level 2) &#35;278:</para><para>{0} does not implement the {1} pattern. {2} is ambiguous with {2}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0279">
            <summary><para>C&#9839; compiler warning (level 2) &#35;279:</para><para>{0} does not implement the {1} pattern. {2} is either static or not public.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0280">
            <summary><para>C&#9839; compiler warning (level 2) &#35;280:</para><para>{0} does not implement the {1} pattern. {2} has the wrong signature.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0282">
            <summary><para>C&#9839; compiler warning (level 3) &#35;282:</para><para>There is no defined ordering between fields in multiple declarations of partial class or struct {0}. To specify an ordering, all instance fields must be in the same declaration.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0402">
            <summary><para>C&#9839; compiler warning (level 4) &#35;402:</para><para>{0} : an entry point cannot be generic or in a generic type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0414">
            <summary><para>C&#9839; compiler warning (level 3) &#35;414:</para><para>The private field {0} is assigned but its value is never used</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0419">
            <summary><para>C&#9839; compiler warning (level 3) &#35;419:</para><para>Ambiguous reference in cref attribute: {0}. Assuming {1}, but could have also matched other overloads including {2}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0420">
            <summary><para>C&#9839; compiler warning (level 1) &#35;420:</para><para>{0}: a reference to a volatile field will not be treated as volatile</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0422">
            <summary><para>C&#9839; compiler warning (level 4) &#35;422:</para><para>The /incremental option is no longer supported</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0429">
            <summary><para>C&#9839; compiler warning (level 4) &#35;429:</para><para>Unreachable expression code detected </para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0435">
            <summary><para>C&#9839; compiler warning (level 2) &#35;435:</para><para>The namespace {0} in {1} conflicts with the imported type {2} in {3}. Using the namespace defined in {1}..</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0436">
            <summary><para>C&#9839; compiler warning (level 2) &#35;436:</para><para>The type {0} in {1} conflicts with the imported type {2} in {3}. Using the type defined in {1}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0437">
            <summary><para>C&#9839; compiler warning (level 2) &#35;437:</para><para>The type {0} in {1} conflicts with the imported namespace {2} in {3}. Using the type defined in {1}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0440">
            <summary><para>C&#9839; compiler warning (level 2) &#35;440:</para><para>Defining an alias named 'global' is ill-advised since 'global::' always references the global namespace and not an alias</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0444">
            <summary><para>C&#9839; compiler warning (level 2) &#35;444:</para><para>Predefined type {0} was not found in {1} but was found in {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0458">
            <summary><para>C&#9839; compiler warning (level 2) &#35;458:</para><para>The result of the expression is always 'null' of type {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0464">
            <summary><para>C&#9839; compiler warning (level 2) &#35;464:</para><para>Comparing with null of type {0} always produces 'false'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0465">
            <summary><para>C&#9839; compiler warning (level 1) &#35;465:</para><para>Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0467">
            <summary><para>C&#9839; compiler warning (level 2) &#35;467:</para><para>Ambiguity between method {0} and non-method {1}. Using method group.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0469">
            <summary><para>C&#9839; compiler warning (level 2) &#35;469:</para><para>The {0} value is not implicitly convertible to type {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0472">
            <summary><para>C&#9839; compiler warning (level 2) &#35;472:</para><para>The result of the expression is always {0} since a value of type {1} is never equal to 'null' of type {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0602">
            <summary><para>C&#9839; compiler warning (level 1) &#35;602:</para><para>The feature {0} is deprecated. Please use {1} instead</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0612">
            <summary><para>C&#9839; compiler warning (level 1) &#35;612:</para><para>{0} is obsolete</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0618">
            <summary><para>C&#9839; compiler warning (level 2) &#35;618:</para><para>{0} is obsolete: {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0626">
            <summary><para>C&#9839; compiler warning (level 1) &#35;626:</para><para>Method, operator, or accessor {0} is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0628">
            <summary><para>C&#9839; compiler warning (level 4) &#35;628:</para><para>{0} : new protected member declared in sealed class</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0642">
            <summary><para>C&#9839; compiler warning (level 3) &#35;642:</para><para>Possible mistaken empty statement</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0649">
            <summary><para>C&#9839; compiler warning (level 4) &#35;649:</para><para>Field {0} is never assigned to, and will always have its default value {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0652">
            <summary><para>C&#9839; compiler warning (level 2) &#35;652:</para><para>Comparison to integral constant is useless; the constant is outside the range of type {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0657">
            <summary><para>C&#9839; compiler warning (level 1) &#35;657:</para><para>{0} is not a valid attribute location for this declaration. Valid attribute locations for this declaration are {1}. All attributes in this block will be ignored.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0658">
            <summary><para>C&#9839; compiler warning (level 1) &#35;658:</para><para>{0} is not a recognized attribute location. All attributes in this block will be ignored.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0659">
            <summary><para>C&#9839; compiler warning (level 3) &#35;659:</para><para>{0} overrides Object.Equals(object o) but does not override Object.GetHashCode()</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0660">
            <summary><para>C&#9839; compiler warning (level 3) &#35;660:</para><para>{0} defines operator == or operator != but does not override Object.Equals(object o)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0661">
            <summary><para>C&#9839; compiler warning (level 3) &#35;661:</para><para>{0} defines operator == or operator != but does not override Object.GetHashCode()</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0665">
            <summary><para>C&#9839; compiler warning (level 3) &#35;665:</para><para>Assignment in conditional expression is always constant; did you mean to use '==' instead of '='?</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0672">
            <summary><para>C&#9839; compiler warning (level 1) &#35;672:</para><para>Member {0} overrides obsolete member '{1}. Add the Obsolete attribute to {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0675">
            <summary><para>C&#9839; compiler warning (level 3) &#35;675:</para><para>Bitwise-or operator used on a sign-extended operand; consider casting to a smaller unsigned type first</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0693">
            <summary><para>C&#9839; compiler warning (level 3) &#35;693:</para><para>GenericParameter parameter {0} has the same name as the type parameter from outer type {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0728">
            <summary><para>C&#9839; compiler warning (level 2) &#35;728:</para><para>Possibly incorrect assignment to local {0} which is the argument to a using or lock statement. The Dispose call or unlocking will happen on the original value of the local.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0809">
            <summary><para>C&#9839; compiler warning (level 1) &#35;809:</para><para>Obsolete member {0} overrides non-obsolete member {1}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0824">
            <summary><para>C&#9839; compiler warning (level 1) &#35;824:</para><para>Constructor {0} is marked external.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1030">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1030:</para><para>#warning: {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1058">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1058:</para><para>A previous catch clause already catches all exceptions. All exceptions thrown will be wrapped in a System.Runtime.CompilerServices.RuntimeWrappedException</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1060">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1060:</para><para>Use of possibly unassigned field 'name'. Struct instance variables are initially unassigned if struct is unassigned.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1522">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1522:</para><para>Empty switch block</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1570">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1570:</para><para>XML comment on {0} has badly formed XML — {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1571">
            <summary><para>C&#9839; compiler warning (level 2) &#35;1571:</para><para>XML comment on {0} has a duplicate param tag for {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1572">
            <summary><para>C&#9839; compiler warning (level 2) &#35;1572:</para><para>XML comment on {0} has a param tag for {1}, but there is no parameter by that name</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1573">
            <summary><para>C&#9839; compiler warning (level 4) &#35;1573:</para><para>Parameter {0} has no matching param tag in the XML comment for {0} (but other parameters do)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1574">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1574:</para><para>XML comment on {0} has cref attribute {1} that could not be resolved.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1580">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1580:</para><para>Invalid type for parameter {0} in XML comment cref attribute</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1581">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1581:</para><para>Invalid return type in XML comment cref attribute</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1584">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1584:</para><para>XML comment on {0} has syntactically incorrect cref attribute {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1587">
            <summary><para>C&#9839; compiler warning (level 2) &#35;1587:</para><para>XML comment is not placed on a valid language element</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1589">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1589:</para><para>Unable to include XML fragment {0} of file {1} -- {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1590">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1590:</para><para>Invalid XML include element -- Missing file attribute</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1591">
            <summary><para>C&#9839; compiler warning (level 4) &#35;1591:</para><para>Missing XML comment for publicly visible type or member {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1592">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1592:</para><para>Badly formed XML in included comments file -- {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1598">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1598:</para><para>XML parser could not be loaded for the following reason: {0}. The XML documentation file {1} will not be generated.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1607">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1607:</para><para>Assembly generation -- {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1610">
            <summary><para>C&#9839; compiler warning (level 4) &#35;1610:</para><para>Unable to delete temporary file {0} used for default Win32 resource -- {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1616">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1616:</para><para>Option {0} overrides attribute {1} given in a source file or added module</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1633">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1633:</para><para>Unrecognized #pragma directive</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1634">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1634:</para><para>Expected disable or restore</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1635">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1635:</para><para>Cannot restore warning {0} because it was disabled globally</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1645">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1645:</para><para>Feature {0} is not part of the standardized ISO C# language specification, and may not be accepted by other compilers</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1658">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1658:</para><para>{0}. See also error: {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1668">
            <summary><para>C&#9839; compiler warning (level 2) &#35;1668:</para><para>Invalid search path 'path' specified in {0} -- {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1682">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1682:</para><para>Reference to type {0} claims it is nested within {1}, but it could not be found</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1683">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1683:</para><para>Reference to type {0} claims it is defined in this assembly, but it is not defined in source or any added modules</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1684">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1684:</para><para>Reference to type {0} claims it is defined in {1}, but it could not be found</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1685">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1685:</para><para>The predefined type {0} is defined in multiple assemblies in the global alias; using definition from {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1687">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1687:</para><para>Source file has exceeded the limit of 16,707,565 lines representable in the PDB, debug information will be incorrect</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1690">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1690:</para><para>Accessing a member on {0} may cause a runtime exception because it is a field of a marshal-by-reference class</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1691">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1691:</para><para>{0} is not a valid warning number</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1692">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1692:</para><para>Invalid number</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1694">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1694:</para><para>Invalid filename specified for preprocessor directive. Filename is too long or not a valid filename.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1695">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1695:</para><para>Invalid #pragma checksum syntax; should be #pragma checksum ""filename"" ""{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}"" ""XXXX...""</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1696">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1696:</para><para>Single-line comment or end-of-line expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1697">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1697:</para><para>Different checksum values given for {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1698">
            <summary><para>C&#9839; compiler warning (level 2) &#35;1698:</para><para>Circular assembly reference {0} does not match the output assembly name {1}. Try adding a reference to {0} or changing the output assembly name to match.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1699">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1699:</para><para>Use command line option {0} or appropriate project settings instead of {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1700">
            <summary><para>C&#9839; compiler warning (level 3) &#35;1700:</para><para>Assembly reference Assembly Name is invalid and cannot be resolved</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1701">
            <summary><para>C&#9839; compiler warning (level 2) &#35;1701:</para><para>Assuming assembly reference {0} matches {1}, you may need to supply runtime policy </para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1702">
            <summary><para>C&#9839; compiler warning (level 3) &#35;1702:</para><para>Assuming assembly reference {0} matches {1}, you may need to supply runtime policy</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1707">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1707:</para><para>Delegate {0} bound to {1} instead of {2} because of new language rules</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1709">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1709:</para><para>Filename specified for preprocessor directive is empty</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1710">
            <summary><para>C&#9839; compiler warning (level 2) &#35;1710:</para><para>XML comment on {0} has a duplicate typeparam tag for {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1711">
            <summary><para>C&#9839; compiler warning (level 2) &#35;1711:</para><para>XML comment on {0} has a typeparam tag for {1}, but there is no type parameter by that name</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1712">
            <summary><para>C&#9839; compiler warning (level 4) &#35;1712:</para><para>GenericParameter parameter {0} has no matching typeparam tag in the XML comment on {1} (but other type parameters do)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1717">
            <summary><para>C&#9839; compiler warning (level 3) &#35;1717:</para><para>Assignment made to same variable; did you mean to assign something else?</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1718">
            <summary><para>C&#9839; compiler warning (level 3) &#35;1718:</para><para>Comparison made to same variable; did you mean to compare something else?</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1720">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1720:</para><para>Expression will always cause a System.NullReferenceException because the default value of {0} is null</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1723">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1723:</para><para>XML comment on {0} has cref attribute {1} that refers to a type parameter</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1911">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1911:</para><para>Access to member {0} through a 'base' keyword from an anonymous method, lambda expression, query expression, or iterator results in unverifiable code. Consider moving the access into a helper method on the containing type.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1927">
            <summary><para>C&#9839; compiler warning (level 2) &#35;1927:</para><para>Ignoring /win32manifest for module because it only applies to assemblies.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1956">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1956:</para><para>Member {0} implements interface member {0} in type {1}. There are multiple matches for the interface member at run-time. It is implementation dependent which method will be called.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1957">
            <summary><para>C&#9839; compiler warning (level 1) &#35;1957:</para><para>Member {0} overrides {1}. There are multiple override candidates at run-time. It is implementation dependent which method will be called.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2002">
            <summary><para>C&#9839; compiler warning (level 1) &#35;2002:</para><para>Source file {0} specified multiple times</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2014">
            <summary><para>C&#9839; compiler warning (level 1) &#35;2014:</para><para>Compiler option {0} is obsolete, please use {1} instead</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2023">
            <summary><para>C&#9839; compiler warning (level 1) &#35;2023:</para><para>Ignoring /noconfig option because it was specified in a response file</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2029">
            <summary><para>C&#9839; compiler warning (level 1) &#35;2029:</para><para>Invalid value for '/define'; {0} is not a valid identifier</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3000">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3000:</para><para>Methods with variable arguments are not CLS-compliant</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3001">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3001:</para><para>Argument type {0} is not CLS-compliant</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3002">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3002:</para><para>Return type of {0} is not CLS-compliant</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3003">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3003:</para><para>GenericParameter of {0} is not CLS-compliant</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3004">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3004:</para><para>Mixed and decomposed Unicode characters are not CLS-compliant</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3005">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3005:</para><para>Identifier {0} differing only in case is not CLS-compliant</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3006">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3006:</para><para>Overloaded method {0} differing only in ref or out, or in array rank, is not CLS-compliant</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3007">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3007:</para><para>Overloaded method {0} differing only by unnamed array types is not CLS-compliant</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3008">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3008:</para><para>Identifier {0} differing only in case is not CLS-compliant</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3009">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3009:</para><para>{0}: base type {0} is not CLS-compliant</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3010">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3010:</para><para>{0}: CLS-compliant interfaces must have only CLS-compliant members</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3011">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3011:</para><para>{0}: only CLS-compliant members can be abstract</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3012">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3012:</para><para>You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3013">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3013:</para><para>Added modules must be marked with the CLSCompliant attribute to match the assembly</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3014">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3014:</para><para>{0} does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3015">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3015:</para><para>{0} has no accessible constructors which use only CLS-compliant types</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3016">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3016:</para><para>Arrays as attribute arguments is not CLS-compliant</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3017">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3017:</para><para>You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3018">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3018:</para><para>{0} cannot be marked as CLS-Compliant because it is a member of non CLS-compliant type {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3019">
            <summary><para>C&#9839; compiler warning (level 2) &#35;3019:</para><para>CLS compliance checking will not be performed on {0} because it is not visible from outside this assembly.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3021">
            <summary><para>C&#9839; compiler warning (level 2) &#35;3021:</para><para>{0} does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3022">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3022:</para><para>CLSCompliant attribute has no meaning when applied to parameters. Try putting it on the method instead.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3023">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3023:</para><para>CLSCompliant attribute has no meaning when applied to return types. Try putting it on the method instead.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3026">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3026:</para><para>CLS-compliant field {0} cannot be volatile</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS3027">
            <summary><para>C&#9839; compiler warning (level 1) &#35;3027:</para><para>{0} is not CLS-compliant because base interface {1} is not CLS-compliant</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS5000">
            <summary><para>C&#9839; compiler warning (level 1) &#35;5000:</para><para>Unknown compiler option {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0001">
            <summary><para>C&#9839; compiler error &#35;1:</para><para>Internal compiler error</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0003">
            <summary><para>C&#9839; compiler error &#35;3:</para><para>Out of memory</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0004">
            <summary><para>C&#9839; compiler error &#35;4:</para><para>SourceWarning treated as error</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0005">
            <summary><para>C&#9839; compiler error &#35;5:</para><para>Compiler option {0} must be followed by an argument</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0006">
            <summary><para>C&#9839; compiler error &#35;6:</para><para>Metadata file {0} could not be found</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0007">
            <summary><para>C&#9839; compiler error &#35;7:</para><para>Unexpected common language runtime initialization error — {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0008">
            <summary><para>C&#9839; compiler error &#35;8:</para><para>Unexpected error reading metadata from file 'file' — {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0009">
            <summary><para>C&#9839; compiler error &#35;9:</para><para>Metadata file {0} could not be opened — {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0010">
            <summary><para>C&#9839; compiler error &#35;10:</para><para>Unexpected fatal error -- {0}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0011">
            <summary><para>C&#9839; compiler error &#35;11:</para><para>The base class or interface {0} in assembly {1} referenced by type {2} could not be resolved</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0012">
            <summary><para>C&#9839; compiler error &#35;12:</para><para>The type {0} is defined in an assembly that is not referenced. You must add a reference to assembly {1}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0013">
            <summary><para>C&#9839; compiler error &#35;13:</para><para>Unexpected error writing metadata to file {0} -- {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0014">
            <summary><para>C&#9839; compiler error &#35;14:</para><para>Required file {0} could not be found</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0015">
            <summary><para>C&#9839; compiler error &#35;15:</para><para>The name of type {0} is too long</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0016">
            <summary><para>C&#9839; compiler error &#35;16:</para><para>Could not write to output file {0} — {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0017">
            <summary><para>C&#9839; compiler error &#35;17:</para><para>Program {0} has more than one entry point defined. Compile with /main to specify the type that contains the entry point.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0019">
            <summary><para>C&#9839; compiler error &#35;19:</para><para>Operator {0} cannot be applied to operands of type {1} and {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0020">
            <summary><para>C&#9839; compiler error &#35;20:</para><para>Division by constant zero</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0021">
            <summary><para>C&#9839; compiler error &#35;21:</para><para>Cannot apply indexing with [] to an expression of type {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0022">
            <summary><para>C&#9839; compiler error &#35;22:</para><para>Wrong number of indices inside [], expected {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0023">
            <summary><para>C&#9839; compiler error &#35;23:</para><para>Operator {0} cannot be applied to operand of type {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0025">
            <summary><para>C&#9839; compiler error &#35;25:</para><para>Standard library file {0} could not be found</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0026">
            <summary><para>C&#9839; compiler error &#35;26:</para><para>Keyword 'this' is not valid in a static property, static method, or static field initializer</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0027">
            <summary><para>C&#9839; compiler error &#35;27:</para><para>Keyword 'this' is not available in the current context</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0029">
            <summary><para>C&#9839; compiler error &#35;29:</para><para>Cannot implicitly convert type {0} to {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0030">
            <summary><para>C&#9839; compiler error &#35;30:</para><para>Cannot convert type {0} to {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0031">
            <summary><para>C&#9839; compiler error &#35;31:</para><para>Constant value {0} cannot be converted to a {1}. (use 'unchecked' syntax to override)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0034">
            <summary><para>C&#9839; compiler error &#35;34:</para><para>Operator {0} is ambiguous on operands of type {1} and {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0035">
            <summary><para>C&#9839; compiler error &#35;35:</para><para>Operator {0} is ambiguous on an operand of type {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0036">
            <summary><para>C&#9839; compiler error &#35;36:</para><para>An out parameter cannot have the '[In]' attribute</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0037">
            <summary><para>C&#9839; compiler error &#35;37:</para><para>Cannot convert null to {0} because it is a non-nullable value type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0038">
            <summary><para>C&#9839; compiler error &#35;38:</para><para>Cannot access a nonstatic member of outer type {0} via nested type {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0039">
            <summary><para>C&#9839; compiler error &#35;39:</para><para>Cannot convert type {0} to {1} via a reference conversion, boxing conversion, unboxing conversion, wrapping conversion, or null type conversion</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0040">
            <summary><para>C&#9839; compiler error &#35;40:</para><para>Unexpected error creating debug information file — {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0041">
            <summary><para>C&#9839; compiler error &#35;41:</para><para>The fully qualified name for {0} is too long for debug information. Compile without '/debug' option.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0042">
            <summary><para>C&#9839; compiler error &#35;42:</para><para>Unexpected error creating debug information file {0} — {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0043">
            <summary><para>C&#9839; compiler error &#35;43:</para><para>PDB file {0} has an incorrect or out-of-date format. Delete it and rebuild.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0050">
            <summary><para>C&#9839; compiler error &#35;50:</para><para>Inconsistent accessibility: return type {0} is less accessible than method {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0051">
            <summary><para>C&#9839; compiler error &#35;51:</para><para>Inconsistent accessibility: parameter type {0} is less accessible than method {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0052">
            <summary><para>C&#9839; compiler error &#35;52:</para><para>Inconsistent accessibility: field type {0} is less accessible than field {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0053">
            <summary><para>C&#9839; compiler error &#35;53:</para><para>Inconsistent accessibility: property type {0} is less accessible than property {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0054">
            <summary><para>C&#9839; compiler error &#35;54:</para><para>Inconsistent accessibility: indexer return type {0} is less accessible than indexer {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0055">
            <summary><para>C&#9839; compiler error &#35;55:</para><para>Inconsistent accessibility: parameter type {0} is less accessible than indexer {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0056">
            <summary><para>C&#9839; compiler error &#35;56:</para><para>Inconsistent accessibility: return type {0} is less accessible than operator {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0057">
            <summary><para>C&#9839; compiler error &#35;57:</para><para>Inconsistent accessibility: parameter type {0} is less accessible than operator {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0058">
            <summary><para>C&#9839; compiler error &#35;58:</para><para>Inconsistent accessibility: return type {0} is less accessible than delegate {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0059">
            <summary><para>C&#9839; compiler error &#35;59:</para><para>Inconsistent accessibility: parameter type {0} is less accessible than delegate {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0060">
            <summary><para>C&#9839; compiler error &#35;60:</para><para>Inconsistent accessibility: base class {0} is less accessible than class {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0061">
            <summary><para>C&#9839; compiler error &#35;61:</para><para>Inconsistent accessibility: base interface {0} is less accessible than interface {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0065">
            <summary><para>C&#9839; compiler error &#35;65:</para><para>{0}: event property must have both add and remove accessors</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0066">
            <summary><para>C&#9839; compiler error &#35;66:</para><para>{0}: event must be of a delegate type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0068">
            <summary><para>C&#9839; compiler error &#35;68:</para><para>{0}: event in interface cannot have initializer</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0069">
            <summary><para>C&#9839; compiler error &#35;69:</para><para>An event in an interface cannot have add or remove accessors</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0070">
            <summary><para>C&#9839; compiler error &#35;70:</para><para>The event {0} can only appear on the left hand side of += or -= (except when used from within the type {1})</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0071">
            <summary><para>C&#9839; compiler error &#35;71:</para><para>An explicit interface implementation of an event must use event accessor syntax</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0072">
            <summary><para>C&#9839; compiler error &#35;72:</para><para>{0} : cannot override; {1} is not an event</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0073">
            <summary><para>C&#9839; compiler error &#35;73:</para><para>An add or remove accessor must have a body</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0074">
            <summary><para>C&#9839; compiler error &#35;74:</para><para>{0}: abstract event cannot have initializer</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0075">
            <summary><para>C&#9839; compiler error &#35;75:</para><para>To cast a negative value, you must enclose the value in parentheses</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0076">
            <summary><para>C&#9839; compiler error &#35;76:</para><para>The enumerator name 'value__' is reserved and cannot be used</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0077">
            <summary><para>C&#9839; compiler error &#35;77:</para><para>The as operator must be used with a reference type or nullable type ({0} is a non-nullable value type).</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0079">
            <summary><para>C&#9839; compiler error &#35;79:</para><para>The event {0} can only appear on the left hand side of += or -=</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0080">
            <summary><para>C&#9839; compiler error &#35;80:</para><para>Constraints are not allowed on non-generic declarations</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0081">
            <summary><para>C&#9839; compiler error &#35;81:</para><para>GenericParameter parameter declaration must be an identifier not a type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0082">
            <summary><para>C&#9839; compiler error &#35;82:</para><para>GenericParameter {0} already reserves a member called {1} with the same parameter types</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0100">
            <summary><para>C&#9839; compiler error &#35;100:</para><para>The parameter name {0} is a duplicate</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0101">
            <summary><para>C&#9839; compiler error &#35;101:</para><para>The namespace {0} already contains a definition for {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0102">
            <summary><para>C&#9839; compiler error &#35;102:</para><para>The type {0} already contains a definition for {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0103">
            <summary><para>C&#9839; compiler error &#35;103:</para><para>The name {0} does not exist in the current context</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0104">
            <summary><para>C&#9839; compiler error &#35;104:</para><para>{0} is an ambiguous reference between {1} and {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0106">
            <summary><para>C&#9839; compiler error &#35;106:</para><para>The modifier {0} is not valid for this item</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0107">
            <summary><para>C&#9839; compiler error &#35;107:</para><para>More than one protection modifier</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0110">
            <summary><para>C&#9839; compiler error &#35;110:</para><para>The evaluation of the constant value for {0} involves a circular definition</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0111">
            <summary><para>C&#9839; compiler error &#35;111:</para><para>GenericParameter {0} already defines a member called {1} with the same parameter types</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0112">
            <summary><para>C&#9839; compiler error &#35;112:</para><para>A static member {0} cannot be marked as override, virtual or abstract</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0113">
            <summary><para>C&#9839; compiler error &#35;113:</para><para>A member {0} marked as override cannot be marked as new or virtual</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0115">
            <summary><para>C&#9839; compiler error &#35;115:</para><para>{0} : no suitable method found to override</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0116">
            <summary><para>C&#9839; compiler error &#35;116:</para><para>A namespace does not directly contain members such as fields or methods</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0117">
            <summary><para>C&#9839; compiler error &#35;117:</para><para>{0} does not contain a definition for 'identifier'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0118">
            <summary><para>C&#9839; compiler error &#35;118:</para><para>{0} is a {1} but is used like a {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0119">
            <summary><para>C&#9839; compiler error &#35;119:</para><para>{0} is a {1}, which is not valid in the given context.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0120">
            <summary><para>C&#9839; compiler error &#35;120:</para><para>An object reference is required for the nonstatic field, method, or property {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0121">
            <summary><para>C&#9839; compiler error &#35;121:</para><para>The call is ambiguous between the following methods or properties: {0} and {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0122">
            <summary><para>C&#9839; compiler error &#35;122:</para><para>{0} is inaccessible due to its protection level</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0123">
            <summary><para>C&#9839; compiler error &#35;123:</para><para>No overload for {0} matches delegate {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0126">
            <summary><para>C&#9839; compiler error &#35;126:</para><para>An object of a type convertible to {0} is required</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0127">
            <summary><para>C&#9839; compiler error &#35;127:</para><para>Since {0} returns void, a return keyword must not be followed by an object expression</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0128">
            <summary><para>C&#9839; compiler error &#35;128:</para><para>A local variable named {0} is already defined in this scope</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0131">
            <summary><para>C&#9839; compiler error &#35;131:</para><para>The left-hand side of an assignment must be a variable, property or indexer</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0132">
            <summary><para>C&#9839; compiler error &#35;132:</para><para>{0} : a static constructor must be parameterless</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0133">
            <summary><para>C&#9839; compiler error &#35;133:</para><para>The expression being assigned to {0} must be constant</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0134">
            <summary><para>C&#9839; compiler error &#35;134:</para><para>{0} is of type {1}. A const field of a reference type other than string can only be initialized with null.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0135">
            <summary><para>C&#9839; compiler error &#35;135:</para><para>{0} conflicts with the declaration {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0136">
            <summary><para>C&#9839; compiler error &#35;136:</para><para>A local variable named {0} cannot be declared in this scope because it would give a different meaning to {0}, which is already used in a 'parent or current/child' scope to denote something else</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0138">
            <summary><para>C&#9839; compiler error &#35;138:</para><para>A using namespace directive can only be applied to namespaces; {0} is a type not a namespace</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0139">
            <summary><para>C&#9839; compiler error &#35;139:</para><para>No enclosing loop out of which to break or continue</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0140">
            <summary><para>C&#9839; compiler error &#35;140:</para><para>The label {0} is a duplicate</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0143">
            <summary><para>C&#9839; compiler error &#35;143:</para><para>The type {0} has no constructors defined</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0144">
            <summary><para>C&#9839; compiler error &#35;144:</para><para>Cannot create an instance of the abstract class or interface {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0145">
            <summary><para>C&#9839; compiler error &#35;145:</para><para>A const field requires a value to be provided</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0146">
            <summary><para>C&#9839; compiler error &#35;146:</para><para>Circular base class dependency involving {0} and {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0148">
            <summary><para>C&#9839; compiler error &#35;148:</para><para>The delegate {0} does not have a valid constructor</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0149">
            <summary><para>C&#9839; compiler error &#35;149:</para><para>Method name expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0150">
            <summary><para>C&#9839; compiler error &#35;150:</para><para>A constant value is expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0151">
            <summary><para>C&#9839; compiler error &#35;151:</para><para>A value of an integral type expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0152">
            <summary><para>C&#9839; compiler error &#35;152:</para><para>The label {0} already occurs in this switch statement</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0153">
            <summary><para>C&#9839; compiler error &#35;153:</para><para>A goto case is only valid inside a switch statement</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0154">
            <summary><para>C&#9839; compiler error &#35;154:</para><para>The property or indexer 'property' cannot be used in this context because it lacks the get accessor</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0155">
            <summary><para>C&#9839; compiler error &#35;155:</para><para>The type caught or thrown must be derived from System.Exception</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0156">
            <summary><para>C&#9839; compiler error &#35;156:</para><para>A throw statement with no arguments is not allowed in a finally clause that is nested inside the nearest enclosing catch clause</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0157">
            <summary><para>C&#9839; compiler error &#35;157:</para><para>Control cannot leave the body of a finally clause</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0158">
            <summary><para>C&#9839; compiler error &#35;158:</para><para>The label {0} shadows another label by the same name in a contained scope</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0159">
            <summary><para>C&#9839; compiler error &#35;159:</para><para>No such label {0} within the scope of the goto statement</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0160">
            <summary><para>C&#9839; compiler error &#35;160:</para><para>A previous catch clause already catches all exceptions of this or of a super type ({0})</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0161">
            <summary><para>C&#9839; compiler error &#35;161:</para><para>{0}: not all code paths return a value</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0163">
            <summary><para>C&#9839; compiler error &#35;163:</para><para>Control cannot fall through from one case label ({0}) to another</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0165">
            <summary><para>C&#9839; compiler error &#35;165:</para><para>Use of unassigned local variable {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0167">
            <summary><para>C&#9839; compiler error &#35;167:</para><para>The delegate {0} is missing the Invoke method</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0170">
            <summary><para>C&#9839; compiler error &#35;170:</para><para>Use of possibly unassigned field {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0171">
            <summary><para>C&#9839; compiler error &#35;171:</para><para>Backing field for automatically implemented property {0} must be fully assigned before control is returned to the caller. Consider calling the default constructor from a constructor initializer.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0172">
            <summary><para>C&#9839; compiler error &#35;172:</para><para>GenericParameter of conditional expression cannot be determined because {0} and {1} implicitly convert to one another</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0173">
            <summary><para>C&#9839; compiler error &#35;173:</para><para>GenericParameter of conditional expression cannot be determined because there is no implicit conversion between {0} and {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0174">
            <summary><para>C&#9839; compiler error &#35;174:</para><para>A base class is required for a 'base' reference</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0175">
            <summary><para>C&#9839; compiler error &#35;175:</para><para>Use of keyword 'base' is not valid in this context</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0176">
            <summary><para>C&#9839; compiler error &#35;176:</para><para>Static member {0} cannot be accessed with an instance reference; qualify it with a type name instead</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0177">
            <summary><para>C&#9839; compiler error &#35;177:</para><para>The out parameter {0} must be assigned to before control leaves the current method</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0178">
            <summary><para>C&#9839; compiler error &#35;178:</para><para>Invalid rank specifier: expected ',' or ']'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0179">
            <summary><para>C&#9839; compiler error &#35;179:</para><para>{0} cannot be extern and declare a body</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0180">
            <summary><para>C&#9839; compiler error &#35;180:</para><para>{0} cannot be both extern and abstract</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0182">
            <summary><para>C&#9839; compiler error &#35;182:</para><para>An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0185">
            <summary><para>C&#9839; compiler error &#35;185:</para><para>{0} is not a reference type as required by the lock statement</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0186">
            <summary><para>C&#9839; compiler error &#35;186:</para><para>Use of null is not valid in this context </para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0188">
            <summary><para>C&#9839; compiler error &#35;188:</para><para>The 'this' object cannot be used before all of its fields are assigned to</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0191">
            <summary><para>C&#9839; compiler error &#35;191:</para><para>Property or indexer {0} cannot be assigned to -- it is read only</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0192">
            <summary><para>C&#9839; compiler error &#35;192:</para><para>Fields of static readonly field {0} cannot be passed ref or out (except in a static constructor)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0193">
            <summary><para>C&#9839; compiler error &#35;193:</para><para>The * or -> operator must be applied to a pointer</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0196">
            <summary><para>C&#9839; compiler error &#35;196:</para><para>A pointer must be indexed by only one value</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0198">
            <summary><para>C&#9839; compiler error &#35;198:</para><para>Fields of static readonly field {0} cannot be assigned to (except in a static constructor or a variable initializer)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0199">
            <summary><para>C&#9839; compiler error &#35;199:</para><para>Fields of static readonly field {0} cannot be passed ref or out (except in a static constructor)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0200">
            <summary><para>C&#9839; compiler error &#35;200:</para><para>Property or indexer {0} cannot be assigned to — it is read only</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0201">
            <summary><para>C&#9839; compiler error &#35;201:</para><para>Only assignment, call, increment, decrement, and new object expressions can be used as a statement</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0202">
            <summary><para>C&#9839; compiler error &#35;202:</para><para>foreach requires that the return type {0} of '{1}.GetEnumerator()' must have a suitable public MoveNext method and public Current property</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0204">
            <summary><para>C&#9839; compiler error &#35;204:</para><para>Only 65534 locals are allowed</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0205">
            <summary><para>C&#9839; compiler error &#35;205:</para><para>Cannot call an abstract base member: {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0206">
            <summary><para>C&#9839; compiler error &#35;206:</para><para>A property or indexer may not be passed as an out or ref parameter</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0208">
            <summary><para>C&#9839; compiler error &#35;208:</para><para>Cannot take the address of, get the size of, or declare a pointer to a managed type ({0})</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0209">
            <summary><para>C&#9839; compiler error &#35;209:</para><para>The type of local declared in a fixed statement must be a pointer type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0210">
            <summary><para>C&#9839; compiler error &#35;210:</para><para>You must provide an initializer in a fixed or using statement declaration</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0211">
            <summary><para>C&#9839; compiler error &#35;211:</para><para>Cannot take the address of the given expression</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0212">
            <summary><para>C&#9839; compiler error &#35;212:</para><para>You can only take the address of an unfixed expression inside of a fixed statement initializer</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0213">
            <summary><para>C&#9839; compiler error &#35;213:</para><para>You cannot use the fixed statement to take the address of an already fixed expression</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0214">
            <summary><para>C&#9839; compiler error &#35;214:</para><para>Pointers and fixed size buffers may only be used in an unsafe context</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0215">
            <summary><para>C&#9839; compiler error &#35;215:</para><para>The return type of operator True or False must be bool</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0216">
            <summary><para>C&#9839; compiler error &#35;216:</para><para>The operator {0} requires a matching operator {1} to also be defined</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0217">
            <summary><para>C&#9839; compiler error &#35;217:</para><para>In order to be applicable as a short circuit operator a user-defined logical operator ({0}) must have the same return type as the type of its 2 parameters.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0218">
            <summary><para>C&#9839; compiler error &#35;218:</para><para>The type ({0}) must contain declarations of operator true and operator false</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0220">
            <summary><para>C&#9839; compiler error &#35;220:</para><para>The operation overflows at compile time in checked mode</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0221">
            <summary><para>C&#9839; compiler error &#35;221:</para><para>Constant value {0} cannot be converted to a {1} (use 'unchecked' syntax to override)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0225">
            <summary><para>C&#9839; compiler error &#35;225:</para><para>The params parameter must be a single dimensional array</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0226">
            <summary><para>C&#9839; compiler error &#35;226:</para><para>An __arglist expression may only appear inside of a call or new expression.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0227">
            <summary><para>C&#9839; compiler error &#35;227:</para><para>Unsafe code may only appear if compiling with /unsafe</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0228">
            <summary><para>C&#9839; compiler error &#35;228:</para><para>{0} does not contain a definition for {1}, or it is not accessible</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0229">
            <summary><para>C&#9839; compiler error &#35;229:</para><para>Ambiguity between {0} and {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0230">
            <summary><para>C&#9839; compiler error &#35;230:</para><para>GenericParameter and identifier are both required in a foreach statement</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0231">
            <summary><para>C&#9839; compiler error &#35;231:</para><para>A params parameter must be the last parameter in a formal parameter list.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0233">
            <summary><para>C&#9839; compiler error &#35;233:</para><para>{0} does not have a predefined size, therefore sizeof can only be used in an unsafe context (consider using System.Runtime.InteropServices.Marshal.SizeOf)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0234">
            <summary><para>C&#9839; compiler error &#35;234:</para><para>The type or namespace name {0} does not exist in the namespace {1} (are you missing an assembly reference?)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0236">
            <summary><para>C&#9839; compiler error &#35;236:</para><para>A field initializer cannot reference the nonstatic field, method, or property {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0238">
            <summary><para>C&#9839; compiler error &#35;238:</para><para>{0} cannot be sealed because it is not an override</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0239">
            <summary><para>C&#9839; compiler error &#35;239:</para><para>{0} : cannot override inherited member {1} because it is sealed</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0241">
            <summary><para>C&#9839; compiler error &#35;241:</para><para>Default parameter specifiers are not permitted</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0242">
            <summary><para>C&#9839; compiler error &#35;242:</para><para>The operation in question is undefined on void pointers</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0243">
            <summary><para>C&#9839; compiler error &#35;243:</para><para>The Conditional attribute is not valid on 'method' because it is an override method</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0244">
            <summary><para>C&#9839; compiler error &#35;244:</para><para>Neither 'is' nor 'as' is valid on pointer types</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0245">
            <summary><para>C&#9839; compiler error &#35;245:</para><para>Destructors and object.Finalize cannot be called directly. Consider calling IDisposable.Dispose if available.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0246">
            <summary><para>C&#9839; compiler error &#35;246:</para><para>The type or namespace name {0} could not be found (are you missing a using directive or an assembly reference?)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0247">
            <summary><para>C&#9839; compiler error &#35;247:</para><para>Cannot use a negative size with stackalloc</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0248">
            <summary><para>C&#9839; compiler error &#35;248:</para><para>Cannot create an array with a negative size</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0249">
            <summary><para>C&#9839; compiler error &#35;249:</para><para>Do not override object.Finalize. Instead, provide a destructor.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0250">
            <summary><para>C&#9839; compiler error &#35;250:</para><para>Do not directly call your base class Finalize method. It is called automatically from your destructor.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0254">
            <summary><para>C&#9839; compiler error &#35;254:</para><para>The right hand side of a fixed statement assignment may not be a cast expression</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0255">
            <summary><para>C&#9839; compiler error &#35;255:</para><para>stackalloc may not be used in a catch or finally block</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0260">
            <summary><para>C&#9839; compiler error &#35;260:</para><para>Missing partial modifier on declaration of type {0}; another partial declaration of this type exists</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0261">
            <summary><para>C&#9839; compiler error &#35;261:</para><para>Partial declarations of {0} must be all classes, all structs, or all interfaces</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0262">
            <summary><para>C&#9839; compiler error &#35;262:</para><para>Partial declarations of {0} have conflicting accessibility modifiers</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0263">
            <summary><para>C&#9839; compiler error &#35;263:</para><para>Partial declarations of {0} must not specify different base classes</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0264">
            <summary><para>C&#9839; compiler error &#35;264:</para><para>Partial declarations of {0} must have the same type parameter names in the same order</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0265">
            <summary><para>C&#9839; compiler error &#35;265:</para><para>Partial declarations of {0} have inconsistent constraints for type parameter {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0266">
            <summary><para>C&#9839; compiler error &#35;266:</para><para>Cannot implicitly convert type {0} to {1}. An explicit conversion exists (are you missing a cast?)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0267">
            <summary><para>C&#9839; compiler error &#35;267:</para><para>The partial modifier can only appear immediately before 'class', 'struct', or 'interface'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0268">
            <summary><para>C&#9839; compiler error &#35;268:</para><para>Imported type {0} is invalid. It contains a circular base class dependency.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0269">
            <summary><para>C&#9839; compiler error &#35;269:</para><para>Use of unassigned out parameter {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0270">
            <summary><para>C&#9839; compiler error &#35;270:</para><para>Array size cannot be specified in a variable declaration (try initializing with a 'new' expression)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0271">
            <summary><para>C&#9839; compiler error &#35;271:</para><para>The property or indexer {0} cannot be used in this context because the get accessor is inaccessible</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0272">
            <summary><para>C&#9839; compiler error &#35;272:</para><para>The property or indexer {0} cannot be used in this context because the set accessor is inaccessible</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0273">
            <summary><para>C&#9839; compiler error &#35;273:</para><para>The accessibility modifier of the {0} accessor must be more restrictive than the property or indexer {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0274">
            <summary><para>C&#9839; compiler error &#35;274:</para><para>Cannot specify accessibility modifiers for both accessors of the property or indexer {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0275">
            <summary><para>C&#9839; compiler error &#35;275:</para><para>{0}: accessibility modifiers may not be used on accessors in an interface</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0276">
            <summary><para>C&#9839; compiler error &#35;276:</para><para>{0}: accessibility modifiers on accessors may only be used if the property or indexer has both a get and a set accessor</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0277">
            <summary><para>C&#9839; compiler error &#35;277:</para><para>{0} does not implement interface member {1}. {2} is not public</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0281">
            <summary><para>C&#9839; compiler error &#35;281:</para><para>Friend access was granted to {0}, but the output assembly is named {1}. Try adding a reference to {0} or changing the output assembly name to match.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0283">
            <summary><para>C&#9839; compiler error &#35;283:</para><para>The type {0} cannot be declared const</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0304">
            <summary><para>C&#9839; compiler error &#35;304:</para><para>Cannot create an instance of the variable type {0} because it does not have the new() constraint</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0305">
            <summary><para>C&#9839; compiler error &#35;305:</para><para>Using the generic type {0} requires {1} type arguments</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0306">
            <summary><para>C&#9839; compiler error &#35;306:</para><para>The type {0} may not be used as a type argument</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0307">
            <summary><para>C&#9839; compiler error &#35;307:</para><para>The {0} {1} is not a generic method. If you intended an expression list, use parentheses around the &lt; expression.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0308">
            <summary><para>C&#9839; compiler error &#35;308:</para><para>The non-generic type-or-method {0} cannot be used with type arguments.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0310">
            <summary><para>C&#9839; compiler error &#35;310:</para><para>The type {0} must be a non-abstract type with a public parameterless constructor in order to use it as parameter {1} in the generic type or method {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0311">
            <summary><para>C&#9839; compiler error &#35;311:</para><para>The type {0} cannot be used as type parameter {2} in the generic type or method {3}. There is no implicit reference conversion from {0} to {1}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0312">
            <summary><para>C&#9839; compiler error &#35;312:</para><para>The type {0} cannot be used as type parameter {1} in the generic type or method {2}. The nullable type {0} does not satisfy the constraint of {3}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0313">
            <summary><para>C&#9839; compiler error &#35;313:</para><para>The type {0} cannot be used as type parameter {1} in the generic type or method {2}. The nullable type {0} does not satisfy the constraint of {2}. Nullable types cannot satisfy any interface constraints.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0314">
            <summary><para>C&#9839; compiler error &#35;314:</para><para>The type {0} cannot be used as type parameter {1} in the generic type or method {2}. There is no boxing conversion or type parameter conversion from {0} to {3}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0315">
            <summary><para>C&#9839; compiler error &#35;315:</para><para>The type {0} cannot be used as type parameter {1} in the generic type or method {2}. There is no boxing conversion from {0} to {3}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0316">
            <summary><para>C&#9839; compiler error &#35;316:</para><para>The parameter name {0} conflicts with an automatically-generated parameter name.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0400">
            <summary><para>C&#9839; compiler error &#35;400:</para><para>The type or namespace name {0} could not be found in the global namespace (are you missing an assembly reference?)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0401">
            <summary><para>C&#9839; compiler error &#35;401:</para><para>The new() constraint must be the last constraint specified</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0403">
            <summary><para>C&#9839; compiler error &#35;403:</para><para>Cannot convert null to type parameter {0} because it could be a non-nullable value type. Consider using default({0}) instead.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0404">
            <summary><para>C&#9839; compiler error &#35;404:</para><para>'&lt;' unexpected : attributes cannot be generic</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0405">
            <summary><para>C&#9839; compiler error &#35;405:</para><para>Duplicate constraint {0} for type parameter {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0406">
            <summary><para>C&#9839; compiler error &#35;406:</para><para>The class type constraint {0} must come before any other constraints</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0407">
            <summary><para>C&#9839; compiler error &#35;407:</para><para>{0} has the wrong return type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0409">
            <summary><para>C&#9839; compiler error &#35;409:</para><para>A constraint clause has already been specified for type parameter {0}. All of the constraints for a type parameter must be specified in a single where clause.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0410">
            <summary><para>C&#9839; compiler error &#35;410:</para><para>No overload for {0} has the correct parameter and return types</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0411">
            <summary><para>C&#9839; compiler error &#35;411:</para><para>The type arguments for method {0} cannot be inferred from the usage. Try specifying the type arguments explicitly.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0412">
            <summary><para>C&#9839; compiler error &#35;412:</para><para>{0}: a parameter or local variable cannot have the same name as a method type parameter</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0413">
            <summary><para>C&#9839; compiler error &#35;413:</para><para>The type parameter {0} cannot be used with the 'as' operator because it does not have a class type constraint nor a constraint that is a class</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0415">
            <summary><para>C&#9839; compiler error &#35;415:</para><para>The {0} attribute is valid only on an indexer that is not an explicit interface member declaration</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0416">
            <summary><para>C&#9839; compiler error &#35;416:</para><para>{0}: an attribute argument cannot use type parameters</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0417">
            <summary><para>C&#9839; compiler error &#35;417:</para><para>{0}: cannot provide arguments when creating an instance of a variable type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0418">
            <summary><para>C&#9839; compiler error &#35;418:</para><para>{0}: an abstract class cannot be sealed or static</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0423">
            <summary><para>C&#9839; compiler error &#35;423:</para><para>Since {0} has the ComImport attribute, {1} must be extern or abstract</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0424">
            <summary><para>C&#9839; compiler error &#35;424:</para><para>{0}: a class with the ComImport attribute cannot specify a base class</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0425">
            <summary><para>C&#9839; compiler error &#35;425:</para><para>The constraints for type parameter {0} of method {1} must match the constraints for type parameter {2} of interface method {3}. Consider using an explicit interface implementation instead.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0426">
            <summary><para>C&#9839; compiler error &#35;426:</para><para>The type name {0} does not exist in the type {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0428">
            <summary><para>C&#9839; compiler error &#35;428:</para><para>Cannot convert method group {0} to non-delegate type {1}. Did you intend to invoke the method?</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0430">
            <summary><para>C&#9839; compiler error &#35;430:</para><para>The extern alias {0} was not specified in a /reference option</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0431">
            <summary><para>C&#9839; compiler error &#35;431:</para><para>Cannot use alias {0} with '::' since the alias references a type. Use '.' instead.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0432">
            <summary><para>C&#9839; compiler error &#35;432:</para><para>Alias {0} not found</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0433">
            <summary><para>C&#9839; compiler error &#35;433:</para><para>The type {0} exists in both {1} and {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0434">
            <summary><para>C&#9839; compiler error &#35;434:</para><para>The namespace {0} in {1} conflicts with the type {2} in {3}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0438">
            <summary><para>C&#9839; compiler error &#35;438:</para><para>The type {0} in {1} conflicts with the namespace {2} in {3}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0439">
            <summary><para>C&#9839; compiler error &#35;439:</para><para>An extern alias declaration must precede all other elements defined in the namespace</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0441">
            <summary><para>C&#9839; compiler error &#35;441:</para><para>{0}: a class cannot be both static and sealed</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0442">
            <summary><para>C&#9839; compiler error &#35;442:</para><para>{0}: abstract properties cannot have private accessors</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0443">
            <summary><para>C&#9839; compiler error &#35;443:</para><para>Syntax error, value expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0445">
            <summary><para>C&#9839; compiler error &#35;445:</para><para>Cannot modify the result of an unboxing conversion</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0446">
            <summary><para>C&#9839; compiler error &#35;446:</para><para>Foreach cannot operate on a {0}. Did you intend to invoke the {0}?</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0447">
            <summary><para>C&#9839; compiler error &#35;447:</para><para>Attributes cannot be used on type arguments, only on type parameters</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0448">
            <summary><para>C&#9839; compiler error &#35;448:</para><para>The return type for ++ or -- operator must be the containing type or derived from the containing type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0449">
            <summary><para>C&#9839; compiler error &#35;449:</para><para>The 'class' or 'struct' constraint must come before any other constraints</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0450">
            <summary><para>C&#9839; compiler error &#35;450:</para><para>{0}: cannot specify both a constraint class and the 'class' or 'struct' constraint</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0451">
            <summary><para>C&#9839; compiler error &#35;451:</para><para>The 'new()' constraint cannot be used with the 'struct' constraint</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0452">
            <summary><para>C&#9839; compiler error &#35;452:</para><para>The type {0} must be a reference type in order to use it as parameter {1} in the generic type or method {2}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0453">
            <summary><para>C&#9839; compiler error &#35;453:</para><para>The type {0} must be a non-nullable value type in order to use it as parameter {1} in the generic type or method {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0454">
            <summary><para>C&#9839; compiler error &#35;454:</para><para>Circular constraint dependency involving {0} and {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0455">
            <summary><para>C&#9839; compiler error &#35;455:</para><para>GenericParameter parameter {0} inherits conflicting constraints {1} and {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0456">
            <summary><para>C&#9839; compiler error &#35;456:</para><para>GenericParameter parameter {0} has the 'struct' constraint so {0} cannot be used as a constraint for {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0457">
            <summary><para>C&#9839; compiler error &#35;457:</para><para>Ambiguous user defined conversions {0} and {1} when converting from {2} to {3}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0459">
            <summary><para>C&#9839; compiler error &#35;459:</para><para>Cannot take the address of a read-only local variable</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0460">
            <summary><para>C&#9839; compiler error &#35;460:</para><para>Constraints for override and explicit interface implementation methods are inherited from the base method, so they cannot be specified directly</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0462">
            <summary><para>C&#9839; compiler error &#35;462:</para><para>The inherited members {0} and {1} have the same signature in type {1}, so they cannot be overridden</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0463">
            <summary><para>C&#9839; compiler error &#35;463:</para><para>Evaluation of the decimal constant expression failed with error: {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0466">
            <summary><para>C&#9839; compiler error &#35;466:</para><para>{0} should not have a params parameter since {1} does not</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0468">
            <summary><para>C&#9839; compiler error &#35;468:</para><para>Ambiguity between type {0} and type {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0470">
            <summary><para>C&#9839; compiler error &#35;470:</para><para>Method {0} cannot implement interface accessor {1} for type {2}. Use an explicit interface implementation.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0471">
            <summary><para>C&#9839; compiler error &#35;471:</para><para>The method [0} is not a generic method. If you intended an expression list, use parentheses around the &lt; expression.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0473">
            <summary><para>C&#9839; compiler error &#35;473:</para><para>Explicit interface implementation {0} matches more than one interface member. Which interface member is actually chosen is implementation-dependent. Consider using a non-explicit implementation instead.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0500">
            <summary><para>C&#9839; compiler error &#35;500:</para><para>{0} cannot declare a body because it is marked abstract</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0501">
            <summary><para>C&#9839; compiler error &#35;501:</para><para>{0} must declare a body because it is not marked abstract, extern, or partial</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0502">
            <summary><para>C&#9839; compiler error &#35;502:</para><para>{0} cannot be both abstract and sealed</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0503">
            <summary><para>C&#9839; compiler error &#35;503:</para><para>The abstract method {0} cannot be marked virtual</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0504">
            <summary><para>C&#9839; compiler error &#35;504:</para><para>The constant {0} cannot be marked static</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0505">
            <summary><para>C&#9839; compiler error &#35;505:</para><para>{0}: cannot override because {1} is not a function</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0506">
            <summary><para>C&#9839; compiler error &#35;506:</para><para>{0} : cannot override inherited member {1} because it is not marked 'virtual', 'abstract', or 'override'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0507">
            <summary><para>C&#9839; compiler error &#35;507:</para><para>{0} : cannot change access modifiers when overriding {1} inherited member {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0508">
            <summary><para>C&#9839; compiler error &#35;508:</para><para>{0}: return type must be {1} to match overridden member {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0509">
            <summary><para>C&#9839; compiler error &#35;509:</para><para>{0} : cannot derive from sealed type {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0513">
            <summary><para>C&#9839; compiler error &#35;513:</para><para>{0} is abstract but it is contained in nonabstract class {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0514">
            <summary><para>C&#9839; compiler error &#35;514:</para><para>{0} : static constructor cannot have an explicit 'this' or 'base' constructor call</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0515">
            <summary><para>C&#9839; compiler error &#35;515:</para><para>{0} : access modifiers are not allowed on static constructors</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0516">
            <summary><para>C&#9839; compiler error &#35;516:</para><para>Constructor {0} can not call itself</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0517">
            <summary><para>C&#9839; compiler error &#35;517:</para><para>{0} has no base class and cannot call a base constructor</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0518">
            <summary><para>C&#9839; compiler error &#35;518:</para><para>Predefined type {0} is not defined or imported</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0520">
            <summary><para>C&#9839; compiler error &#35;520:</para><para>Predefined type {0} is declared incorrectly</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0522">
            <summary><para>C&#9839; compiler error &#35;522:</para><para>{0} : structs cannot call base class constructors</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0523">
            <summary><para>C&#9839; compiler error &#35;523:</para><para>Struct member {0} of type {1} causes a cycle in the struct layout</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0524">
            <summary><para>C&#9839; compiler error &#35;524:</para><para>{0} : interfaces cannot declare types</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0525">
            <summary><para>C&#9839; compiler error &#35;525:</para><para>Interfaces cannot contain fields</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0526">
            <summary><para>C&#9839; compiler error &#35;526:</para><para>Interfaces cannot contain constructors</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0527">
            <summary><para>C&#9839; compiler error &#35;527:</para><para>GenericParameter {0} in interface list is not an interface</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0528">
            <summary><para>C&#9839; compiler error &#35;528:</para><para>{0} is already listed in interface list</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0529">
            <summary><para>C&#9839; compiler error &#35;529:</para><para>Inherited interface {0} causes a cycle in the interface hierarchy of {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0531">
            <summary><para>C&#9839; compiler error &#35;531:</para><para>{0} : interface members cannot have a definition</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0533">
            <summary><para>C&#9839; compiler error &#35;533:</para><para>{0} hides inherited abstract member {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0534">
            <summary><para>C&#9839; compiler error &#35;534:</para><para>{0} does not implement inherited abstract member {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0535">
            <summary><para>C&#9839; compiler error &#35;535:</para><para>{0} does not implement interface member {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0537">
            <summary><para>C&#9839; compiler error &#35;537:</para><para>The class System.Object cannot have a base class or implement an interface</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0538">
            <summary><para>C&#9839; compiler error &#35;538:</para><para>{0} in explicit interface declaration is not an interface</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0539">
            <summary><para>C&#9839; compiler error &#35;539:</para><para>{0} in explicit interface declaration is not a member of interface</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0540">
            <summary><para>C&#9839; compiler error &#35;540:</para><para>{0} : containing type does not implement interface {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0541">
            <summary><para>C&#9839; compiler error &#35;541:</para><para>{0} : explicit interface declaration can only be declared in a class or struct</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0542">
            <summary><para>C&#9839; compiler error &#35;542:</para><para>{0} : member names cannot be the same as their enclosing type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0543">
            <summary><para>C&#9839; compiler error &#35;543:</para><para>{0} : the enumerator value is too large to fit in its type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0544">
            <summary><para>C&#9839; compiler error &#35;544:</para><para>{0}: cannot override because {1} is not a property</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0545">
            <summary><para>C&#9839; compiler error &#35;545:</para><para>{0} : cannot override because {1} does not have an overridable get accessor</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0546">
            <summary><para>C&#9839; compiler error &#35;546:</para><para>{0} : cannot override because {1} does not have an overridable set accessor</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0547">
            <summary><para>C&#9839; compiler error &#35;547:</para><para>{0} : property or indexer cannot have void type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0548">
            <summary><para>C&#9839; compiler error &#35;548:</para><para>{0} : property or indexer must have at least one accessor</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0549">
            <summary><para>C&#9839; compiler error &#35;549:</para><para>{0} is a new virtual member in sealed class {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0550">
            <summary><para>C&#9839; compiler error &#35;550:</para><para>{0} adds an accessor not found in interface member {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0551">
            <summary><para>C&#9839; compiler error &#35;551:</para><para>Explicit interface implementation {0} is missing accessor {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0552">
            <summary><para>C&#9839; compiler error &#35;552:</para><para>{0} : user defined conversion to/from interface</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0553">
            <summary><para>C&#9839; compiler error &#35;553:</para><para>{0} : user defined conversion to/from base class</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0554">
            <summary><para>C&#9839; compiler error &#35;554:</para><para>{0} : user defined conversion to/from derived class</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0555">
            <summary><para>C&#9839; compiler error &#35;555:</para><para>User-defined operator cannot take an object of the enclosing type and convert to an object of the enclosing type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0556">
            <summary><para>C&#9839; compiler error &#35;556:</para><para>User-defined conversion must convert to or from the enclosing type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0557">
            <summary><para>C&#9839; compiler error &#35;557:</para><para>Duplicate user-defined conversion in type {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0558">
            <summary><para>C&#9839; compiler error &#35;558:</para><para>User-defined operator {0} must be declared static and public</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0559">
            <summary><para>C&#9839; compiler error &#35;559:</para><para>The parameter type for ++ or -- operator must be the containing type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0562">
            <summary><para>C&#9839; compiler error &#35;562:</para><para>The parameter of a unary operator must be the containing type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0563">
            <summary><para>C&#9839; compiler error &#35;563:</para><para>One of the parameters of a binary operator must be the containing type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0564">
            <summary><para>C&#9839; compiler error &#35;564:</para><para>The first operand of an overloaded shift operator must have the same type as the containing type, and the type of the second operand must be int</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0567">
            <summary><para>C&#9839; compiler error &#35;567:</para><para>Interfaces cannot contain operators</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0568">
            <summary><para>C&#9839; compiler error &#35;568:</para><para>Structs cannot contain explicit parameterless constructors</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0569">
            <summary><para>C&#9839; compiler error &#35;569:</para><para>{1} : cannot override {0} because it is not supported by the language</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0570">
            <summary><para>C&#9839; compiler error &#35;570:</para><para>Property, indexer, or event {0} is not supported by the language; try directly calling accessor method {1}!</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0571">
            <summary><para>C&#9839; compiler error &#35;571:</para><para>{0} : cannot explicitly call operator or accessor</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0572">
            <summary><para>C&#9839; compiler error &#35;572:</para><para>{0} : cannot reference a type through an expression; try {1} instead</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0573">
            <summary><para>C&#9839; compiler error &#35;573:</para><para>{0} : cannot have instance field initializers in structs</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0574">
            <summary><para>C&#9839; compiler error &#35;574:</para><para>Name of destructor must match name of class</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0575">
            <summary><para>C&#9839; compiler error &#35;575:</para><para>Only class types can contain destructors</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0576">
            <summary><para>C&#9839; compiler error &#35;576:</para><para>Namespace {0} contains a definition conflicting with alias {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0577">
            <summary><para>C&#9839; compiler error &#35;577:</para><para>The Conditional attribute is not valid on {0} because it is a constructor, destructor, operator, or explicit interface implementation</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0578">
            <summary><para>C&#9839; compiler error &#35;578:</para><para>The Conditional attribute is not valid on {0} because its return type is not void</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0579">
            <summary><para>C&#9839; compiler error &#35;579:</para><para>Duplicate {0} attribute</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0582">
            <summary><para>C&#9839; compiler error &#35;582:</para><para>The Conditional not valid on interface members</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0583">
            <summary><para>C&#9839; compiler error &#35;583:</para><para>Internal Compiler SourceError. An internal error has occurred in the compiler. To work around this problem, try simplifying or changing the program near the locations listed below. Locations at the top of the list are closer to the point at which the internal error occurred. Errors such as this can be reported to Microsoft by using the /errorreport option.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0584">
            <summary><para>C&#9839; compiler error &#35;584:</para><para>Internal Compiler SourceError: stage {0} symbol {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0585">
            <summary><para>C&#9839; compiler error &#35;585:</para><para>Internal Compiler SourceError: stage {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0586">
            <summary><para>C&#9839; compiler error &#35;586:</para><para>Internal Compiler SourceError: stage {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0587">
            <summary><para>C&#9839; compiler error &#35;587:</para><para>Internal Compiler SourceError: stage {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0588">
            <summary><para>C&#9839; compiler error &#35;588:</para><para>Internal Compiler SourceError: stage 'LEX'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0589">
            <summary><para>C&#9839; compiler error &#35;589:</para><para>Internal Compiler SourceError: stage 'PARSE'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0590">
            <summary><para>C&#9839; compiler error &#35;590:</para><para>User-defined operators cannot return void</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0591">
            <summary><para>C&#9839; compiler error &#35;591:</para><para>Invalid value for argument to {0} attribute</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0592">
            <summary><para>C&#9839; compiler error &#35;592:</para><para>Attribute {0} is not valid on this declaration type. It is valid on {1} declarations only.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0594">
            <summary><para>C&#9839; compiler error &#35;594:</para><para>Floating-point constant is outside the range of type {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0596">
            <summary><para>C&#9839; compiler error &#35;596:</para><para>The Guid attribute must be specified with the ComImport attribute</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0599">
            <summary><para>C&#9839; compiler error &#35;599:</para><para>Invalid value for named attribute argument {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0601">
            <summary><para>C&#9839; compiler error &#35;601:</para><para>The DllImport attribute must be specified on a method marked 'static' and 'extern'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0609">
            <summary><para>C&#9839; compiler error &#35;609:</para><para>Cannot set the IndexerName attribute on an indexer marked override</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0610">
            <summary><para>C&#9839; compiler error &#35;610:</para><para>Field or property cannot be of type {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0611">
            <summary><para>C&#9839; compiler error &#35;611:</para><para>Array elements cannot be of type {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0616">
            <summary><para>C&#9839; compiler error &#35;616:</para><para>{0} is not an attribute class</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0617">
            <summary><para>C&#9839; compiler error &#35;617:</para><para>{0} is not a valid named attribute argument because it is not a valid attribute parameter type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0619">
            <summary><para>C&#9839; compiler error &#35;619:</para><para>{0} is obsolete: {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0620">
            <summary><para>C&#9839; compiler error &#35;620:</para><para>Indexers cannot have void type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0621">
            <summary><para>C&#9839; compiler error &#35;621:</para><para>{0} : virtual or abstract members cannot be private</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0622">
            <summary><para>C&#9839; compiler error &#35;622:</para><para>Can only use array initializer expressions to assign to array types. Try using a new expression instead.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0623">
            <summary><para>C&#9839; compiler error &#35;623:</para><para>Array initializers can only be used in a variable or field initializer. Try using a new expression instead.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0625">
            <summary><para>C&#9839; compiler error &#35;625:</para><para>{0}: instance field types marked with StructLayout(LayoutKind.Explicit) must have a FieldOffset attribute</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0629">
            <summary><para>C&#9839; compiler error &#35;629:</para><para>Conditional member {0} cannot implement interface member {1} in type {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0631">
            <summary><para>C&#9839; compiler error &#35;631:</para><para>ref and out are not valid in this context</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0633">
            <summary><para>C&#9839; compiler error &#35;633:</para><para>The argument to the {0} attribute must be a valid identifier</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0635">
            <summary><para>C&#9839; compiler error &#35;635:</para><para>{0} : System.Interop.UnmanagedType.CustomMarshaller requires named arguments ComType and Marshal</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0636">
            <summary><para>C&#9839; compiler error &#35;636:</para><para>The FieldOffset attribute can only be placed on members of types marked with the StructLayout(LayoutKind.Explicit)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0637">
            <summary><para>C&#9839; compiler error &#35;637:</para><para>The FieldOffset attribute is not allowed on static or const fields</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0641">
            <summary><para>C&#9839; compiler error &#35;641:</para><para>{0} : attribute is only valid on classes derived from System.Attribute</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0643">
            <summary><para>C&#9839; compiler error &#35;643:</para><para>{0} duplicate named attribute argument</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0644">
            <summary><para>C&#9839; compiler error &#35;644:</para><para>{0} cannot derive from special class {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0645">
            <summary><para>C&#9839; compiler error &#35;645:</para><para>Identifier too long</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0646">
            <summary><para>C&#9839; compiler error &#35;646:</para><para>Cannot specify the DefaultMember attribute on a type containing an indexer</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0647">
            <summary><para>C&#9839; compiler error &#35;647:</para><para>SourceError emitting {0} attribute -- {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0648">
            <summary><para>C&#9839; compiler error &#35;648:</para><para>{0} is a type not supported by the language</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0650">
            <summary><para>C&#9839; compiler error &#35;650:</para><para>Bad array declarator: To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0653">
            <summary><para>C&#9839; compiler error &#35;653:</para><para>Cannot apply attribute class {0} because it is abstract</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0655">
            <summary><para>C&#9839; compiler error &#35;655:</para><para>{0} is not a valid named attribute argument because it is not a valid attribute parameter type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0656">
            <summary><para>C&#9839; compiler error &#35;656:</para><para>Missing compiler required member {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0662">
            <summary><para>C&#9839; compiler error &#35;662:</para><para>{0} cannot specify only Out attribute on a ref parameter. Use both In and Out attributes, or neither.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0663">
            <summary><para>C&#9839; compiler error &#35;663:</para><para>Cannot define overloaded methods that differ only on ref and out.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0664">
            <summary><para>C&#9839; compiler error &#35;664:</para><para>Literal of type double cannot be implicitly converted to type {0}; use an {1} suffix to create a literal of this type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0666">
            <summary><para>C&#9839; compiler error &#35;666:</para><para>{0} : new protected member declared in struct</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0667">
            <summary><para>C&#9839; compiler error &#35;667:</para><para>The feature {0} is deprecated. Please use {1} instead.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0668">
            <summary><para>C&#9839; compiler error &#35;668:</para><para>Two indexers have different names; the IndexerName attribute must be used with the same name on every indexer within a type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0669">
            <summary><para>C&#9839; compiler error &#35;669:</para><para>A class with the ComImport attribute cannot have a user-defined constructor</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0670">
            <summary><para>C&#9839; compiler error &#35;670:</para><para>Field cannot have void type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0673">
            <summary><para>C&#9839; compiler error &#35;673:</para><para>System.Void cannot be used from C# -- use typeof(void) to get the void type object.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0674">
            <summary><para>C&#9839; compiler error &#35;674:</para><para>Do not use 'System.ParamArrayMetadatum'. Use the 'params' keyword instead.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0677">
            <summary><para>C&#9839; compiler error &#35;677:</para><para>{0}: a volatile field cannot be of the type {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0678">
            <summary><para>C&#9839; compiler error &#35;678:</para><para>{0}: a field can not be both volatile and readonly</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0681">
            <summary><para>C&#9839; compiler error &#35;681:</para><para>The modifier 'abstract' is not valid on fields. Try using a property instead</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0682">
            <summary><para>C&#9839; compiler error &#35;682:</para><para>{0} cannot implement {1} because it is not supported by the language</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0683">
            <summary><para>C&#9839; compiler error &#35;683:</para><para>{0} explicit method implementation cannot implement {1} because it is an accessor</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0685">
            <summary><para>C&#9839; compiler error &#35;685:</para><para>Conditional member {0} cannot have an out parameter</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0686">
            <summary><para>C&#9839; compiler error &#35;686:</para><para>Accessor {0} cannot implement interface member {1} for type {2}. Use an explicit interface implementation.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0687">
            <summary><para>C&#9839; compiler error &#35;687:</para><para>The namespace alias qualifier '::' always resolves to a type or namespace so is illegal here. Consider using '.' instead.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0689">
            <summary><para>C&#9839; compiler error &#35;689:</para><para>Cannot derive from {0} because it is a type parameter</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0690">
            <summary><para>C&#9839; compiler error &#35;690:</para><para>Input file {0} contains invalid metadata.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0692">
            <summary><para>C&#9839; compiler error &#35;692:</para><para>Duplicate type parameter {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0694">
            <summary><para>C&#9839; compiler error &#35;694:</para><para>GenericParameter parameter {0} has the same name as the containing type, or method</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0695">
            <summary><para>C&#9839; compiler error &#35;695:</para><para>{0} cannot implement both {1} and {1} because they may unify for some type parameter substitutions</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0698">
            <summary><para>C&#9839; compiler error &#35;698:</para><para>A generic type cannot derive from {0} because it is an attribute class</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0699">
            <summary><para>C&#9839; compiler error &#35;699:</para><para>{0} does not define type parameter {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0701">
            <summary><para>C&#9839; compiler error &#35;701:</para><para>{0} is not a valid constraint. A type used as a constraint must be an interface, a non-sealed class or a type parameter.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0702">
            <summary><para>C&#9839; compiler error &#35;702:</para><para>Constraint cannot be special class {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0703">
            <summary><para>C&#9839; compiler error &#35;703:</para><para>Inconsistent accessibility: constraint type {0} is less accessible than {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0704">
            <summary><para>C&#9839; compiler error &#35;704:</para><para>Cannot do member lookup in {0} because it is a type parameter</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0706">
            <summary><para>C&#9839; compiler error &#35;706:</para><para>Invalid constraint type. A type used as a constraint must be an interface, a non-sealed class or a type parameter.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0708">
            <summary><para>C&#9839; compiler error &#35;708:</para><para>{0}: cannot declare instance members in a static class</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0709">
            <summary><para>C&#9839; compiler error &#35;709:</para><para>{0}: cannot derive from static class {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0710">
            <summary><para>C&#9839; compiler error &#35;710:</para><para>Static classes cannot have instance constructors</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0711">
            <summary><para>C&#9839; compiler error &#35;711:</para><para>Static classes cannot contain destructors</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0712">
            <summary><para>C&#9839; compiler error &#35;712:</para><para>Cannot create an instance of the static class {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0713">
            <summary><para>C&#9839; compiler error &#35;713:</para><para>Static class {0} cannot derive from type {1}. Static classes must derive from object.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0714">
            <summary><para>C&#9839; compiler error &#35;714:</para><para>{0} : static classes cannot implement interfaces</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0715">
            <summary><para>C&#9839; compiler error &#35;715:</para><para>{0} : static classes cannot contain user defined operators</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0716">
            <summary><para>C&#9839; compiler error &#35;716:</para><para>Cannot convert to static type {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0717">
            <summary><para>C&#9839; compiler error &#35;717:</para><para>{0}: static classes cannot be used as constraints</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0718">
            <summary><para>C&#9839; compiler error &#35;718:</para><para>{0}: static types cannot be used as type arguments</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0719">
            <summary><para>C&#9839; compiler error &#35;719:</para><para>{0}: array elements cannot be of static type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0720">
            <summary><para>C&#9839; compiler error &#35;720:</para><para>{0}: cannot declare indexers in a static class</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0721">
            <summary><para>C&#9839; compiler error &#35;721:</para><para>{0}: static types cannot be used as parameters</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0722">
            <summary><para>C&#9839; compiler error &#35;722:</para><para>{0}: static types cannot be used as return types</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0723">
            <summary><para>C&#9839; compiler error &#35;723:</para><para>Cannot declare variable of static type {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0724">
            <summary><para>C&#9839; compiler error &#35;724:</para><para>does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0729">
            <summary><para>C&#9839; compiler error &#35;729:</para><para>GenericParameter {0} is defined in this assembly, but a type forwarder is specified for it</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0730">
            <summary><para>C&#9839; compiler error &#35;730:</para><para>Cannot forward type {0} because it is a nested type of {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0731">
            <summary><para>C&#9839; compiler error &#35;731:</para><para>The type forwarder for type {0} in assembly {1} causes a cycle</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0733">
            <summary><para>C&#9839; compiler error &#35;733:</para><para>Cannot forward generic type, {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0734">
            <summary><para>C&#9839; compiler error &#35;734:</para><para>The /moduleassemblyname option may only be specified when building a target type of 'module'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0735">
            <summary><para>C&#9839; compiler error &#35;735:</para><para>Invalid type specified as an argument for TypeForwardedTo attribute</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0736">
            <summary><para>C&#9839; compiler error &#35;736:</para><para>{0} does not implement interface member {1}. {2} cannot implement an interface member because it is static.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0737">
            <summary><para>C&#9839; compiler error &#35;737:</para><para>{0} does not implement interface member {1}. {2} cannot implement an interface member because it is not public.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0738">
            <summary><para>C&#9839; compiler error &#35;738:</para><para>{0} does not implement interface member {1}. {2} cannot implement {1} because it does not have the matching return type of {3}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0739">
            <summary><para>C&#9839; compiler error &#35;739:</para><para>{0} duplicate TypeForwardedToAttribute.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0742">
            <summary><para>C&#9839; compiler error &#35;742:</para><para>A query body must end with a select clause or a group clause</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0743">
            <summary><para>C&#9839; compiler error &#35;743:</para><para>Expected contextual keyword 'on'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0744">
            <summary><para>C&#9839; compiler error &#35;744:</para><para>Expected contextual keyword 'equals'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0745">
            <summary><para>C&#9839; compiler error &#35;745:</para><para>Expected contextual keyword 'by'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0746">
            <summary><para>C&#9839; compiler error &#35;746:</para><para>Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0747">
            <summary><para>C&#9839; compiler error &#35;747:</para><para>Invalid initializer member declarator.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0748">
            <summary><para>C&#9839; compiler error &#35;748:</para><para>Inconsistent lambda parameter usage; all parameter types must either be explicit or implicit.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0750">
            <summary><para>C&#9839; compiler error &#35;750:</para><para>A partial method cannot have access modifiers or the virtual, abstract, override, new, sealed, or extern modifiers.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0751">
            <summary><para>C&#9839; compiler error &#35;751:</para><para>A partial method must be declared in a partial class or partial struct</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0752">
            <summary><para>C&#9839; compiler error &#35;752:</para><para>A partial method cannot have out parameters</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0753">
            <summary><para>C&#9839; compiler error &#35;753:</para><para>Only methods, classes, structs, or interfaces may be partial.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0754">
            <summary><para>C&#9839; compiler error &#35;754:</para><para>A partial method may not explicitly implement an interface method.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0755">
            <summary><para>C&#9839; compiler error &#35;755:</para><para>Both partial method declarations must be extension methods or neither may be an extension method.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0756">
            <summary><para>C&#9839; compiler error &#35;756:</para><para>A partial method may not have multiple defining declarations.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0757">
            <summary><para>C&#9839; compiler error &#35;757:</para><para>A partial method may not have multiple implementing declarations.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0758">
            <summary><para>C&#9839; compiler error &#35;758:</para><para>Both partial method declarations must use a params parameter or neither may use a params parameter</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0759">
            <summary><para>C&#9839; compiler error &#35;759:</para><para>No defining declaration found for implementing declaration of partial method {0}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0761">
            <summary><para>C&#9839; compiler error &#35;761:</para><para>Partial method declarations of {0} have inconsistent type parameter constraints.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0762">
            <summary><para>C&#9839; compiler error &#35;762:</para><para>Cannot create delegate from method {0} because it is a partial method without an implementing declaration</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0763">
            <summary><para>C&#9839; compiler error &#35;763:</para><para>Both partial method declarations must be static or neither may be static.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0764">
            <summary><para>C&#9839; compiler error &#35;764:</para><para>Both partial method declarations must be unsafe or neither may be unsafe</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0765">
            <summary><para>C&#9839; compiler error &#35;765:</para><para>Partial methods with only a defining declaration or removed conditional methods cannot be used in expression trees</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0766">
            <summary><para>C&#9839; compiler error &#35;766:</para><para>Partial methods must have a void return type.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0811">
            <summary><para>C&#9839; compiler error &#35;811:</para><para>The fully qualified name for {0} is too long for debug information. Compile without '/debug' option.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0815">
            <summary><para>C&#9839; compiler error &#35;815:</para><para>Cannot assign {0} to an implicitly typed local</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0818">
            <summary><para>C&#9839; compiler error &#35;818:</para><para>Implicitly typed locals must be initialized</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0819">
            <summary><para>C&#9839; compiler error &#35;819:</para><para>Implicitly typed locals cannot have multiple declarators.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0820">
            <summary><para>C&#9839; compiler error &#35;820:</para><para>Cannot assign array initializer to an implicitly typed local</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0821">
            <summary><para>C&#9839; compiler error &#35;821:</para><para>Implicitly typed locals cannot be fixed</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0822">
            <summary><para>C&#9839; compiler error &#35;822:</para><para>Implicitly typed locals cannot be const</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0825">
            <summary><para>C&#9839; compiler error &#35;825:</para><para>The contextual keyword 'var' may only appear within a local variable declaration.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0826">
            <summary><para>C&#9839; compiler error &#35;826:</para><para>No best type found for implicitly typed array.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0828">
            <summary><para>C&#9839; compiler error &#35;828:</para><para>Cannot assign {0} to anonymous type property.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0831">
            <summary><para>C&#9839; compiler error &#35;831:</para><para>An expression tree may not contain a base access.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0832">
            <summary><para>C&#9839; compiler error &#35;832:</para><para>An expression tree may not contain an assignment operator.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0833">
            <summary><para>C&#9839; compiler error &#35;833:</para><para>An anonymous type cannot have multiple properties with the same name.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0834">
            <summary><para>C&#9839; compiler error &#35;834:</para><para>A lambda expression must have an expression body to be converted to an expression tree.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0835">
            <summary><para>C&#9839; compiler error &#35;835:</para><para>Cannot convert lambda to an expression tree whose type argument {0} is not a delegate type.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0836">
            <summary><para>C&#9839; compiler error &#35;836:</para><para>Cannot use anonymous type in a constant expression.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0837">
            <summary><para>C&#9839; compiler error &#35;837:</para><para>The first operand of an 'is' or 'as' operator may not be a lambda expression or anonymous method.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0838">
            <summary><para>C&#9839; compiler error &#35;838:</para><para>An expression tree may not contain a multidimensional array initializer.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0839">
            <summary><para>C&#9839; compiler error &#35;839:</para><para>Argument missing.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0840">
            <summary><para>C&#9839; compiler error &#35;840:</para><para>{0} must declare a body because it is not marked abstract or extern. Automatically implemented properties must define both get and set accessors.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0841">
            <summary><para>C&#9839; compiler error &#35;841:</para><para>Cannot use variable {0} before it is declared.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0842">
            <summary><para>C&#9839; compiler error &#35;842:</para><para>Automatically implemented properties cannot be used inside a type marked with StructLayout(LayoutKind.Explicit).</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0843">
            <summary><para>C&#9839; compiler error &#35;843:</para><para>Backing field for automatically implemented property {0} must be fully assigned before control is returned to the caller. Consider calling the default constructor from a constructor initializer.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0844">
            <summary><para>C&#9839; compiler error &#35;844:</para><para>Cannot use local variable {0} before it is declared. The declaration of the local variable hides the field {1}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS0845">
            <summary><para>C&#9839; compiler error &#35;845:</para><para>An expression tree lambda may not contain a coalescing operator with a null literal left-hand side.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1001">
            <summary><para>C&#9839; compiler error &#35;1001:</para><para>Identifier expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1002">
            <summary><para>C&#9839; compiler error &#35;1002:</para><para>; expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1003">
            <summary><para>C&#9839; compiler error &#35;1003:</para><para>Syntax error, 'char' expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1004">
            <summary><para>C&#9839; compiler error &#35;1004:</para><para>Duplicate {0} modifier</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1007">
            <summary><para>C&#9839; compiler error &#35;1007:</para><para>Property accessor already defined</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1008">
            <summary><para>C&#9839; compiler error &#35;1008:</para><para>GenericParameter byte, sbyte, short, ushort, int, uint, long, or ulong expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1009">
            <summary><para>C&#9839; compiler error &#35;1009:</para><para>Unrecognized escape sequence</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1010">
            <summary><para>C&#9839; compiler error &#35;1010:</para><para>Newline in constant</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1011">
            <summary><para>C&#9839; compiler error &#35;1011:</para><para>Empty character literal</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1012">
            <summary><para>C&#9839; compiler error &#35;1012:</para><para>Too many characters in character literal</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1013">
            <summary><para>C&#9839; compiler error &#35;1013:</para><para>Invalid number</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1014">
            <summary><para>C&#9839; compiler error &#35;1014:</para><para>A get or set accessor expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1015">
            <summary><para>C&#9839; compiler error &#35;1015:</para><para>An object, string, or class type expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1016">
            <summary><para>C&#9839; compiler error &#35;1016:</para><para>Named attribute argument expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1017">
            <summary><para>C&#9839; compiler error &#35;1017:</para><para>Catch clauses cannot follow the general catch clause of a try statement</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1018">
            <summary><para>C&#9839; compiler error &#35;1018:</para><para>Keyword 'this' or 'base' expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1019">
            <summary><para>C&#9839; compiler error &#35;1019:</para><para>Overloadable unary operator expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1020">
            <summary><para>C&#9839; compiler error &#35;1020:</para><para>Overloadable binary operator expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1021">
            <summary><para>C&#9839; compiler error &#35;1021:</para><para>Integral constant is too large</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1022">
            <summary><para>C&#9839; compiler error &#35;1022:</para><para>GenericParameter or namespace definition, or end-of-file expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1023">
            <summary><para>C&#9839; compiler error &#35;1023:</para><para>Embedded statement cannot be a declaration or labeled statement</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1024">
            <summary><para>C&#9839; compiler error &#35;1024:</para><para>Preprocessor directive expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1025">
            <summary><para>C&#9839; compiler error &#35;1025:</para><para>Single-line comment or end-of-line expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1026">
            <summary><para>C&#9839; compiler error &#35;1026:</para><para>) expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1027">
            <summary><para>C&#9839; compiler error &#35;1027:</para><para>#endif directive expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1028">
            <summary><para>C&#9839; compiler error &#35;1028:</para><para>Unexpected preprocessor directive</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1029">
            <summary><para>C&#9839; compiler error &#35;1029:</para><para>#error: {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1031">
            <summary><para>C&#9839; compiler error &#35;1031:</para><para>GenericParameter expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1032">
            <summary><para>C&#9839; compiler error &#35;1032:</para><para>Cannot define/undefine preprocessor symbols after first token in file</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1033">
            <summary><para>C&#9839; compiler error &#35;1033:</para><para>Source file has exceeded the limit of 16,707,565 lines representable in the PDB; debug information will be incorrect</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1034">
            <summary><para>C&#9839; compiler error &#35;1034:</para><para>Compiler limit exceeded: Line cannot exceed 'number' characters</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1035">
            <summary><para>C&#9839; compiler error &#35;1035:</para><para>End-of-file found, '*/' expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1036">
            <summary><para>C&#9839; compiler error &#35;1036:</para><para>( or . expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1037">
            <summary><para>C&#9839; compiler error &#35;1037:</para><para>Overloadable operator expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1038">
            <summary><para>C&#9839; compiler error &#35;1038:</para><para>#endregion directive expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1039">
            <summary><para>C&#9839; compiler error &#35;1039:</para><para>Unterminated string literal</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1040">
            <summary><para>C&#9839; compiler error &#35;1040:</para><para>Preprocessor directives must appear as the first non-whitespace character on a line</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1041">
            <summary><para>C&#9839; compiler error &#35;1041:</para><para>Identifier expected, 'keyword' is a keyword</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1043">
            <summary><para>C&#9839; compiler error &#35;1043:</para><para>{ or ; expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1044">
            <summary><para>C&#9839; compiler error &#35;1044:</para><para>Cannot use more than one type in a for, using, fixed, or declaration statement</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1055">
            <summary><para>C&#9839; compiler error &#35;1055:</para><para>An add or remove accessor expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1056">
            <summary><para>C&#9839; compiler error &#35;1056:</para><para>Unexpected character 'character'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1057">
            <summary><para>C&#9839; compiler error &#35;1057:</para><para>{0}: static classes cannot contain protected members</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1059">
            <summary><para>C&#9839; compiler error &#35;1059:</para><para>The operand of an increment or decrement operator must be a variable, property or indexer.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1061">
            <summary><para>C&#9839; compiler error &#35;1061:</para><para>{0} does not contain a definition for {1} and no extension method {2} accepting a first argument of type {0} could be found (are you missing a using directive or an assembly reference?).</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1100">
            <summary><para>C&#9839; compiler error &#35;1100:</para><para>Method {0} has a parameter modifier 'this' which is not on the first parameter.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1101">
            <summary><para>C&#9839; compiler error &#35;1101:</para><para>The parameter modifier 'ref' cannot be used with 'this'.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1102">
            <summary><para>C&#9839; compiler error &#35;1102:</para><para>The parameter modifier 'out' cannot be used with 'this'.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1103">
            <summary><para>C&#9839; compiler error &#35;1103:</para><para>The first parameter of an extension method cannot be of type {0}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1104">
            <summary><para>C&#9839; compiler error &#35;1104:</para><para>A parameter array cannot be used with 'this' modifier on an extension method.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1105">
            <summary><para>C&#9839; compiler error &#35;1105:</para><para>Extension methods must be static.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1106">
            <summary><para>C&#9839; compiler error &#35;1106:</para><para>Extension methods must be defined in a non generic static class.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1107">
            <summary><para>C&#9839; compiler error &#35;1107:</para><para>A parameter can only have one {0} modifier.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1108">
            <summary><para>C&#9839; compiler error &#35;1108:</para><para>A parameter cannot have all the specified modifiers; there are too many modifiers on the parameter.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1109">
            <summary><para>C&#9839; compiler error &#35;1109:</para><para>Extension Methods must be defined on top level static classes, {0} is a nested class.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1110">
            <summary><para>C&#9839; compiler error &#35;1110:</para><para>Cannot use 'this' modifier on first parameter of method declaration without a reference to System.Core.dll. Add a reference to System.Core.dll or remove 'this' modifier from the method declaration.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1112">
            <summary><para>C&#9839; compiler error &#35;1112:</para><para>Do not use 'System.Runtime.CompilerServices.ExtensionAttribute'. Use the 'this' keyword instead.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1113">
            <summary><para>C&#9839; compiler error &#35;1113:</para><para>Extension methods {0} defined on value type {1} cannot be used to create delegates.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1501">
            <summary><para>C&#9839; compiler error &#35;1501:</para><para>No overload for method {0} takes {1} arguments</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1502">
            <summary><para>C&#9839; compiler error &#35;1502:</para><para>The best overloaded Add method {0} for the collection initializer has some invalid arguments</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1503">
            <summary><para>C&#9839; compiler error &#35;1503:</para><para>The best overloaded Add method {0} for the collection initializer has some invalid arguments</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1504">
            <summary><para>C&#9839; compiler error &#35;1504:</para><para>Source file {0} could not be opened ({1})</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1507">
            <summary><para>C&#9839; compiler error &#35;1507:</para><para>Cannot link resource file {0} when building a module</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1508">
            <summary><para>C&#9839; compiler error &#35;1508:</para><para>Resource identifier {0} has already been used in this assembly</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1509">
            <summary><para>C&#9839; compiler error &#35;1509:</para><para>Referenced file {0} is not an assembly; use '/addmodule' option instead</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1510">
            <summary><para>C&#9839; compiler error &#35;1510:</para><para>A ref or out argument must be an assignable variable</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1511">
            <summary><para>C&#9839; compiler error &#35;1511:</para><para>Keyword 'base' is not available in a static method</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1512">
            <summary><para>C&#9839; compiler error &#35;1512:</para><para>Keyword 'base' is not available in the current context</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1513">
            <summary><para>C&#9839; compiler error &#35;1513:</para><para>} expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1514">
            <summary><para>C&#9839; compiler error &#35;1514:</para><para>{ expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1515">
            <summary><para>C&#9839; compiler error &#35;1515:</para><para>'in' expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1517">
            <summary><para>C&#9839; compiler error &#35;1517:</para><para>Invalid preprocessor expression</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1518">
            <summary><para>C&#9839; compiler error &#35;1518:</para><para>Expected class, delegate, enum, interface, or struct</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1519">
            <summary><para>C&#9839; compiler error &#35;1519:</para><para>Invalid token {0} in class, struct, or interface member declaration</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1520">
            <summary><para>C&#9839; compiler error &#35;1520:</para><para>Method must have a return type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1521">
            <summary><para>C&#9839; compiler error &#35;1521:</para><para>Invalid base type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1524">
            <summary><para>C&#9839; compiler error &#35;1524:</para><para>Expected catch or finally</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1525">
            <summary><para>C&#9839; compiler error &#35;1525:</para><para>Invalid expression term {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1526">
            <summary><para>C&#9839; compiler error &#35;1526:</para><para>A new expression requires (), [], or {} after type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1527">
            <summary><para>C&#9839; compiler error &#35;1527:</para><para>Elements defined in a namespace cannot be explicitly declared as private, protected, or protected internal</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1528">
            <summary><para>C&#9839; compiler error &#35;1528:</para><para>Expected ; or = (cannot specify constructor arguments in declaration)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1529">
            <summary><para>C&#9839; compiler error &#35;1529:</para><para>A using clause must precede all other elements defined in the namespace except extern alias declarations</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1530">
            <summary><para>C&#9839; compiler error &#35;1530:</para><para>Keyword 'new' is not allowed on elements defined in a namespace</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1534">
            <summary><para>C&#9839; compiler error &#35;1534:</para><para>Overloaded binary operator {0} takes two parameters</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1535">
            <summary><para>C&#9839; compiler error &#35;1535:</para><para>Overloaded unary operator {0} takes one parameter</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1536">
            <summary><para>C&#9839; compiler error &#35;1536:</para><para>Invalid parameter type void</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1537">
            <summary><para>C&#9839; compiler error &#35;1537:</para><para>The using alias {0} appeared previously in this namespace</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1540">
            <summary><para>C&#9839; compiler error &#35;1540:</para><para>Cannot access protected member {0} via a qualifier of type {1}; the qualifier must be of type {2} (or derived from it)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1541">
            <summary><para>C&#9839; compiler error &#35;1541:</para><para>Invalid reference option: {0} — cannot reference directories</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1542">
            <summary><para>C&#9839; compiler error &#35;1542:</para><para>{0} cannot be added to this assembly because it already is an assembly; use '/R' option instead</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1545">
            <summary><para>C&#9839; compiler error &#35;1545:</para><para>Property, indexer, or event {0} is not supported by the language; try directly calling accessor methods {1} or {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1546">
            <summary><para>C&#9839; compiler error &#35;1546:</para><para>Property, indexer, or event {0} is not supported by the language; try directly calling accessor method {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1547">
            <summary><para>C&#9839; compiler error &#35;1547:</para><para>Keyword 'void' cannot be used in this context</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1548">
            <summary><para>C&#9839; compiler error &#35;1548:</para><para>Cryptographic failure while signing assembly {0} — {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1549">
            <summary><para>C&#9839; compiler error &#35;1549:</para><para>Appropriate cryptographic service not found</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1551">
            <summary><para>C&#9839; compiler error &#35;1551:</para><para>Indexers must have at least one parameter</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1552">
            <summary><para>C&#9839; compiler error &#35;1552:</para><para>Array type specifier, [], must appear before parameter name</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1553">
            <summary><para>C&#9839; compiler error &#35;1553:</para><para>Declaration is not valid; use '{0} operator {1} (...' instead</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1554">
            <summary><para>C&#9839; compiler error &#35;1554:</para><para>Declaration is not valid; use '{0} operator {1} (...' instead</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1555">
            <summary><para>C&#9839; compiler error &#35;1555:</para><para>Could not find {0} specified for Main method</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1556">
            <summary><para>C&#9839; compiler error &#35;1556:</para><para>{0} specified for Main method must be a valid class or struct</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1557">
            <summary><para>C&#9839; compiler error &#35;1557:</para><para>Cannot use {0} for Main method because it is in a different output file</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1558">
            <summary><para>C&#9839; compiler error &#35;1558:</para><para>{0} does not have a suitable static Main method</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1559">
            <summary><para>C&#9839; compiler error &#35;1559:</para><para>Cannot use {0} for Main method because it is imported</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1560">
            <summary><para>C&#9839; compiler error &#35;1560:</para><para>Invalid filename specified for preprocessor directive. Filename is too long or not a valid filename</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1561">
            <summary><para>C&#9839; compiler error &#35;1561:</para><para>Output filename is too long or invalid</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1562">
            <summary><para>C&#9839; compiler error &#35;1562:</para><para>Outputs without source must have the /out option specified</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1563">
            <summary><para>C&#9839; compiler error &#35;1563:</para><para>Output {0} does not have any source files</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1564">
            <summary><para>C&#9839; compiler error &#35;1564:</para><para>Conflicting options specified: Win32 resource file; Win32 manifest.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1565">
            <summary><para>C&#9839; compiler error &#35;1565:</para><para>Conflicting options specified: Win32 resource file; Win32 icon</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1566">
            <summary><para>C&#9839; compiler error &#35;1566:</para><para>SourceError reading resource file {0} — {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1567">
            <summary><para>C&#9839; compiler error &#35;1567:</para><para>SourceError generating Win32 resource: {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1569">
            <summary><para>C&#9839; compiler error &#35;1569:</para><para>SourceError generating XML documentation file {0} ({1})</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1575">
            <summary><para>C&#9839; compiler error &#35;1575:</para><para>A stackalloc expression requires [] after type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1576">
            <summary><para>C&#9839; compiler error &#35;1576:</para><para>The line number specified for #line directive is missing or invalid</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1577">
            <summary><para>C&#9839; compiler error &#35;1577:</para><para>Assembly generation failed — reason</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1578">
            <summary><para>C&#9839; compiler error &#35;1578:</para><para>Filename, single-line comment or end-of-line expected</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1579">
            <summary><para>C&#9839; compiler error &#35;1579:</para><para>foreach statement cannot operate on variables of type {0} because {1} does not contain a public definition for {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1583">
            <summary><para>C&#9839; compiler error &#35;1583:</para><para>{0} is not a valid Win32 resource file</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1585">
            <summary><para>C&#9839; compiler error &#35;1585:</para><para>Member modifier {0} must precede the member type and name</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1586">
            <summary><para>C&#9839; compiler error &#35;1586:</para><para>Array creation must have array size or array initializer</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1588">
            <summary><para>C&#9839; compiler error &#35;1588:</para><para>Cannot determine common language runtime directory -- {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1593">
            <summary><para>C&#9839; compiler error &#35;1593:</para><para>Delegate {0} does not take {1} arguments</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1594">
            <summary><para>C&#9839; compiler error &#35;1594:</para><para>Delegate {0} has some invalid arguments</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1597">
            <summary><para>C&#9839; compiler error &#35;1597:</para><para>Semicolon after method or accessor block is not valid</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1599">
            <summary><para>C&#9839; compiler error &#35;1599:</para><para>Method or delegate cannot return type {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1600">
            <summary><para>C&#9839; compiler error &#35;1600:</para><para>Compilation cancelled by user</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1601">
            <summary><para>C&#9839; compiler error &#35;1601:</para><para>Method or delegate parameter cannot be of type {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1604">
            <summary><para>C&#9839; compiler error &#35;1604:</para><para>Cannot assign to {0} because it is read-only</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1605">
            <summary><para>C&#9839; compiler error &#35;1605:</para><para>Cannot pass {0} as a ref or out argument because it is read-only</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1606">
            <summary><para>C&#9839; compiler error &#35;1606:</para><para>Assembly signing failed; output may not be signed -- {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1608">
            <summary><para>C&#9839; compiler error &#35;1608:</para><para>The Required attribute is not permitted on C# types</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1609">
            <summary><para>C&#9839; compiler error &#35;1609:</para><para>Modifiers cannot be placed on event accessor declarations</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1611">
            <summary><para>C&#9839; compiler error &#35;1611:</para><para>The params parameter cannot be declared as ref or out</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1612">
            <summary><para>C&#9839; compiler error &#35;1612:</para><para>Cannot modify the return value of {0} because it is not a variable</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1613">
            <summary><para>C&#9839; compiler error &#35;1613:</para><para>The managed coclass wrapper class {0} for interface {1} cannot be found (are you missing an assembly reference?)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1614">
            <summary><para>C&#9839; compiler error &#35;1614:</para><para>{0} is ambiguous; between {1} and {2}. use either '@{0}' or '{0}Attribute'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1615">
            <summary><para>C&#9839; compiler error &#35;1615:</para><para>Argument {0} should not be passed with the {1} keyword</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1617">
            <summary><para>C&#9839; compiler error &#35;1617:</para><para>Invalid option {0} for /langversion; must be ISO-1, ISO-2 or Default</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1618">
            <summary><para>C&#9839; compiler error &#35;1618:</para><para>Cannot create delegate with {0} because it has a Conditional attribute</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1619">
            <summary><para>C&#9839; compiler error &#35;1619:</para><para>Cannot create temporary file {0} -- {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1620">
            <summary><para>C&#9839; compiler error &#35;1620:</para><para>Argument {0} must be passed with the {1} keyword</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1621">
            <summary><para>C&#9839; compiler error &#35;1621:</para><para>The yield statement cannot be used inside an anonymous method or lambda expression</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1622">
            <summary><para>C&#9839; compiler error &#35;1622:</para><para>Cannot return a value from an iterator. Use the yield return statement to return a value, or yield break to end the iteration.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1623">
            <summary><para>C&#9839; compiler error &#35;1623:</para><para>Iterators cannot have ref or out parameters</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1624">
            <summary><para>C&#9839; compiler error &#35;1624:</para><para>The body of {0} cannot be an iterator block because {1} is not an iterator interface type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1625">
            <summary><para>C&#9839; compiler error &#35;1625:</para><para>Cannot yield in the body of a finally clause</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1626">
            <summary><para>C&#9839; compiler error &#35;1626:</para><para>Cannot yield a value in the body of a try block with a catch clause</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1627">
            <summary><para>C&#9839; compiler error &#35;1627:</para><para>Expression expected after yield return</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1628">
            <summary><para>C&#9839; compiler error &#35;1628:</para><para>Cannot use ref or out parameter {0} inside an anonymous method, lambda expression, or query expression</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1629">
            <summary><para>C&#9839; compiler error &#35;1629:</para><para>Unsafe code may not appear in iterators</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1630">
            <summary><para>C&#9839; compiler error &#35;1630:</para><para>Invalid option {0} for /errorreport; must be prompt, send, queue, or none</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1631">
            <summary><para>C&#9839; compiler error &#35;1631:</para><para>Cannot yield a value in the body of a catch clause</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1632">
            <summary><para>C&#9839; compiler error &#35;1632:</para><para>Control cannot leave the body of an anonymous method or lambda expression</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1637">
            <summary><para>C&#9839; compiler error &#35;1637:</para><para>Iterators cannot have unsafe parameters or yield types</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1638">
            <summary><para>C&#9839; compiler error &#35;1638:</para><para>{0} is a reserved identifier and cannot be used when ISO language version mode is used</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1639">
            <summary><para>C&#9839; compiler error &#35;1639:</para><para>The managed coclass wrapper class signature {0} for interface {1} is not a valid class name signature</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1640">
            <summary><para>C&#9839; compiler error &#35;1640:</para><para>foreach statement cannot operate on variables of type {0} because it implements multiple instantiations of {1}, try casting to a specific interface instantiation</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1641">
            <summary><para>C&#9839; compiler error &#35;1641:</para><para>A fixed size buffer field must have the array size specifier after the field name</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1642">
            <summary><para>C&#9839; compiler error &#35;1642:</para><para>Fixed size buffer fields may only be members of structs.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1643">
            <summary><para>C&#9839; compiler error &#35;1643:</para><para>Not all code paths return a value in method of type {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1644">
            <summary><para>C&#9839; compiler error &#35;1644:</para><para>Feature {0} is not part of the standardized ISO C# language specification, and may not be accepted by other compilers</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1646">
            <summary><para>C&#9839; compiler error &#35;1646:</para><para>Keyword, identifier, or string expected after verbatim specifier: @</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1647">
            <summary><para>C&#9839; compiler error &#35;1647:</para><para>An expression is too long or complex to compile near {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1648">
            <summary><para>C&#9839; compiler error &#35;1648:</para><para>Members of readonly field {0} cannot be modified (except in a constructor or a variable initializer)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1649">
            <summary><para>C&#9839; compiler error &#35;1649:</para><para>Members of readonly field {0} cannot be passed ref or out (except in a constructor)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1650">
            <summary><para>C&#9839; compiler error &#35;1650:</para><para>Fields of static readonly field {0} cannot be assigned to (except in a static constructor or a variable initializer)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1651">
            <summary><para>C&#9839; compiler error &#35;1651:</para><para>Fields of static readonly field {0} cannot be passed ref or out (except in a static constructor)</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1654">
            <summary><para>C&#9839; compiler error &#35;1654:</para><para>Cannot modify members of {0} because it is a {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1655">
            <summary><para>C&#9839; compiler error &#35;1655:</para><para>Cannot pass fields of {0} as a ref or out argument because it is a {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1656">
            <summary><para>C&#9839; compiler error &#35;1656:</para><para>Cannot assign to {0} because it is a {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1657">
            <summary><para>C&#9839; compiler error &#35;1657:</para><para>Cannot pass {0} as a ref or out argument because {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1660">
            <summary><para>C&#9839; compiler error &#35;1660:</para><para>Cannot convert anonymous method block to type {0} because it is not a delegate type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1661">
            <summary><para>C&#9839; compiler error &#35;1661:</para><para>Cannot convert anonymous method block to delegate type {0} because the specified block's parameter types do not match the delegate parameter types</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1662">
            <summary><para>C&#9839; compiler error &#35;1662:</para><para>Cannot convert anonymous method block to delegate type {0} because some of the return types in the block are not implicitly convertible to the delegate return type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1663">
            <summary><para>C&#9839; compiler error &#35;1663:</para><para>Fixed size buffer type must be one of the following: bool, byte, short, int, long, char, sbyte, ushort, uint, ulong, float or double</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1664">
            <summary><para>C&#9839; compiler error &#35;1664:</para><para>Fixed size buffer of length {0} and type {1} is too big</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1665">
            <summary><para>C&#9839; compiler error &#35;1665:</para><para>Fixed size buffers must have a length greater than zero</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1666">
            <summary><para>C&#9839; compiler error &#35;1666:</para><para>You cannot use fixed size buffers contained in unfixed expressions. Try using the fixed statement.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1667">
            <summary><para>C&#9839; compiler error &#35;1667:</para><para>Attribute {0} is not valid on property or event accessors. It is valid on {1} declarations only.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1670">
            <summary><para>C&#9839; compiler error &#35;1670:</para><para>params is not valid in this context</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1671">
            <summary><para>C&#9839; compiler error &#35;1671:</para><para>A namespace declaration cannot have modifiers or attributes</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1672">
            <summary><para>C&#9839; compiler error &#35;1672:</para><para>Invalid option {0} for /platform; must be anycpu, x86, Itanium or x64</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1673">
            <summary><para>C&#9839; compiler error &#35;1673:</para><para>Anonymous methods, lambda expressions, and query expressions inside structs cannot access instance members of 'this'. Consider copying 'this' to a local variable outside the anonymous method, lambda expression or query expression and using the local instead.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1674">
            <summary><para>C&#9839; compiler error &#35;1674:</para><para>{0}: type used in a using statement must be implicitly convertible to 'System.IDisposable'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1675">
            <summary><para>C&#9839; compiler error &#35;1675:</para><para>Enums cannot have type parameters</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1676">
            <summary><para>C&#9839; compiler error &#35;1676:</para><para>Parameter {0} must be declared with the {1} keyword</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1677">
            <summary><para>C&#9839; compiler error &#35;1677:</para><para>Parameter {0} should not be declared with the {1} keyword</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1678">
            <summary><para>C&#9839; compiler error &#35;1678:</para><para>Parameter {0} is declared as type {1} but should be {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1679">
            <summary><para>C&#9839; compiler error &#35;1679:</para><para>Invalid extern alias for {0}; {1} is not a valid identifier</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1680">
            <summary><para>C&#9839; compiler error &#35;1680:</para><para>Invalid reference alias option: 'alias=' -- missing filename.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1681">
            <summary><para>C&#9839; compiler error &#35;1681:</para><para>You cannot redefine the global extern alias</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1686">
            <summary><para>C&#9839; compiler error &#35;1686:</para><para>Local {0} or its members cannot have their address taken and be used inside an anonymous method or lambda expression</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1688">
            <summary><para>C&#9839; compiler error &#35;1688:</para><para>Cannot convert anonymous method block without a parameter list to delegate type {0} because it has one or more out parameters</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1689">
            <summary><para>C&#9839; compiler error &#35;1689:</para><para>Attribute {0} is only valid on methods or attribute classes</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1703">
            <summary><para>C&#9839; compiler error &#35;1703:</para><para>An assembly with the same simple name {0} has already been imported. Try removing one of the references or sign them to enable side-by-side.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1704">
            <summary><para>C&#9839; compiler error &#35;1704:</para><para>An assembly with the same simple name {0} has already been imported. Try removing one of the references or sign them to enable side-by-side.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1705">
            <summary><para>C&#9839; compiler error &#35;1705:</para><para>Assembly {0} uses {1} which has a higher version than referenced assembly {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1706">
            <summary><para>C&#9839; compiler error &#35;1706:</para><para>Expression cannot contain anonymous methods or lambda expressions</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1708">
            <summary><para>C&#9839; compiler error &#35;1708:</para><para>Fixed size buffers can only be accessed through locals or fields</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1713">
            <summary><para>C&#9839; compiler error &#35;1713:</para><para>Unexpected error building metadata name for type {0} — {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1714">
            <summary><para>C&#9839; compiler error &#35;1714:</para><para>The base class or interface of {0} could not be resolved or is invalid</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1715">
            <summary><para>C&#9839; compiler error &#35;1715:</para><para>{0}: type must be {1} to match overridden member {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1716">
            <summary><para>C&#9839; compiler error &#35;1716:</para><para>Do not use 'System.Runtime.CompilerServices.FixedBuffer' attribute. Use the 'fixed' field modifier instead.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1719">
            <summary><para>C&#9839; compiler error &#35;1719:</para><para>SourceError reading Win32 resource file {0} -- {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1721">
            <summary><para>C&#9839; compiler error &#35;1721:</para><para>Class {0} cannot have multiple base classes: {1} and {2}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1722">
            <summary><para>C&#9839; compiler error &#35;1722:</para><para>Base class {0} must come before any interfaces</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1724">
            <summary><para>C&#9839; compiler error &#35;1724:</para><para>Value specified for the argument to 'System.Runtime.InteropServices.DefaultCharSetAttribute' is not valid</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1725">
            <summary><para>C&#9839; compiler error &#35;1725:</para><para>Friend assembly reference {0} is invalid. InternalsVisibleTo declarations cannot have a version, culture, public key token, or processor architecture specified.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1726">
            <summary><para>C&#9839; compiler error &#35;1726:</para><para>Friend assembly reference {0} is invalid. Strong-name signed assemblies must specify a public key in their InternalsVisibleTo declarations.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1727">
            <summary><para>C&#9839; compiler error &#35;1727:</para><para>Cannot send error report automatically without authorization. Please visit {0} to authorize sending error report.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1728">
            <summary><para>C&#9839; compiler error &#35;1728:</para><para>Cannot bind delegate to {0} because it is a member of {1}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1729">
            <summary><para>C&#9839; compiler error &#35;1729:</para><para>{0} does not contain a constructor that takes {1} arguments.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1730">
            <summary><para>C&#9839; compiler error &#35;1730:</para><para>Assembly and module attributes must precede all other elements defined in a file except using clauses and extern alias declarations.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1731">
            <summary><para>C&#9839; compiler error &#35;1731:</para><para>Cannot convert {0} to delegate because some of the return types in the block are not implicitly convertible to the delegate return type.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1732">
            <summary><para>C&#9839; compiler error &#35;1732:</para><para>Expected parameter.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1733">
            <summary><para>C&#9839; compiler error &#35;1733:</para><para>Expected expression.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1900">
            <summary><para>C&#9839; compiler error &#35;1900:</para><para>SourceWarning level must be in the range 0-4</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1902">
            <summary><para>C&#9839; compiler error &#35;1902:</para><para>Invalid option {0} for /debug; must be full or pdbonly</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1906">
            <summary><para>C&#9839; compiler error &#35;1906:</para><para>Invalid option {0}; Resource visibility must be either 'public' or 'private'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1908">
            <summary><para>C&#9839; compiler error &#35;1908:</para><para>The type of the argument to the DefaultValue attribute must match the parameter type</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1909">
            <summary><para>C&#9839; compiler error &#35;1909:</para><para>The DefaultValue attribute is not applicable on parameters of type {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1910">
            <summary><para>C&#9839; compiler error &#35;1910:</para><para>Argument of type {0} is not applicable for the DefaultValue attribute</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1912">
            <summary><para>C&#9839; compiler error &#35;1912:</para><para>Duplicate initialization of member {0}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1913">
            <summary><para>C&#9839; compiler error &#35;1913:</para><para>Member {0} cannot be initialized. It is not a field or property.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1914">
            <summary><para>C&#9839; compiler error &#35;1914:</para><para>Static field {0} cannot be assigned in an object initializer</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1917">
            <summary><para>C&#9839; compiler error &#35;1917:</para><para>Members of read-only field {0} of type {1} cannot be assigned with an object initializer because it is of a value type.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1918">
            <summary><para>C&#9839; compiler error &#35;1918:</para><para>Members of property {0} of type {1} cannot be assigned with an object initializer because it is of a value type.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1919">
            <summary><para>C&#9839; compiler error &#35;1919:</para><para>Unsafe type {0} cannot be used in object creation.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1920">
            <summary><para>C&#9839; compiler error &#35;1920:</para><para>Element initializer cannot be empty.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1921">
            <summary><para>C&#9839; compiler error &#35;1921:</para><para>The best overloaded method match for {0} has wrong signature for the initializer element. The initializable Add must be an accessible instance method.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1922">
            <summary><para>C&#9839; compiler error &#35;1922:</para><para>Collection initializer requires its type {0} to implement System.Collections.IEnumerable.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1925">
            <summary><para>C&#9839; compiler error &#35;1925:</para><para>Cannot initialize object of type {0} with a collection initializer.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1926">
            <summary><para>C&#9839; compiler error &#35;1926:</para><para>SourceError reading Win32 manifest file {0} -- {1}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1928">
            <summary><para>C&#9839; compiler error &#35;1928:</para><para>{0} does not contain a definition for {1} and the best extension method overload {2} has some invalid arguments.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1929">
            <summary><para>C&#9839; compiler error &#35;1929:</para><para>Instance argument: cannot convert from {0} to {1}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1930">
            <summary><para>C&#9839; compiler error &#35;1930:</para><para>The range variable {0} has already been declared</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1931">
            <summary><para>C&#9839; compiler error &#35;1931:</para><para>The range variable {0} conflicts with a previous declaration of {1}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1932">
            <summary><para>C&#9839; compiler error &#35;1932:</para><para>Cannot assign {0} to a range variable.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1933">
            <summary><para>C&#9839; compiler error &#35;1933:</para><para>Expression cannot contain query expressions</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1934">
            <summary><para>C&#9839; compiler error &#35;1934:</para><para>Could not find an implementation of the query pattern for source type {0}. {1} not found. Consider explicitly specifying the type of the range variable {2}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1935">
            <summary><para>C&#9839; compiler error &#35;1935:</para><para>Could not find an implementation of the query pattern for source type {0}. {1} not found. Are you missing a reference to 'System.Core.dll' or a using directive for 'System.Linq'?</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1936">
            <summary><para>C&#9839; compiler error &#35;1936:</para><para>Could not find an implementation of the query pattern for source type {0}. {1} not found.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1937">
            <summary><para>C&#9839; compiler error &#35;1937:</para><para>The name {0} is not in scope on the left side of 'equals'. Consider swapping the expressions on either side of 'equals'.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1938">
            <summary><para>C&#9839; compiler error &#35;1938:</para><para>The name {0} is not in scope on the right side of 'equals'. Consider swapping the expressions on either side of 'equals'.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1939">
            <summary><para>C&#9839; compiler error &#35;1939:</para><para>Cannot pass the range variable {0} as an out or ref parameter.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1940">
            <summary><para>C&#9839; compiler error &#35;1940:</para><para>Multiple implementations of the query pattern were found for source type {0}. Ambiguous call to {1}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1941">
            <summary><para>C&#9839; compiler error &#35;1941:</para><para>The type of one of the expressions in the {0} clause is incorrect. GenericParameter inference failed in the call to {1}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1942">
            <summary><para>C&#9839; compiler error &#35;1942:</para><para>The type of the expression in the {0} clause is incorrect. GenericParameter inference failed in the call to {1}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1943">
            <summary><para>C&#9839; compiler error &#35;1943:</para><para>An expression of type {0} is not allowed in a subsequent from clause in a query expression with source type {1}. GenericParameter inference failed in the call to {2}.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1944">
            <summary><para>C&#9839; compiler error &#35;1944:</para><para>An expression tree may not contain an unsafe pointer operation</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1945">
            <summary><para>C&#9839; compiler error &#35;1945:</para><para>An expression tree may not contain an anonymous method expression.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1946">
            <summary><para>C&#9839; compiler error &#35;1946:</para><para>An anonymous method expression cannot be converted to an expression tree.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1947">
            <summary><para>C&#9839; compiler error &#35;1947:</para><para>Range variable {0} cannot be assigned to -- it is read only.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1948">
            <summary><para>C&#9839; compiler error &#35;1948:</para><para>The range variable {0} cannot have the same name as a method type parameter</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1949">
            <summary><para>C&#9839; compiler error &#35;1949:</para><para>The contextual keyword 'var' cannot be used in a range variable declaration.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1950">
            <summary><para>C&#9839; compiler error &#35;1950:</para><para>The best overloaded Add method {0} for the collection initializer has some invalid arguments.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1951">
            <summary><para>C&#9839; compiler error &#35;1951:</para><para>An expression tree lambda may not contain an out or ref parameter.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1952">
            <summary><para>C&#9839; compiler error &#35;1952:</para><para>An expression tree lambda may not contain a method with variable arguments</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1953">
            <summary><para>C&#9839; compiler error &#35;1953:</para><para>An expression tree lambda may not contain a method group.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1954">
            <summary><para>C&#9839; compiler error &#35;1954:</para><para>The best overloaded method match {0} for the collection initializer element cannot be used. Collection initializer 'Add' methods cannot have ref or out parameters.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1955">
            <summary><para>C&#9839; compiler error &#35;1955:</para><para>Non-invocable member {0} cannot be used like a method.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1958">
            <summary><para>C&#9839; compiler error &#35;1958:</para><para>Object and collection initializer expressions may not be applied to a delegate creation expression,</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS1959">
            <summary><para>C&#9839; compiler error &#35;1959:</para><para>{0} is of type {1}. The type specified in a constant declaration must be sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, decimal, bool, string, an enum-type, or a reference-type.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2001">
            <summary><para>C&#9839; compiler error &#35;2001:</para><para>Source file {0} could not be found</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2003">
            <summary><para>C&#9839; compiler error &#35;2003:</para><para>Response file {0} included multiple times</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2005">
            <summary><para>C&#9839; compiler error &#35;2005:</para><para>Missing file specification for {0} option</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2006">
            <summary><para>C&#9839; compiler error &#35;2006:</para><para>Command-line syntax error: Missing {0} for {1} option</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2007">
            <summary><para>C&#9839; compiler error &#35;2007:</para><para>Unrecognized command-line option: {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2008">
            <summary><para>C&#9839; compiler error &#35;2008:</para><para>No inputs specified</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2011">
            <summary><para>C&#9839; compiler error &#35;2012:</para><para>Unable to open response file {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2012">
            <summary><para>C&#9839; compiler error &#35;2012:</para><para>Cannot open {0} for writing</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2013">
            <summary><para>C&#9839; compiler error &#35;2013:</para><para>Invalid image base number {0}</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2015">
            <summary><para>C&#9839; compiler error &#35;2015:</para><para>{0} is a binary file instead of a text file</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2016">
            <summary><para>C&#9839; compiler error &#35;2016:</para><para>Code page {0} is invalid or not installed</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2017">
            <summary><para>C&#9839; compiler error &#35;2017:</para><para>Cannot specify /main if building a module or library</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2018">
            <summary><para>C&#9839; compiler error &#35;2018:</para><para>Unable to find messages file 'cscmsgs.dll'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2019">
            <summary><para>C&#9839; compiler error &#35;2019:</para><para>Invalid target type for /target: must specify 'exe', 'winexe', 'library', or 'module'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2020">
            <summary><para>C&#9839; compiler error &#35;2020:</para><para>Only the first set of input files can build a target other than 'module'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2021">
            <summary><para>C&#9839; compiler error &#35;2021:</para><para>File name {0} is too long or invalid</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2022">
            <summary><para>C&#9839; compiler error &#35;2022:</para><para>Options '/out' and '/target' must appear before source file names</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2024">
            <summary><para>C&#9839; compiler error &#35;2024:</para><para>Invalid file section alignment number '#'</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2032">
            <summary><para>C&#9839; compiler error &#35;2032:</para><para>Character {0} is not allowed on the command-line or in response files</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2033">
            <summary><para>C&#9839; compiler error &#35;2033:</para><para>Cannot create short filename {0} when a long filename with the same short filename already exists </para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2034">
            <summary><para>C&#9839; compiler error &#35;2034:</para><para>A /reference option that declares an extern alias can only have one filename. To specify multiple aliases or filenames, use multiple /reference options.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2035">
            <summary><para>C&#9839; compiler error &#35;2035:</para><para>Command-line syntax error: Missing ':&lt;number&gt;' for {0} option</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS2036">
            <summary><para>C&#9839; compiler error &#35;2036:</para><para>The /pdb option requires that the /debug option also be used.</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpCompilerMessages.CS5001">
            <summary><para>C&#9839; compiler error &#35;5001:</para><para>Program {0} does not contain a static 'Main' method suitable for an entry point</para></summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpCompilerReferenceError.MessageIdentifier">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers"/> value unique to the reference message.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpCompilerReferenceWarning.MessageIdentifier">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers"/> value unique to the reference message.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpCompilerReferenceWarning.WarningLevel">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningLevels"/> value indicating how 
            severe the warning is.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0001">
            <summary>
            Internal compiler error
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0003">
            <summary>
            Out of memory
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0004">
            <summary>
            Warning treated as error
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0005">
            <summary>
            Compiler option {0} must be followed by an argument
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0006">
            <summary>
            Metadata file {0} could not be found
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0007">
            <summary>
            Unexpected common language runtime initialization error — {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0008">
            <summary>
            Unexpected error reading metadata from file 'file' — {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0009">
            <summary>
            Metadata file {0} could not be opened — {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0010">
            <summary>
            Unexpected fatal error -- {0}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0011">
            <summary>
            The base class or interface {0} in assembly {1} referenced by type {2} could not be resolved
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0012">
            <summary>
            The type {0} is defined in an assembly that is not referenced. You must add a reference to assembly {1}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0013">
            <summary>
            Unexpected error writing metadata to file {0} -- {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0014">
            <summary>
            Required file {0} could not be found
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0015">
            <summary>
            The name of type {0} is too long
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0016">
            <summary>
            Could not write to output file {0} — {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0017">
            <summary>
            Program {0} has more than one entry point defined. Compile with /main to specify the type that contains the entry point.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0019">
            <summary>
            Operator {0} cannot be applied to operands of type {1} and {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0020">
            <summary>
            Division by constant zero
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0021">
            <summary>
            Cannot apply indexing with [] to an expression of type {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0022">
            <summary>
            Wrong number of indices inside [], expected {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0023">
            <summary>
            Operator {0} cannot be applied to operand of type {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0025">
            <summary>
            Standard library file {0} could not be found
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0026">
            <summary>
            Keyword 'this' is not valid in a static property, static method, or static field initializer
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0027">
            <summary>
            Keyword 'this' is not available in the current context
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0029">
            <summary>
            Cannot implicitly convert type {0} to {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0030">
            <summary>
            Cannot convert type {0} to {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0031">
            <summary>
            Constant value {0} cannot be converted to a {1}. (use 'unchecked' syntax to override)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0034">
            <summary>
            Operator {0} is ambiguous on operands of type {1} and {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0035">
            <summary>
            Operator {0} is ambiguous on an operand of type {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0036">
            <summary>
            An out parameter cannot have the '[In]' attribute
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0037">
            <summary>
            Cannot convert null to {0} because it is a non-nullable value type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0038">
            <summary>
            Cannot access a nonstatic member of outer type {0} via nested type {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0039">
            <summary>
            Cannot convert type {0} to {1} via a reference conversion, boxing conversion, unboxing conversion, wrapping conversion, or null type conversion
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0040">
            <summary>
            Unexpected error creating debug information file — {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0041">
            <summary>
            The fully qualified name for {0} is too long for debug information. Compile without '/debug' option.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0042">
            <summary>
            Unexpected error creating debug information file {0} — {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0043">
            <summary>
            PDB file {0} has an incorrect or out-of-date format. Delete it and rebuild.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0050">
            <summary>
            Inconsistent accessibility: return type {0} is less accessible than method {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0051">
            <summary>
            Inconsistent accessibility: parameter type {0} is less accessible than method {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0052">
            <summary>
            Inconsistent accessibility: field type {0} is less accessible than field {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0053">
            <summary>
            Inconsistent accessibility: property type {0} is less accessible than property {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0054">
            <summary>
            Inconsistent accessibility: indexer return type {0} is less accessible than indexer {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0055">
            <summary>
            Inconsistent accessibility: parameter type {0} is less accessible than indexer {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0056">
            <summary>
            Inconsistent accessibility: return type {0} is less accessible than operator {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0057">
            <summary>
            Inconsistent accessibility: parameter type {0} is less accessible than operator {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0058">
            <summary>
            Inconsistent accessibility: return type {0} is less accessible than delegate {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0059">
            <summary>
            Inconsistent accessibility: parameter type {0} is less accessible than delegate {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0060">
            <summary>
            Inconsistent accessibility: base class {0} is less accessible than class {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0061">
            <summary>
            Inconsistent accessibility: base interface {0} is less accessible than interface {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0065">
            <summary>
            {0}: event property must have both add and remove accessors
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0066">
            <summary>
            {0}: event must be of a delegate type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0068">
            <summary>
            {0}: event in interface cannot have initializer
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0069">
            <summary>
            An event in an interface cannot have add or remove accessors
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0070">
            <summary>
            The event {0} can only appear on the left hand side of += or -= (except when used from within the type {1})
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0071">
            <summary>
            An explicit interface implementation of an event must use event accessor syntax
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0072">
            <summary>
            {0} : cannot override; {1} is not an event
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0073">
            <summary>
            An add or remove accessor must have a body
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0074">
            <summary>
            {0}: abstract event cannot have initializer
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0075">
            <summary>
            To cast a negative value, you must enclose the value in parentheses
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0076">
            <summary>
            The enumerator name 'value__' is reserved and cannot be used
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0077">
            <summary>
            The as operator must be used with a reference type or nullable type ({0} is a non-nullable value type).
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0079">
            <summary>
            The event {0} can only appear on the left hand side of += or -=
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0080">
            <summary>
            Constraints are not allowed on non-generic declarations
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0081">
            <summary>
            Type parameter declaration must be an identifier not a type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0082">
            <summary>
            Type {0} already reserves a member called {1} with the same parameter types
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0100">
            <summary>
            The parameter name {0} is a duplicate
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0101">
            <summary>
            The namespace {0} already contains a definition for {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0102">
            <summary>
            The type {0} already contains a definition for {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0103">
            <summary>
            The name {0} does not exist in the current context
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0104">
            <summary>
            {0} is an ambiguous reference between {1} and {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0106">
            <summary>
            The modifier {0} is not valid for this item
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0107">
            <summary>
            More than one protection modifier
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0110">
            <summary>
            The evaluation of the constant value for {0} involves a circular definition
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0111">
            <summary>
            Type {0} already defines a member called {1} with the same parameter types
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0112">
            <summary>
            A static member {0} cannot be marked as override, virtual or abstract
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0113">
            <summary>
            A member {0} marked as override cannot be marked as new or virtual
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0115">
            <summary>
            {0} : no suitable method found to override
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0116">
            <summary>
            A namespace does not directly contain members such as fields or methods
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0117">
            <summary>
            {0} does not contain a definition for 'identifier'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0118">
            <summary>
            {0} is a {1} but is used like a {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0119">
            <summary>
            {0} is a {1}, which is not valid in the given context.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0120">
            <summary>
            An object reference is required for the nonstatic field, method, or property {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0121">
            <summary>
            The call is ambiguous between the following methods or properties: {0} and {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0122">
            <summary>
            {0} is inaccessible due to its protection level
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0123">
            <summary>
            No overload for {0} matches delegate {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0126">
            <summary>
            An object of a type convertible to {0} is required
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0127">
            <summary>
            Since {0} returns void, a return keyword must not be followed by an object expression
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0128">
            <summary>
            A local variable named {0} is already defined in this scope
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0131">
            <summary>
            The left-hand side of an assignment must be a variable, property or indexer
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0132">
            <summary>
            {0} : a static constructor must be parameterless
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0133">
            <summary>
            The expression being assigned to {0} must be constant
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0134">
            <summary>
            {0} is of type {1}. A const field of a reference type other than string can only be initialized with null.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0135">
            <summary>
            {0} conflicts with the declaration {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0136">
            <summary>
            A local variable named {0} cannot be declared in this scope because it would give a different meaning to {0}, which is already used in a 'parent or current/child' scope to denote something else
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0138">
            <summary>
            A using namespace directive can only be applied to namespaces; {0} is a type not a namespace
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0139">
            <summary>
            No enclosing loop out of which to break or continue
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0140">
            <summary>
            The label {0} is a duplicate
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0143">
            <summary>
            The type {0} has no constructors defined
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0144">
            <summary>
            Cannot create an instance of the abstract class or interface {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0145">
            <summary>
            A const field requires a value to be provided
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0146">
            <summary>
            Circular base class dependency involving {0} and {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0148">
            <summary>
            The delegate {0} does not have a valid constructor
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0149">
            <summary>
            Method name expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0150">
            <summary>
            A constant value is expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0151">
            <summary>
            A value of an integral type expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0152">
            <summary>
            The label {0} already occurs in this switch statement
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0153">
            <summary>
            A goto case is only valid inside a switch statement
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0154">
            <summary>
            The property or indexer 'property' cannot be used in this context because it lacks the get accessor
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0155">
            <summary>
            The type caught or thrown must be derived from System.Exception
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0156">
            <summary>
            A throw statement with no arguments is not allowed in a finally clause that is nested inside the nearest enclosing catch clause
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0157">
            <summary>
            Control cannot leave the body of a finally clause
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0158">
            <summary>
            The label {0} shadows another label by the same name in a contained scope
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0159">
            <summary>
            No such label {0} within the scope of the goto statement
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0160">
            <summary>
            A previous catch clause already catches all exceptions of this or of a super type ({0})
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0161">
            <summary>
            {0}: not all code paths return a value
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0163">
            <summary>
            Control cannot fall through from one case label ({0}) to another
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0165">
            <summary>
            Use of unassigned local variable {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0167">
            <summary>
            The delegate {0} is missing the Invoke method
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0170">
            <summary>
            Use of possibly unassigned field {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0171">
            <summary>
            Backing field for automatically implemented property {0} must be fully assigned before control is returned to the caller. Consider calling the default constructor from a constructor initializer.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0172">
            <summary>
            Type of conditional expression cannot be determined because {0} and {1} implicitly convert to one another
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0173">
            <summary>
            Type of conditional expression cannot be determined because there is no implicit conversion between {0} and {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0174">
            <summary>
            A base class is required for a 'base' reference
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0175">
            <summary>
            Use of keyword 'base' is not valid in this context
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0176">
            <summary>
            Static member {0} cannot be accessed with an instance reference; qualify it with a type name instead
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0177">
            <summary>
            The out parameter {0} must be assigned to before control leaves the current method
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0178">
            <summary>
            Invalid rank specifier: expected ',' or ']'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0179">
            <summary>
            {0} cannot be extern and declare a body
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0180">
            <summary>
            {0} cannot be both extern and abstract
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0182">
            <summary>
            An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0185">
            <summary>
            {0} is not a reference type as required by the lock statement
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0186">
            <summary>
            Use of null is not valid in this context 
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0188">
            <summary>
            The 'this' object cannot be used before all of its fields are assigned to
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0191">
            <summary>
            Property or indexer {0} cannot be assigned to -- it is read only
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0192">
            <summary>
            Fields of static readonly field {0} cannot be passed ref or out (except in a static constructor)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0193">
            <summary>
            The * or -> operator must be applied to a pointer
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0196">
            <summary>
            A pointer must be indexed by only one value
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0198">
            <summary>
            Fields of static readonly field {0} cannot be assigned to (except in a static constructor or a variable initializer)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0199">
            <summary>
            Fields of static readonly field {0} cannot be passed ref or out (except in a static constructor)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0200">
            <summary>
            Property or indexer {0} cannot be assigned to — it is read only
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0201">
            <summary>
            Only assignment, call, increment, decrement, and new object expressions can be used as a statement
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0202">
            <summary>
            foreach requires that the return type {0} of '{1}.GetEnumerator()' must have a suitable public MoveNext method and public Current property
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0204">
            <summary>
            Only 65534 locals are allowed
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0205">
            <summary>
            Cannot call an abstract base member: {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0206">
            <summary>
            A property or indexer may not be passed as an out or ref parameter
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0208">
            <summary>
            Cannot take the address of, get the size of, or declare a pointer to a managed type ({0})
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0209">
            <summary>
            The type of local declared in a fixed statement must be a pointer type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0210">
            <summary>
            You must provide an initializer in a fixed or using statement declaration
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0211">
            <summary>
            Cannot take the address of the given expression
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0212">
            <summary>
            You can only take the address of an unfixed expression inside of a fixed statement initializer
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0213">
            <summary>
            You cannot use the fixed statement to take the address of an already fixed expression
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0214">
            <summary>
            Pointers and fixed size buffers may only be used in an unsafe context
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0215">
            <summary>
            The return type of operator True or False must be bool
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0216">
            <summary>
            The operator {0} requires a matching operator {1} to also be defined
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0217">
            <summary>
            In order to be applicable as a short circuit operator a user-defined logical operator ({0}) must have the same return type as the type of its 2 parameters.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0218">
            <summary>
            The type ({0}) must contain declarations of operator true and operator false
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0220">
            <summary>
            The operation overflows at compile time in checked mode
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0221">
            <summary>
            Constant value {0} cannot be converted to a {1} (use 'unchecked' syntax to override)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0225">
            <summary>
            The params parameter must be a single dimensional array
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0226">
            <summary>
            An __arglist expression may only appear inside of a call or new expression.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0227">
            <summary>
            Unsafe code may only appear if compiling with /unsafe
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0228">
            <summary>
            {0} does not contain a definition for {1}, or it is not accessible
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0229">
            <summary>
            Ambiguity between {0} and {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0230">
            <summary>
            Type and identifier are both required in a foreach statement
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0231">
            <summary>
            A params parameter must be the last parameter in a formal parameter list.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0233">
            <summary>
            {0} does not have a predefined size, therefore sizeof can only be used in an unsafe context (consider using System.Runtime.InteropServices.Marshal.SizeOf)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0234">
            <summary>
            The type or namespace name {0} does not exist in the namespace {1} (are you missing an assembly reference?)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0236">
            <summary>
            A field initializer cannot reference the nonstatic field, method, or property {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0238">
            <summary>
            {0} cannot be sealed because it is not an override
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0239">
            <summary>
            {0} : cannot override inherited member {1} because it is sealed
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0241">
            <summary>
            Default parameter specifiers are not permitted
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0242">
            <summary>
            The operation in question is undefined on void pointers
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0243">
            <summary>
            The Conditional attribute is not valid on 'method' because it is an override method
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0244">
            <summary>
            Neither 'is' nor 'as' is valid on pointer types
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0245">
            <summary>
            Destructors and object.Finalize cannot be called directly. Consider calling IDisposable.Dispose if available.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0246">
            <summary>
            The type or namespace name {0} could not be found (are you missing a using directive or an assembly reference?)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0247">
            <summary>
            Cannot use a negative size with stackalloc
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0248">
            <summary>
            Cannot create an array with a negative size
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0249">
            <summary>
            Do not override object.Finalize. Instead, provide a destructor.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0250">
            <summary>
            Do not directly call your base class Finalize method. It is called automatically from your destructor.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0254">
            <summary>
            The right hand side of a fixed statement assignment may not be a cast expression
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0255">
            <summary>
            stackalloc may not be used in a catch or finally block
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0260">
            <summary>
            Missing partial modifier on declaration of type {0}; another partial declaration of this type exists
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0261">
            <summary>
            Partial declarations of {0} must be all classes, all structs, or all interfaces
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0262">
            <summary>
            Partial declarations of {0} have conflicting accessibility modifiers
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0263">
            <summary>
            Partial declarations of {0} must not specify different base classes
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0264">
            <summary>
            Partial declarations of {0} must have the same type parameter names in the same order
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0265">
            <summary>
            Partial declarations of {0} have inconsistent constraints for type parameter {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0266">
            <summary>
            Cannot implicitly convert type {0} to {1}. An explicit conversion exists (are you missing a cast?)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0267">
            <summary>
            The partial modifier can only appear immediately before 'class', 'struct', or 'interface'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0268">
            <summary>
            Imported type {0} is invalid. It contains a circular base class dependency.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0269">
            <summary>
            Use of unassigned out parameter {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0270">
            <summary>
            Array size cannot be specified in a variable declaration (try initializing with a 'new' expression)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0271">
            <summary>
            The property or indexer {0} cannot be used in this context because the get accessor is inaccessible
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0272">
            <summary>
            The property or indexer {0} cannot be used in this context because the set accessor is inaccessible
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0273">
            <summary>
            The accessibility modifier of the {0} accessor must be more restrictive than the property or indexer {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0274">
            <summary>
            Cannot specify accessibility modifiers for both accessors of the property or indexer {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0275">
            <summary>
            {0}: accessibility modifiers may not be used on accessors in an interface
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0276">
            <summary>
            {0}: accessibility modifiers on accessors may only be used if the property or indexer has both a get and a set accessor
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0277">
            <summary>
            {0} does not implement interface member {1}. {2} is not public
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0281">
            <summary>
            Friend access was granted to {0}, but the output assembly is named {1}. Try adding a reference to {0} or changing the output assembly name to match.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0283">
            <summary>
            The type {0} cannot be declared const
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0304">
            <summary>
            Cannot create an instance of the variable type {0} because it does not have the new() constraint
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0305">
            <summary>
            Using the generic type {0} requires {1} type arguments
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0306">
            <summary>
            The type {0} may not be used as a type argument
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0307">
            <summary>
            The {0} {1} is not a generic method. If you intended an expression list, use parentheses around the &lt; expression.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0308">
            <summary>
            The non-generic type-or-method {0} cannot be used with type arguments.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0310">
            <summary>
            The type {0} must be a non-abstract type with a public parameterless constructor in order to use it as parameter {1} in the generic type or method {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0311">
            <summary>
            The type {0} cannot be used as type parameter {2} in the generic type or method {3}. There is no implicit reference conversion from {0} to {1}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0312">
            <summary>
            The type {0} cannot be used as type parameter {1} in the generic type or method {2}. The nullable type {0} does not satisfy the constraint of {3}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0313">
            <summary>
            The type {0} cannot be used as type parameter {1} in the generic type or method {2}. The nullable type {0} does not satisfy the constraint of {2}. Nullable types cannot satisfy any interface constraints.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0314">
            <summary>
            The type {0} cannot be used as type parameter {1} in the generic type or method {2}. There is no boxing conversion or type parameter conversion from {3} to {4}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0315">
            <summary>
            The type {0} cannot be used as type parameter '{1}' in the generic type or method '{2}'. There is no boxing conversion from '{3}' to '{4}'.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0316">
            <summary>
            The parameter name {0} conflicts with an automatically-generated parameter name.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0400">
            <summary>
            The type or namespace name {0} could not be found in the global namespace (are you missing an assembly reference?)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0401">
            <summary>
            The new() constraint must be the last constraint specified
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0403">
            <summary>
            Cannot convert null to type parameter {0} because it could be a non-nullable value type. Consider using default({0}) instead.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0404">
            <summary>
            '&lt;' unexpected : attributes cannot be generic
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0405">
            <summary>
            Duplicate constraint {0} for type parameter {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0406">
            <summary>
            The class type constraint {0} must come before any other constraints
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0407">
            <summary>
            {0} has the wrong return type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0409">
            <summary>
            A constraint clause has already been specified for type parameter {0}. All of the constraints for a type parameter must be specified in a single where clause.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0410">
            <summary>
            No overload for {0} has the correct parameter and return types
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0411">
            <summary>
            The type arguments for method {0} cannot be inferred from the usage. Try specifying the type arguments explicitly.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0412">
            <summary>
            {0}: a parameter or local variable cannot have the same name as a method type parameter
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0413">
            <summary>
            The type parameter {0} cannot be used with the 'as' operator because it does not have a class type constraint nor a constraint that is a class
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0415">
            <summary>
            The {0} attribute is valid only on an indexer that is not an explicit interface member declaration
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0416">
            <summary>
            {0}: an attribute argument cannot use type parameters
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0417">
            <summary>
            {0}: cannot provide arguments when creating an instance of a variable type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0418">
            <summary>
            {0}: an abstract class cannot be sealed or static
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0423">
            <summary>
            Since {0} has the ComImport attribute, {1} must be extern or abstract
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0424">
            <summary>
            {0}: a class with the ComImport attribute cannot specify a base class
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0425">
            <summary>
            The constraints for type parameter {0} of method {1} must match the constraints for type parameter {2} of interface method {3}. Consider using an explicit interface implementation instead.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0426">
            <summary>
            The type name {0} does not exist in the type {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0428">
            <summary>
            Cannot convert method group {0} to non-delegate type {1}. Did you intend to invoke the method?
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0430">
            <summary>
            The extern alias {0} was not specified in a /reference option
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0431">
            <summary>
            Cannot use alias {0} with '::' since the alias references a type. Use '.' instead.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0432">
            <summary>
            Alias {0} not found
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0433">
            <summary>
            The type {0} exists in both {1} and {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0434">
            <summary>
            The namespace {0} in {1} conflicts with the type {2} in {3}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0438">
            <summary>
            The type {0} in {1} conflicts with the namespace {2} in {3}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0439">
            <summary>
            An extern alias declaration must precede all other elements defined in the namespace
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0441">
            <summary>
            {0}: a class cannot be both static and sealed
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0442">
            <summary>
            {0}: abstract properties cannot have private accessors
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0443">
            <summary>
            Syntax error, value expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0445">
            <summary>
            Cannot modify the result of an unboxing conversion
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0446">
            <summary>
            Foreach cannot operate on a {0}. Did you intend to invoke the {0}?
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0447">
            <summary>
            Attributes cannot be used on type arguments, only on type parameters
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0448">
            <summary>
            The return type for ++ or -- operator must be the containing type or derived from the containing type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0449">
            <summary>
            The 'class' or 'struct' constraint must come before any other constraints
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0450">
            <summary>
            {0}: cannot specify both a constraint class and the 'class' or 'struct' constraint
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0451">
            <summary>
            The 'new()' constraint cannot be used with the 'struct' constraint
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0452">
            <summary>
            The type {0} must be a reference type in order to use it as parameter {1} in the generic type or method {2}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0453">
            <summary>
            The type {0} must be a non-nullable value type in order to use it as parameter {1} in the generic type or method {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0454">
            <summary>
            Circular constraint dependency involving {0} and {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0455">
            <summary>
            Type parameter {0} inherits conflicting constraints {1} and {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0456">
            <summary>
            Type parameter {0} has the 'struct' constraint so {0} cannot be used as a constraint for {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0457">
            <summary>
            Ambiguous user defined conversions {0} and {1} when converting from {2} to {3}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0459">
            <summary>
            Cannot take the address of a read-only local variable
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0460">
            <summary>
            Constraints for override and explicit interface implementation methods are inherited from the base method, so they cannot be specified directly
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0462">
            <summary>
            The inherited members {0} and {1} have the same signature in type {1}, so they cannot be overridden
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0463">
            <summary>
            Evaluation of the decimal constant expression failed with error: {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0466">
            <summary>
            {0} should not have a params parameter since {1} does not
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0468">
            <summary>
            Ambiguity between type {0} and type {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0470">
            <summary>
            Method {0} cannot implement interface accessor {1} for type {2}. Use an explicit interface implementation.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0471">
            <summary>
            The method [0} is not a generic method. If you intended an expression list, use parentheses around the &lt; expression.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0473">
            <summary>
            Explicit interface implementation {0} matches more than one interface member. Which interface member is actually chosen is implementation-dependent. Consider using a non-explicit implementation instead.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0500">
            <summary>
            {0} cannot declare a body because it is marked abstract
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0501">
            <summary>
            {0} must declare a body because it is not marked abstract, extern, or partial
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0502">
            <summary>
            {0} cannot be both abstract and sealed
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0503">
            <summary>
            The abstract method {0} cannot be marked virtual
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0504">
            <summary>
            The constant {0} cannot be marked static
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0505">
            <summary>
            {0}: cannot override because {1} is not a function
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0506">
            <summary>
            {0} : cannot override inherited member {1} because it is not marked 'virtual', 'abstract', or 'override'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0507">
            <summary>
            {0} : cannot change access modifiers when overriding {1} inherited member {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0508">
            <summary>
            {0}: return type must be {1} to match overridden member {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0509">
            <summary>
            {0} : cannot derive from sealed type {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0513">
            <summary>
            {0} is abstract but it is contained in nonabstract class {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0514">
            <summary>
            {0} : static constructor cannot have an explicit 'this' or 'base' constructor call
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0515">
            <summary>
            {0} : access modifiers are not allowed on static constructors
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0516">
            <summary>
            Constructor {0} can not call itself
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0517">
            <summary>
            {0} has no base class and cannot call a base constructor
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0518">
            <summary>
            Predefined type {0} is not defined or imported
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0520">
            <summary>
            Predefined type {0} is declared incorrectly
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0522">
            <summary>
            {0} : structs cannot call base class constructors
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0523">
            <summary>
            Struct member {0} of type {1} causes a cycle in the struct layout
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0524">
            <summary>
            {0} : interfaces cannot declare types
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0525">
            <summary>
            Interfaces cannot contain fields
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0526">
            <summary>
            Interfaces cannot contain constructors
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0527">
            <summary>
            Type {0} in interface list is not an interface
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0528">
            <summary>
            {0} is already listed in interface list
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0529">
            <summary>
            Inherited interface {0} causes a cycle in the interface hierarchy of {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0531">
            <summary>
            {0} : interface members cannot have a definition
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0533">
            <summary>
            {0} hides inherited abstract member {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0534">
            <summary>
            {0} does not implement inherited abstract member {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0535">
            <summary>
            {0} does not implement interface member {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0537">
            <summary>
            The class System.Object cannot have a base class or implement an interface
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0538">
            <summary>
            {0} in explicit interface declaration is not an interface
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0539">
            <summary>
            {0} in explicit interface declaration is not a member of interface
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0540">
            <summary>
            {0} : containing type does not implement interface {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0541">
            <summary>
            {0} : explicit interface declaration can only be declared in a class or struct
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0542">
            <summary>
            {0} : member names cannot be the same as their enclosing type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0543">
            <summary>
            {0} : the enumerator value is too large to fit in its type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0544">
            <summary>
            {0}: cannot override because {1} is not a property
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0545">
            <summary>
            {0} : cannot override because {1} does not have an overridable get accessor
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0546">
            <summary>
            {0} : cannot override because {1} does not have an overridable set accessor
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0547">
            <summary>
            {0} : property or indexer cannot have void type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0548">
            <summary>
            {0} : property or indexer must have at least one accessor
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0549">
            <summary>
            {0} is a new virtual member in sealed class {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0550">
            <summary>
            {0} adds an accessor not found in interface member {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0551">
            <summary>
            Explicit interface implementation {0} is missing accessor {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0552">
            <summary>
            {0} : user defined conversion to/from interface
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0553">
            <summary>
            {0} : user defined conversion to/from base class
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0554">
            <summary>
            {0} : user defined conversion to/from derived class
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0555">
            <summary>
            User-defined operator cannot take an object of the enclosing type and convert to an object of the enclosing type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0556">
            <summary>
            User-defined conversion must convert to or from the enclosing type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0557">
            <summary>
            Duplicate user-defined conversion in type {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0558">
            <summary>
            User-defined operator {0} must be declared static and public
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0559">
            <summary>
            The parameter type for ++ or -- operator must be the containing type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0562">
            <summary>
            The parameter of a unary operator must be the containing type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0563">
            <summary>
            One of the parameters of a binary operator must be the containing type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0564">
            <summary>
            The first operand of an overloaded shift operator must have the same type as the containing type, and the type of the second operand must be int
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0567">
            <summary>
            Interfaces cannot contain operators
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0568">
            <summary>
            Structs cannot contain explicit parameterless constructors
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0569">
            <summary>
            {1} : cannot override {0} because it is not supported by the language
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0570">
            <summary>
            Property, indexer, or event {0} is not supported by the language; try directly calling accessor method {1}!
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0571">
            <summary>
            {0} : cannot explicitly call operator or accessor
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0572">
            <summary>
            {0} : cannot reference a type through an expression; try {1} instead
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0573">
            <summary>
            {0} : cannot have instance field initializers in structs
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0574">
            <summary>
            Name of destructor must match name of class
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0575">
            <summary>
            Only class types can contain destructors
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0576">
            <summary>
            Namespace {0} contains a definition conflicting with alias {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0577">
            <summary>
            The Conditional attribute is not valid on {0} because it is a constructor, destructor, operator, or explicit interface implementation
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0578">
            <summary>
            The Conditional attribute is not valid on {0} because its return type is not void
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0579">
            <summary>
            Duplicate {0} attribute
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0582">
            <summary>
            The Conditional not valid on interface members
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0583">
            <summary>
            Internal Compiler Error. An internal error has occurred in the compiler. To work around this problem, try simplifying or changing the program near the locations listed below. Locations at the top of the list are closer to the point at which the internal error occurred. Errors such as this can be reported to Microsoft by using the /errorreport option.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0584">
            <summary>
            Internal Compiler Error: stage {0} symbol {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0585">
            <summary>
            Internal Compiler Error: stage {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0586">
            <summary>
            Internal Compiler Error: stage {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0587">
            <summary>
            Internal Compiler Error: stage {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0588">
            <summary>
            Internal Compiler Error: stage 'LEX'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0589">
            <summary>
            Internal Compiler Error: stage 'PARSE'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0590">
            <summary>
            User-defined operators cannot return void
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0591">
            <summary>
            Invalid value for argument to {0} attribute
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0592">
            <summary>
            Attribute {0} is not valid on this declaration type. It is valid on {1} declarations only.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0594">
            <summary>
            Floating-point constant is outside the range of type {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0596">
            <summary>
            The Guid attribute must be specified with the ComImport attribute
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0599">
            <summary>
            Invalid value for named attribute argument {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0601">
            <summary>
            The DllImport attribute must be specified on a method marked 'static' and 'extern'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0609">
            <summary>
            Cannot set the IndexerName attribute on an indexer marked override
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0610">
            <summary>
            Field or property cannot be of type {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0611">
            <summary>
            Array elements cannot be of type {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0616">
            <summary>
            {0} is not an attribute class
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0617">
            <summary>
            {0} is not a valid named attribute argument because it is not a valid attribute parameter type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0619">
            <summary>
            {0} is obsolete: {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0620">
            <summary>
            Indexers cannot have void type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0621">
            <summary>
            {0} : virtual or abstract members cannot be private
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0622">
            <summary>
            Can only use array initializer expressions to assign to array types. Try using a new expression instead.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0623">
            <summary>
            Array initializers can only be used in a variable or field initializer. Try using a new expression instead.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0625">
            <summary>
            {0}: instance field types marked with StructLayout(LayoutKind.Explicit) must have a FieldOffset attribute
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0629">
            <summary>
            Conditional member {0} cannot implement interface member {1} in type {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0631">
            <summary>
            ref and out are not valid in this context
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0633">
            <summary>
            The argument to the {0} attribute must be a valid identifier
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0635">
            <summary>
            {0} : System.Interop.UnmanagedType.CustomMarshaller requires named arguments ComType and Marshal
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0636">
            <summary>
            The FieldOffset attribute can only be placed on members of types marked with the StructLayout(LayoutKind.Explicit)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0637">
            <summary>
            The FieldOffset attribute is not allowed on static or const fields
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0641">
            <summary>
            {0} : attribute is only valid on classes derived from System.Attribute
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0643">
            <summary>
            {0} duplicate named attribute argument
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0644">
            <summary>
            {0} cannot derive from special class {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0645">
            <summary>
            Identifier too long
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0646">
            <summary>
            Cannot specify the DefaultMember attribute on a type containing an indexer
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0647">
            <summary>
            Error emitting {0} attribute -- {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0648">
            <summary>
            {0} is a type not supported by the language
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0650">
            <summary>
            Bad array declarator: To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0653">
            <summary>
            Cannot apply attribute class {0} because it is abstract
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0655">
            <summary>
            {0} is not a valid named attribute argument because it is not a valid attribute parameter type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0656">
            <summary>
            Missing compiler required member {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0662">
            <summary>
            {0} cannot specify only Out attribute on a ref parameter. Use both In and Out attributes, or neither.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0663">
            <summary>
            Cannot define overloaded methods that differ only on ref and out.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0664">
            <summary>
            Literal of type double cannot be implicitly converted to type {0}; use an {1} suffix to create a literal of this type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0666">
            <summary>
            {0} : new protected member declared in struct
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0667">
            <summary>
            The feature {0} is deprecated. Please use {1} instead.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0668">
            <summary>
            Two indexers have different names; the IndexerName attribute must be used with the same name on every indexer within a type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0669">
            <summary>
            A class with the ComImport attribute cannot have a user-defined constructor
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0670">
            <summary>
            Field cannot have void type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0673">
            <summary>
            System.Void cannot be used from C# -- use typeof(void) to get the void type object.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0674">
            <summary>
            Do not use 'System.ParamArrayAttribute'. Use the 'params' keyword instead.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0677">
            <summary>
            {0}: a volatile field cannot be of the type {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0678">
            <summary>
            {0}: a field can not be both volatile and readonly
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0681">
            <summary>
            The modifier 'abstract' is not valid on fields. Try using a property instead
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0682">
            <summary>
            {0} cannot implement {1} because it is not supported by the language
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0683">
            <summary>
            {0} explicit method implementation cannot implement {1} because it is an accessor
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0685">
            <summary>
            Conditional member {0} cannot have an out parameter
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0686">
            <summary>
            Accessor {0} cannot implement interface member {1} for type {2}. Use an explicit interface implementation.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0687">
            <summary>
            The namespace alias qualifier '::' always resolves to a type or namespace so is illegal here. Consider using '.' instead.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0689">
            <summary>
            Cannot derive from {0} because it is a type parameter
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0690">
            <summary>
            Input file {0} contains invalid metadata.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0692">
            <summary>
            Duplicate type parameter {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0694">
            <summary>
            Type parameter {0} has the same name as the containing type, or method
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0695">
            <summary>
            {0} cannot implement both {1} and {1} because they may unify for some type parameter substitutions
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0698">
            <summary>
            A generic type cannot derive from {0} because it is an attribute class
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0699">
            <summary>
            {0} does not define type parameter {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0701">
            <summary>
            {0} is not a valid constraint. A type used as a constraint must be an interface, a non-sealed class or a type parameter.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0702">
            <summary>
            Constraint cannot be special class {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0703">
            <summary>
            Inconsistent accessibility: constraint type {0} is less accessible than {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0704">
            <summary>
            Cannot do member lookup in {0} because it is a type parameter
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0706">
            <summary>
            Invalid constraint type. A type used as a constraint must be an interface, a non-sealed class or a type parameter.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0708">
            <summary>
            {0}: cannot declare instance members in a static class
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0709">
            <summary>
            {0}: cannot derive from static class {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0710">
            <summary>
            Static classes cannot have instance constructors
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0711">
            <summary>
            Static classes cannot contain destructors
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0712">
            <summary>
            Cannot create an instance of the static class {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0713">
            <summary>
            Static class {0} cannot derive from type {1}. Static classes must derive from object.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0714">
            <summary>
            {0} : static classes cannot implement interfaces
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0715">
            <summary>
            {0} : static classes cannot contain user defined operators
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0716">
            <summary>
            Cannot convert to static type {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0717">
            <summary>
            {0}: static classes cannot be used as constraints
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0718">
            <summary>
            {0}: static types cannot be used as type arguments
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0719">
            <summary>
            {0}: array elements cannot be of static type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0720">
            <summary>
            {0}: cannot declare indexers in a static class
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0721">
            <summary>
            {0}: static types cannot be used as parameters
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0722">
            <summary>
            {0}: static types cannot be used as return types
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0723">
            <summary>
            Cannot declare variable of static type {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0724">
            <summary>
            does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0729">
            <summary>
            Type {0} is defined in this assembly, but a type forwarder is specified for it
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0730">
            <summary>
            Cannot forward type {0} because it is a nested type of {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0731">
            <summary>
            The type forwarder for type {0} in assembly {1} causes a cycle
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0733">
            <summary>
            Cannot forward generic type, {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0734">
            <summary>
            The /moduleassemblyname option may only be specified when building a target type of 'module'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0735">
            <summary>
            Invalid type specified as an argument for TypeForwardedTo attribute
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0736">
            <summary>
            {0} does not implement interface member {1}. {2} cannot implement an interface member because it is static.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0737">
            <summary>
            {0} does not implement interface member {1}. {2} cannot implement an interface member because it is not public.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0738">
            <summary>
            {0} does not implement interface member {1}. {2} cannot implement {1} because it does not have the matching return type of {3}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0739">
            <summary>
            {0} duplicate TypeForwardedToAttribute.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0742">
            <summary>
            A query body must end with a select clause or a group clause
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0743">
            <summary>
            Expected contextual keyword 'on'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0744">
            <summary>
            Expected contextual keyword 'equals'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0745">
            <summary>
            Expected contextual keyword 'by'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0746">
            <summary>
            Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0747">
            <summary>
            Invalid initializer member declarator.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0748">
            <summary>
            Inconsistent lambda parameter usage; all parameter types must either be explicit or implicit.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0750">
            <summary>
            A partial method cannot have access modifiers or the virtual, abstract, override, new, sealed, or extern modifiers.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0751">
            <summary>
            A partial method must be declared in a partial class or partial struct
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0752">
            <summary>
            A partial method cannot have out parameters
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0753">
            <summary>
            Only methods, classes, structs, or interfaces may be partial.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0754">
            <summary>
            A partial method may not explicitly implement an interface method.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0755">
            <summary>
            Both partial method declarations must be extension methods or neither may be an extension method.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0756">
            <summary>
            A partial method may not have multiple defining declarations.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0757">
            <summary>
            A partial method may not have multiple implementing declarations.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0758">
            <summary>
            Both partial method declarations must use a params parameter or neither may use a params parameter
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0759">
            <summary>
            No defining declaration found for implementing declaration of partial method {0}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0761">
            <summary>
            Partial method declarations of {0} have inconsistent type parameter constraints.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0762">
            <summary>
            Cannot create delegate from method {0} because it is a partial method without an implementing declaration
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0763">
            <summary>
            Both partial method declarations must be static or neither may be static.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0764">
            <summary>
            Both partial method declarations must be unsafe or neither may be unsafe
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0765">
            <summary>
            Partial methods with only a defining declaration or removed conditional methods cannot be used in expression trees
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0766">
            <summary>
            Partial methods must have a void return type.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0811">
            <summary>
            The fully qualified name for {0} is too long for debug information. Compile without '/debug' option.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0815">
            <summary>
            Cannot assign {0} to an implicitly typed local
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0818">
            <summary>
            Implicitly typed locals must be initialized
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0819">
            <summary>
            Implicitly typed locals cannot have multiple declarators.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0820">
            <summary>
            Cannot assign array initializer to an implicitly typed local
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0821">
            <summary>
            Implicitly typed locals cannot be fixed
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0822">
            <summary>
            Implicitly typed locals cannot be const
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0825">
            <summary>
            The contextual keyword 'var' may only appear within a local variable declaration.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0826">
            <summary>
            No best type found for implicitly typed array.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0828">
            <summary>
            Cannot assign {0} to anonymous type property.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0831">
            <summary>
            An expression tree may not contain a base access.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0832">
            <summary>
            An expression tree may not contain an assignment operator.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0833">
            <summary>
            An anonymous type cannot have multiple properties with the same name.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0834">
            <summary>
            A lambda expression must have an expression body to be converted to an expression tree.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0835">
            <summary>
            Cannot convert lambda to an expression tree whose type argument {0} is not a delegate type.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0836">
            <summary>
            Cannot use anonymous type in a constant expression.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0837">
            <summary>
            The first operand of an 'is' or 'as' operator may not be a lambda expression or anonymous method.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0838">
            <summary>
            An expression tree may not contain a multidimensional array initializer.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0839">
            <summary>
            Argument missing.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0840">
            <summary>
            {0} must declare a body because it is not marked abstract or extern. Automatically implemented properties must define both get and set accessors.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0841">
            <summary>
            Cannot use variable {0} before it is declared.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0842">
            <summary>
            Automatically implemented properties cannot be used inside a type marked with StructLayout(LayoutKind.Explicit).
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0843">
            <summary>
            Backing field for automatically implemented property {0} must be fully assigned before control is returned to the caller. Consider calling the default constructor from a constructor initializer.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0844">
            <summary>
            Cannot use local variable {0} before it is declared. The declaration of the local variable hides the field {0}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS0845">
            <summary>
            An expression tree lambda may not contain a coalescing operator with a null literal left-hand side.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1001">
            <summary>
            Identifier expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1002">
            <summary>
            ; expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1003">
            <summary>
            Syntax error, 'char' expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1004">
            <summary>
            Duplicate {0} modifier
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1007">
            <summary>
            Property accessor already defined
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1008">
            <summary>
            Type byte, sbyte, short, ushort, int, uint, long, or ulong expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1009">
            <summary>
            Unrecognized escape sequence
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1010">
            <summary>
            Newline in constant
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1011">
            <summary>
            Empty character literal
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1012">
            <summary>
            Too many characters in character literal
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1013">
            <summary>
            Invalid number
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1014">
            <summary>
            A get or set accessor expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1015">
            <summary>
            An object, string, or class type expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1016">
            <summary>
            Named attribute argument expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1017">
            <summary>
            Catch clauses cannot follow the general catch clause of a try statement
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1018">
            <summary>
            Keyword 'this' or 'base' expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1019">
            <summary>
            Overloadable unary operator expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1020">
            <summary>
            Overloadable binary operator expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1021">
            <summary>
            Integral constant is too large
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1022">
            <summary>
            Type or namespace definition, or end-of-file expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1023">
            <summary>
            Embedded statement cannot be a declaration or labeled statement
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1024">
            <summary>
            Preprocessor directive expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1025">
            <summary>
            Single-line comment or end-of-line expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1026">
            <summary>
            ) expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1027">
            <summary>
            #endif directive expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1028">
            <summary>
            Unexpected preprocessor directive
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1029">
            <summary>
            #error: {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1031">
            <summary>
            Type expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1032">
            <summary>
            Cannot define/undefine preprocessor symbols after first token in file
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1033">
            <summary>
            Source file has exceeded the limit of 16,707,565 lines representable in the PDB; debug information will be incorrect
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1034">
            <summary>
            Compiler limit exceeded: Line cannot exceed 'number' characters
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1035">
            <summary>
            End-of-file found, '*/' expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1036">
            <summary>
            ( or . expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1037">
            <summary>
            Overloadable operator expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1038">
            <summary>
            #endregion directive expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1039">
            <summary>
            Unterminated string literal
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1040">
            <summary>
            Preprocessor directives must appear as the first non-whitespace character on a line
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1041">
            <summary>
            Identifier expected, 'keyword' is a keyword
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1043">
            <summary>
            { or ; expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1044">
            <summary>
            Cannot use more than one type in a for, using, fixed, or declaration statement
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1055">
            <summary>
            An add or remove accessor expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1056">
            <summary>
            Unexpected character 'character'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1057">
            <summary>
            {0}: static classes cannot contain protected members
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1059">
            <summary>
            The operand of an increment or decrement operator must be a variable, property or indexer.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1061">
            <summary>
            {0} does not contain a definition for {1} and no extension method {2} accepting a first argument of type {0} could be found (are you missing a using directive or an assembly reference?).
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1100">
            <summary>
            Method {0} has a parameter modifier 'this' which is not on the first parameter.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1101">
            <summary>
            The parameter modifier 'ref' cannot be used with 'this'.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1102">
            <summary>
            The parameter modifier 'out' cannot be used with 'this'.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1103">
            <summary>
            The first parameter of an extension method cannot be of type {0}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1104">
            <summary>
            A parameter array cannot be used with 'this' modifier on an extension method.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1105">
            <summary>
            Extension methods must be static.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1106">
            <summary>
            Extension methods must be defined in a non generic static class.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1107">
            <summary>
            A parameter can only have one {0} modifier.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1108">
            <summary>
            A parameter cannot have all the specified modifiers; there are too many modifiers on the parameter.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1109">
            <summary>
            Extension Methods must be defined on top level static classes, {0} is a nested class.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1110">
            <summary>
            Cannot use 'this' modifier on first parameter of method declaration without a reference to System.Core.dll. Add a reference to System.Core.dll or remove 'this' modifier from the method declaration.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1112">
            <summary>
            Do not use 'System.Runtime.CompilerServices.ExtensionAttribute'. Use the 'this' keyword instead.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1113">
            <summary>
            Extension methods {0} defined on value type {1} cannot be used to create delegates.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1501">
            <summary>
            No overload for method {0} takes {1} arguments
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1502">
            <summary>
            The best overloaded Add method {0} for the collection initializer has some invalid arguments
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1503">
            <summary>
            The best overloaded Add method {0} for the collection initializer has some invalid arguments
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1504">
            <summary>
            Source file {0} could not be opened ({1})
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1507">
            <summary>
            Cannot link resource file {0} when building a module
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1508">
            <summary>
            Resource identifier {0} has already been used in this assembly
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1509">
            <summary>
            Referenced file {0} is not an assembly; use '/addmodule' option instead
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1510">
            <summary>
            A ref or out argument must be an assignable variable
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1511">
            <summary>
            Keyword 'base' is not available in a static method
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1512">
            <summary>
            Keyword 'base' is not available in the current context
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1513">
            <summary>
            } expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1514">
            <summary>
            { expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1515">
            <summary>
            'in' expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1517">
            <summary>
            Invalid preprocessor expression
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1518">
            <summary>
            Expected class, delegate, enum, interface, or struct
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1519">
            <summary>
            Invalid token {0} in class, struct, or interface member declaration
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1520">
            <summary>
            Method must have a return type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1521">
            <summary>
            Invalid base type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1524">
            <summary>
            Expected catch or finally
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1525">
            <summary>
            Invalid expression term {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1526">
            <summary>
            A new expression requires (), [], or {} after type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1527">
            <summary>
            Elements defined in a namespace cannot be explicitly declared as private, protected, or protected internal
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1528">
            <summary>
            Expected ; or = (cannot specify constructor arguments in declaration)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1529">
            <summary>
            A using clause must precede all other elements defined in the namespace except extern alias declarations
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1530">
            <summary>
            Keyword 'new' is not allowed on elements defined in a namespace
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1534">
            <summary>
            Overloaded binary operator {0} takes two parameters
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1535">
            <summary>
            Overloaded unary operator {0} takes one parameter
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1536">
            <summary>
            Invalid parameter type void
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1537">
            <summary>
            The using alias {0} appeared previously in this namespace
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1540">
            <summary>
            Cannot access protected member {0} via a qualifier of type {1}; the qualifier must be of type {2} (or derived from it)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1541">
            <summary>
            Invalid reference option: {0} — cannot reference directories
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1542">
            <summary>
            {0} cannot be added to this assembly because it already is an assembly; use '/R' option instead
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1545">
            <summary>
            Property, indexer, or event {0} is not supported by the language; try directly calling accessor methods {1} or {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1546">
            <summary>
            Property, indexer, or event {0} is not supported by the language; try directly calling accessor method {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1547">
            <summary>
            Keyword 'void' cannot be used in this context
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1548">
            <summary>
            Cryptographic failure while signing assembly {0} — {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1549">
            <summary>
            Appropriate cryptographic service not found
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1551">
            <summary>
            Indexers must have at least one parameter
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1552">
            <summary>
            Array type specifier, [], must appear before parameter name
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1553">
            <summary>
            Declaration is not valid; use '{0} operator {1} (...' instead
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1554">
            <summary>
            Declaration is not valid; use '{0} operator {1} (...' instead
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1555">
            <summary>
            Could not find {0} specified for Main method
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1556">
            <summary>
            {0} specified for Main method must be a valid class or struct
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1557">
            <summary>
            Cannot use {0} for Main method because it is in a different output file
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1558">
            <summary>
            {0} does not have a suitable static Main method
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1559">
            <summary>
            Cannot use {0} for Main method because it is imported
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1560">
            <summary>
            Invalid filename specified for preprocessor directive. Filename is too long or not a valid filename
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1561">
            <summary>
            Output filename is too long or invalid
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1562">
            <summary>
            Outputs without source must have the /out option specified
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1563">
            <summary>
            Output {0} does not have any source files
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1564">
            <summary>
            Conflicting options specified: Win32 resource file; Win32 manifest.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1565">
            <summary>
            Conflicting options specified: Win32 resource file; Win32 icon
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1566">
            <summary>
            Error reading resource file {0} — {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1567">
            <summary>
            Error generating Win32 resource: {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1569">
            <summary>
            Error generating XML documentation file {0} ({1})
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1575">
            <summary>
            A stackalloc expression requires [] after type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1576">
            <summary>
            The line number specified for #line directive is missing or invalid
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1577">
            <summary>
            Assembly generation failed — reason
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1578">
            <summary>
            Filename, single-line comment or end-of-line expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1579">
            <summary>
            foreach statement cannot operate on variables of type {0} because {1} does not contain a public definition for {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1583">
            <summary>
            {0} is not a valid Win32 resource file
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1585">
            <summary>
            Member modifier {0} must precede the member type and name
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1586">
            <summary>
            Array creation must have array size or array initializer
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1588">
            <summary>
            Cannot determine common language runtime directory -- {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1593">
            <summary>
            Delegate {0} does not take {1} arguments
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1594">
            <summary>
            Delegate {0} has some invalid arguments
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1597">
            <summary>
            Semicolon after method or accessor block is not valid
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1599">
            <summary>
            Method or delegate cannot return type {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1600">
            <summary>
            Compilation cancelled by user
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1601">
            <summary>
            Method or delegate parameter cannot be of type {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1604">
            <summary>
            Cannot assign to {0} because it is read-only
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1605">
            <summary>
            Cannot pass {0} as a ref or out argument because it is read-only
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1606">
            <summary>
            Assembly signing failed; output may not be signed -- {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1608">
            <summary>
            The Required attribute is not permitted on C# types
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1609">
            <summary>
            Modifiers cannot be placed on event accessor declarations
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1611">
            <summary>
            The params parameter cannot be declared as ref or out
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1612">
            <summary>
            Cannot modify the return value of {0} because it is not a variable
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1613">
            <summary>
            The managed coclass wrapper class {0} for interface {1} cannot be found (are you missing an assembly reference?)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1614">
            <summary>
            {0} is ambiguous; between {1} and {2}. use either '@{0}' or '{0}Attribute'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1615">
            <summary>
            Argument {0} should not be passed with the {1} keyword
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1617">
            <summary>
            Invalid option {0} for /langversion; must be ISO-1, ISO-2 or Default
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1618">
            <summary>
            Cannot create delegate with {0} because it has a Conditional attribute
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1619">
            <summary>
            Cannot create temporary file {0} -- {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1620">
            <summary>
            Argument {0} must be passed with the {1} keyword
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1621">
            <summary>
            The yield statement cannot be used inside an anonymous method or lambda expression
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1622">
            <summary>
            Cannot return a value from an iterator. Use the yield return statement to return a value, or yield break to end the iteration.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1623">
            <summary>
            Iterators cannot have ref or out parameters
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1624">
            <summary>
            The body of {0} cannot be an iterator block because {1} is not an iterator interface type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1625">
            <summary>
            Cannot yield in the body of a finally clause
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1626">
            <summary>
            Cannot yield a value in the body of a try block with a catch clause
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1627">
            <summary>
            Expression expected after yield return
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1628">
            <summary>
            Cannot use ref or out parameter {0} inside an anonymous method, lambda expression, or query expression
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1629">
            <summary>
            Unsafe code may not appear in iterators
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1630">
            <summary>
            Invalid option {0} for /errorreport; must be prompt, send, queue, or none
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1631">
            <summary>
            Cannot yield a value in the body of a catch clause
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1632">
            <summary>
            Control cannot leave the body of an anonymous method or lambda expression
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1637">
            <summary>
            Iterators cannot have unsafe parameters or yield types
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1638">
            <summary>
            {0} is a reserved identifier and cannot be used when ISO language version mode is used
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1639">
            <summary>
            The managed coclass wrapper class signature {0} for interface {1} is not a valid class name signature
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1640">
            <summary>
            foreach statement cannot operate on variables of type {0} because it implements multiple instantiations of {1}, try casting to a specific interface instantiation
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1641">
            <summary>
            A fixed size buffer field must have the array size specifier after the field name
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1642">
            <summary>
            Fixed size buffer fields may only be members of structs.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1643">
            <summary>
            Not all code paths return a value in method of type {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1644">
            <summary>
            Feature {0} is not part of the standardized ISO C# language specification, and may not be accepted by other compilers
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1646">
            <summary>
            Keyword, identifier, or string expected after verbatim specifier: 
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1647">
            <summary>
            An expression is too long or complex to compile near {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1648">
            <summary>
            Members of readonly field {0} cannot be modified (except in a constructor or a variable initializer)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1649">
            <summary>
            Members of readonly field {0} cannot be passed ref or out (except in a constructor)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1650">
            <summary>
            Fields of static readonly field {0} cannot be assigned to (except in a static constructor or a variable initializer)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1651">
            <summary>
            Fields of static readonly field {0} cannot be passed ref or out (except in a static constructor)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1654">
            <summary>
            Cannot modify members of {0} because it is a {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1655">
            <summary>
            Cannot pass fields of {0} as a ref or out argument because it is a {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1656">
            <summary>
            Cannot assign to {0} because it is a {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1657">
            <summary>
            Cannot pass {0} as a ref or out argument because {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1660">
            <summary>
            Cannot convert anonymous method block to type {0} because it is not a delegate type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1661">
            <summary>
            Cannot convert anonymous method block to delegate type {0} because the specified block's parameter types do not match the delegate parameter types
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1662">
            <summary>
            Cannot convert anonymous method block to delegate type {0} because some of the return types in the block are not implicitly convertible to the delegate return type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1663">
            <summary>
            Fixed size buffer type must be one of the following: bool, byte, short, int, long, char, sbyte, ushort, uint, ulong, float or double
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1664">
            <summary>
            Fixed size buffer of length {0} and type {1} is too big
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1665">
            <summary>
            Fixed size buffers must have a length greater than zero
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1666">
            <summary>
            You cannot use fixed size buffers contained in unfixed expressions. Try using the fixed statement.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1667">
            <summary>
            Attribute {0} is not valid on property or event accessors. It is valid on {1} declarations only.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1670">
            <summary>
            params is not valid in this context
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1671">
            <summary>
            A namespace declaration cannot have modifiers or attributes
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1672">
            <summary>
            Invalid option {0} for /platform; must be anycpu, x86, Itanium or x64
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1673">
            <summary>
            Anonymous methods, lambda expressions, and query expressions inside structs cannot access instance members of 'this'. Consider copying 'this' to a local variable outside the anonymous method, lambda expression or query expression and using the local instead.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1674">
            <summary>
            {0}: type used in a using statement must be implicitly convertible to 'System.IDisposable'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1675">
            <summary>
            Enums cannot have type parameters
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1676">
            <summary>
            Parameter {0} must be declared with the {1} keyword
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1677">
            <summary>
            Parameter {0} should not be declared with the {1} keyword
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1678">
            <summary>
            Parameter {0} is declared as type {1} but should be {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1679">
            <summary>
            Invalid extern alias for {0}; {1} is not a valid identifier
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1680">
            <summary>
            Invalid reference alias option: 'alias=' -- missing filename.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1681">
            <summary>
            You cannot redefine the global extern alias
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1686">
            <summary>
            Local {0} or its members cannot have their address taken and be used inside an anonymous method or lambda expression
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1688">
            <summary>
            Cannot convert anonymous method block without a parameter list to delegate type {0} because it has one or more out parameters
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1689">
            <summary>
            Attribute {0} is only valid on methods or attribute classes
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1703">
            <summary>
            An assembly with the same simple name {0} has already been imported. Try removing one of the references or sign them to enable side-by-side.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1704">
            <summary>
            An assembly with the same simple name {0} has already been imported. Try removing one of the references or sign them to enable side-by-side.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1705">
            <summary>
            Assembly {0} uses {1} which has a higher version than referenced assembly {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1706">
            <summary>
            Expression cannot contain anonymous methods or lambda expressions
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1708">
            <summary>
            Fixed size buffers can only be accessed through locals or fields
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1713">
            <summary>
            Unexpected error building metadata name for type {0} — {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1714">
            <summary>
            The base class or interface of {0} could not be resolved or is invalid
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1715">
            <summary>
            {0}: type must be {1} to match overridden member {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1716">
            <summary>
            Do not use 'System.Runtime.CompilerServices.FixedBuffer' attribute. Use the 'fixed' field modifier instead.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1719">
            <summary>
            Error reading Win32 resource file {0} -- {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1721">
            <summary>
            Class {0} cannot have multiple base classes: {1} and {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1722">
            <summary>
            Base class {0} must come before any interfaces
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1724">
            <summary>
            Value specified for the argument to 'System.Runtime.InteropServices.DefaultCharSetAttribute' is not valid
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1725">
            <summary>
            Friend assembly reference {0} is invalid. InternalsVisibleTo declarations cannot have a version, culture, public key token, or processor architecture specified.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1726">
            <summary>
            Friend assembly reference {0} is invalid. Strong-name signed assemblies must specify a public key in their InternalsVisibleTo declarations.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1727">
            <summary>
            Cannot send error report automatically without authorization. Please visit {0} to authorize sending error report.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1728">
            <summary>
            Cannot bind delegate to {0} because it is a member of {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1729">
            <summary>
            {0} does not contain a constructor that takes {1} arguments.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1730">
            <summary>
            Assembly and module attributes must precede all other elements defined in a file except using clauses and extern alias declarations.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1731">
            <summary>
            Cannot convert {0} to delegate because some of the return types in the block are not implicitly convertible to the delegate return type.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1732">
            <summary>
            Expected parameter.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1733">
            <summary>
            Expected expression.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1900">
            <summary>
            Warning level must be in the range 0-4
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1902">
            <summary>
            Invalid option {0} for /debug; must be full or pdbonly
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1906">
            <summary>
            Invalid option {0}; Resource visibility must be either 'public' or 'private'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1908">
            <summary>
            The type of the argument to the DefaultValue attribute must match the parameter type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1909">
            <summary>
            The DefaultValue attribute is not applicable on parameters of type {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1910">
            <summary>
            Argument of type {0} is not applicable for the DefaultValue attribute
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1912">
            <summary>
            Duplicate initialization of member {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1913">
            <summary>
            Member {0} cannot be initialized. It is not a field or property.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1914">
            <summary>
            Static field {0} cannot be assigned in an object initializer
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1917">
            <summary>
            Members of read-only field {0} of type {1} cannot be assigned with an object initializer because it is of a value type.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1918">
            <summary>
            Members of property {0} of type {1} cannot be assigned with an object initializer because it is of a value type.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1919">
            <summary>
            Unsafe type {0} cannot be used in object creation.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1920">
            <summary>
            Element initializer cannot be empty.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1921">
            <summary>
            The best overloaded method match for {0} has wrong signature for the initializer element. The initializable Add must be an accessible instance method.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1922">
            <summary>
            Collection initializer requires its type {0} to implement System.Collections.IEnumerable.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1925">
            <summary>
            Cannot initialize object of type {0} with a collection initializer.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1926">
            <summary>
            Error reading Win32 manifest file {0} -- {1}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1928">
            <summary>
            {0} does not contain a definition for {1} and the best extension method overload {2} has some invalid arguments.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1929">
            <summary>
            Instance argument: cannot convert from {0} to {1}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1930">
            <summary>
            The range variable {0} has already been declared
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1931">
            <summary>
            The range variable {0} conflicts with a previous declaration of {1}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1932">
            <summary>
            Cannot assign {0} to a range variable.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1933">
            <summary>
            Expression cannot contain query expressions
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1934">
            <summary>
            Could not find an implementation of the query pattern for source type {0}. {1} not found. Consider explicitly specifying the type of the range variable {2}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1935">
            <summary>
            Could not find an implementation of the query pattern for source type {0}. {1} not found. Are you missing a reference to 'System.Core.dll' or a using directive for 'System.Linq'?
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1936">
            <summary>
            Could not find an implementation of the query pattern for source type {0}. {1} not found.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1937">
            <summary>
            The name {0} is not in scope on the left side of 'equals'. Consider swapping the expressions on either side of 'equals'.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1938">
            <summary>
            The name {0} is not in scope on the right side of 'equals'. Consider swapping the expressions on either side of 'equals'.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1939">
            <summary>
            Cannot pass the range variable {0} as an out or ref parameter.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1940">
            <summary>
            Multiple implementations of the query pattern were found for source type {0}. Ambiguous call to {1}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1941">
            <summary>
            The type of one of the expressions in the {0} clause is incorrect. Type inference failed in the call to {1}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1942">
            <summary>
            The type of the expression in the {0} clause is incorrect. Type inference failed in the call to {1}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1943">
            <summary>
            An expression of type {0} is not allowed in a subsequent from clause in a query expression with source type {1}. Type inference failed in the call to {2}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1944">
            <summary>
            An expression tree may not contain an unsafe pointer operation
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1945">
            <summary>
            An expression tree may not contain an anonymous method expression.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1946">
            <summary>
            An anonymous method expression cannot be converted to an expression tree.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1947">
            <summary>
            Range variable {0} cannot be assigned to -- it is read only.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1948">
            <summary>
            The range variable {0} cannot have the same name as a method type parameter
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1949">
            <summary>
            The contextual keyword 'var' cannot be used in a range variable declaration.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1950">
            <summary>
            The best overloaded Add method {0} for the collection initializer has some invalid arguments.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1951">
            <summary>
            An expression tree lambda may not contain an out or ref parameter.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1952">
            <summary>
            An expression tree lambda may not contain a method with variable arguments
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1953">
            <summary>
            An expression tree lambda may not contain a method group.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1954">
            <summary>
            The best overloaded method match {0} for the collection initializer element cannot be used. Collection initializer 'Add' methods cannot have ref or out parameters.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1955">
            <summary>
            Non-invocable member {0} cannot be used like a method.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1958">
            <summary>
            Object and collection initializer expressions may not be applied to a delegate creation expression,
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS1959">
            <summary>
            {0} is of type {1}. The type specified in a constant declaration must be sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, decimal, bool, string, an enum-type, or a reference-type.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2001">
            <summary>
            Source file {0} could not be found
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2003">
            <summary>
            Response file {0} included multiple times
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2005">
            <summary>
            Missing file specification for {0} option
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2006">
            <summary>
            Command-line syntax error: Missing {0} for {1} option
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2007">
            <summary>
            Unrecognized command-line option: {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2008">
            <summary>
            No inputs specified
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2011">
            <summary>
            Unable to open response file {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2012">
            <summary>
            Cannot open {0} for writing
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2013">
            <summary>
            Invalid image base number {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2015">
            <summary>
            {0} is a binary file instead of a text file
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2016">
            <summary>
            Code page {0} is invalid or not installed
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2017">
            <summary>
            Cannot specify /main if building a module or library
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2018">
            <summary>
            Unable to find messages file 'cscmsgs.dll'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2019">
            <summary>
            Invalid target type for /target: must specify 'exe', 'winexe', 'library', or 'module'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2020">
            <summary>
            Only the first set of input files can build a target other than 'module'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2021">
            <summary>
            File name {0} is too long or invalid
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2022">
            <summary>
            Options '/out' and '/target' must appear before source file names
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2024">
            <summary>
            Invalid file section alignment number '#'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2032">
            <summary>
            Character {0} is not allowed on the command-line or in response files
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2033">
            <summary>
            Cannot create short filename {0} when a long filename with the same short filename already exists
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2034">
            <summary>
            A /reference option that declares an extern alias can only have one filename. To specify multiple aliases or filenames, use multiple /reference options.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2035">
            <summary>
            >Command-line syntax error: Missing ':&lt;number&gt;' for {0} option
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS2036">
            <summary>
            The /pdb option requires that the /debug option also be used.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpErrorIdentifiers.CS5001">
            <summary>
            Program {0} does not contain a static 'Main' method suitable for an entry point
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage.GetProvider">
            <summary>
            Returns a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider"/> associated to the
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage">C♯ language</see>.
            </summary>
            <returns>A new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider"/> for the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage">C♯ language</see>.</returns>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage.GetProvider(AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguageVersion)">
            <summary>
            Returns a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider"/> associated to the
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage">C♯ language</see> relative
            to the <paramref name="version"/>.
            </summary>
            <param name="version">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguageVersion"/>
            value which denotes what version of the language to return 
            the provider for.</param>
            <returns>A new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider"/> for the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage">C♯ language</see>.</returns>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage.GetProvider(AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguageVersion,AllenCopeland.Abstraction.Slf.Ast.Cli.IIntermediateCliManager)">
            <summary>
            Returns a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider"/> associated to the
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage">C♯ language</see> relative
            to the <paramref name="version"/>.
            </summary>
            <param name="version">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguageVersion"/>
            value which denotes what version of the language to return 
            the provider for.</param>
            <param name="identityManager">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Cli.IIntermediateCliManager"/>
            which is used to marshal type identities in the current type model.</param>
            <returns>A new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider"/> for the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage">C♯ language</see>.</returns>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage.GetProvider(AllenCopeland.Abstraction.Slf.Ast.Cli.IIntermediateCliManager)">
            <summary>
            Returns a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider"/> associated to the
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage">C♯ language</see> relative
            to the current version and the <paramref name="identityManager"/> provided.
            </summary>
            <param name="identityManager">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Cli.IIntermediateCliManager"/>
            which is used to marshal type identities in the current type model.</param>
            <returns>A new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider"/> for the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage">C♯ language</see>.</returns>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage.CreateAssembly(System.String)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpAssembly"/>
            with the <paramref name="name"/> provided.
            </summary>
            <param name="name">The <see cref="T:System.String"/> value
            representing part of the identity of the assembly.</param>
            <returns>A new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpAssembly"/>
            with the <paramref name="name"/> provided.</returns>
            <exception cref="T:System.ArgumentNullException">thrown when 
            <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">thrown when
            <paramref name="name"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage.CreateAssembly(System.String,AllenCopeland.Abstraction.Slf.Ast.Cli.IIntermediateCliManager,AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguageVersion)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Ast.IIntermediateAssembly"/>
            with the <paramref name="name"/> and 
            <paramref name="version"/> provided.
            </summary>
            <param name="name">The <see cref="T:System.String"/> value
            representing part of the identity of the assembly.</param>
            <param name="identityManager">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Cli.IIntermediateCliManager"/>
            which is used to marshal type identities in the current type model.</param>
            <param name="version">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguageVersion"/>
            to which the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpAssembly"/>
            is built against.</param>
            <returns>A new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpAssembly"/>
            with the <paramref name="name"/> and 
            <paramref name="version"/> provided.</returns>
            <exception cref="T:System.ArgumentNullException">thrown when 
            <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">thrown when
            <paramref name="name"/> is <see cref="F:System.String.Empty"/>
            or <paramref name="version"/> is not one of 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguageVersion"/>.</exception>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage.Vendor">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.ILanguageVendor"/> of a particular language.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguage.AutoFormTypes">
            <summary>
            The types which are automatically translated into their
            C&#9839; short forms.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguage.GetProvider">
            <summary>
            Returns a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider"/> associated to the
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguage">C♯ language</see>.
            </summary>
            <returns>A new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider"/> for the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguage">C♯ language</see>.</returns>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguage.GetProvider(AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguageVersion)">
            <summary>
            Returns a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider"/> associated to the
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguage">C♯ language</see> relative
            to the <paramref name="version"/>.
            </summary>
            <param name="version">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguageVersion"/>
            value which denotes what version of the language to return 
            the provider for.</param>
            <returns>A new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider"/> for the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguage">C♯ language</see>.</returns>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguage.CreateAssembly(System.String)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpAssembly"/> with the <paramref name="name"/> provided.
            </summary>
            <param name="name">The <see cref="T:System.String"/> value representing part of the identity of the assembly.</param>
            <returns>A new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpAssembly"/> with the <paramref name="name"/> provided.</returns>
            <exception cref="T:System.ArgumentNullException">thrown when <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">thrown when <paramref name="name"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguage.CreateAssembly(System.String,AllenCopeland.Abstraction.Slf.Ast.Cli.IIntermediateCliManager,AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguageVersion)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Ast.IIntermediateAssembly"/> with the <paramref name="name"/> and 
            <paramref name="version"/> provided.
            </summary>
            <param name="name">The <see cref="T:System.String"/> value representing part of the identity of the assembly.</param>
            <param name="identityManager">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Cli.IIntermediateCliManager"/> which is used to marshal type identities
            in the current type model.</param>
            <param name="version">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguageVersion"/> to which the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpAssembly"/>
            is built against.</param>
            <returns>A new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpAssembly"/>
            with the <paramref name="name"/> and <paramref name="version"/> provided.</returns>
            <exception cref="T:System.ArgumentNullException">thrown when <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">thrown when <paramref name="name"/> is <see cref="F:System.String.Empty"/>
            or <paramref name="version"/> is not one of <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguageVersion"/>.</exception>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguage.Name">
            <summary>
            Returns the <see cref="T:System.String"/> value representing
            the unique name of the language.
            </summary>
            <remarks>Returns "C♯".</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguage.CompilerSupport">
            <summary>
            Returns the level of functionality support the 
            compiler contains.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguage.Versions">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of
            elements which denotes the various 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguageVersion">versions</see> of 
            the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpLanguage">C♯ language</see>.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider">
            <summary>
            Defines properties and methods for working with a 
            provider for the C&#9839; language.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider.CreateAssembly(System.String)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpAssembly"/>
            with the <paramref name="name"/> provided.
            </summary>
            <param name="name">The <see cref="T:System.String"/> value
            representing part of the identity of the assembly.</param>
            <returns>A new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpAssembly"/>
            with the <paramref name="name"/> provided.</returns>
            <exception cref="T:System.ArgumentNullException">thrown when 
            <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">thrown when
            <paramref name="name"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider.Parser">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Parsers.ICSharpParser"/>
            of the current high level language provider instance.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider.CSTTranslator">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpCSTTranslator"/>
            of the current C♯ provider.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider.Language">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpLanguage"/>
            associated to the current C♯ provider.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider.IdentityManager">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Cli.IIntermediateCliManager"/> which marshalls
            the identities of intermediate and non-intermediate (compiled)
            assemblies and types.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.ICSharpProvider.AutoFormTypes">
            <summary>
            Returns the series of types, relative to the active provider context,
            which are auto-form types.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpProvider.IdentityManager">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Cli.IIntermediateCliManager"/> which marshalls
            the identities of intermediate and non-intermediate (compiled)
            assemblies and types.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0028">
            <summary>
            {0} has the wrong signature to be an entry point.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0067">
            <summary>
            The event {0} is never used.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0078">
            <summary>
            The 'l' suffix is easily confused with the digit '1' -- use 'L' for clarity.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0105">
            <summary>
            The using directive for {0} appeared previously in this namespace.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0108">
            <summary>
            {0} hides inherited member {1}. Use the new keyword if hiding was intended.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0109">
            <summary>
            The member {0} does not hide an inherited member. The new keyword is not required.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0114">
            <summary>
            {0} hides inherited member {1}. To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0162">
            <summary>
            Unreachable code detected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0164">
            <summary>
            This label has not been referenced
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0168">
            <summary>
            The variable {0} is assigned but its value is never used
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0169">
            <summary>
            The private field {0} is never used
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0183">
            <summary>
            The given expression is always of the provided ({0}) type.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0184">
            <summary>
            The given expression is never of the provided ({0}) type.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0197">
            <summary>
            Passing {0} as ref or out or taking its address may cause a runtime exception because it is a field of a marshal-by-reference class
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0219">
            <summary>
            The variable {0} is assigned but its value is never used
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0251">
            <summary>
            Indexing an array with a negative index (array indices always start at zero)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0252">
            <summary>
            Possible unintended reference comparison; to get a value comparison, cast the left hand side to type {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0253">
            <summary>
            Possible unintended reference comparison; to get a value comparison, cast the right hand side to type {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0278">
            <summary>
            {0} does not implement the {1} pattern. {2} is ambiguous with {2}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0279">
            <summary>
            {0} does not implement the {1} pattern. {2} is either static or not public.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0280">
            <summary>
            {0} does not implement the {1} pattern. {2} has the wrong signature.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0282">
            <summary>
            There is no defined ordering between fields in multiple declarations of partial class or struct {0}. To specify an ordering, all instance fields must be in the same declaration.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0402">
            <summary>
            {0} : an entry point cannot be generic or in a generic type
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0414">
            <summary>
            The private field {0} is assigned but its value is never used
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0419">
            <summary>
            Ambiguous reference in cref attribute: {0}. Assuming {1}, but could have also matched other overloads including {2}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0420">
            <summary>
            {0}: a reference to a volatile field will not be treated as volatile
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0422">
            <summary>
            The /incremental option is no longer supported
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0429">
            <summary>
            Unreachable expression code detected 
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0435">
            <summary>
            The namespace {0} in {1} conflicts with the imported type {2} in {3}. Using the namespace defined in {1}..
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0436">
            <summary>
            The type {0} in {1} conflicts with the imported type {2} in {3}. Using the type defined in {1}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0437">
            <summary>
            The type {0} in {1} conflicts with the imported namespace {2} in {3}. Using the type defined in {1}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0440">
            <summary>
            Defining an alias named 'global' is ill-advised since 'global::' always references the global namespace and not an alias
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0444">
            <summary>
            Predefined type {0} was not found in {1} but was found in {2}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0458">
            <summary>
            The result of the expression is always 'null' of type {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0464">
            <summary>
            Comparing with null of type {0} always produces 'false'
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0465">
            <summary>
            Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0467">
            <summary>
            Ambiguity between method {0} and non-method {1}. Using method group.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0469">
            <summary>
            The {0} value is not implicitly convertible to type {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0472">
            <summary>
            The result of the expression is always {0} since a value of type {1} is never equal to 'null' of type {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0602">
            <summary>
            The feature {0} is deprecated. Please use {1} instead
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0612">
            <summary>
            {0} is obsolete
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0618">
            <summary>
            {0} is obsolete: {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0626">
            <summary>
            Method, operator, or accessor {0} is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0628">
            <summary>
            {0} : new protected member declared in sealed class
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0642">
            <summary>
            Possible mistaken empty statement
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0649">
            <summary>
            Field {0} is never assigned to, and will always have its default value {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0652">
            <summary>
            Comparison to integral constant is useless; the constant is outside the range of type {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0657">
            <summary>
            {0} is not a valid attribute location for this declaration. Valid attribute locations for this declaration are {1}. All attributes in this block will be ignored.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0658">
            <summary>
            {0} is not a recognized attribute location. All attributes in this block will be ignored.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0659">
            <summary>
            {0} overrides Object.Equals(object o) but does not override Object.GetHashCode()
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0660">
            <summary>
            {0} defines operator == or operator != but does not override Object.Equals(object o)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0661">
            <summary>
            {0} defines operator == or operator != but does not override Object.GetHashCode()
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0665">
            <summary>
            Assignment in conditional expression is always constant; did you mean to use '==' instead of '='?
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0672">
            <summary>
            Member {0} overrides obsolete member '{1}. Add the Obsolete attribute to {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0675">
            <summary>
            Bitwise-or operator used on a sign-extended operand; consider casting to a smaller unsigned type first
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0693">
            <summary>
            Type parameter {0} has the same name as the type parameter from outer type {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0728">
            <summary>
            Possibly incorrect assignment to local {0} which is the argument to a using or lock statement. The Dispose call or unlocking will happen on the original value of the local.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0809">
            <summary>
            Obsolete member {0} overrides non-obsolete member {1}.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS0824">
            <summary>
            Constructor {0} is marked external.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1030">
            <summary>
            #warning: {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1058">
            <summary>
            A previous catch clause already catches all exceptions. All exceptions thrown will be wrapped in a System.Runtime.CompilerServices.RuntimeWrappedException
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1060">
            <summary>
            Use of possibly unassigned field 'name'. Struct instance variables are initially unassigned if struct is unassigned.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1522">
            <summary>
            Empty switch block
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1570">
            <summary>
            XML comment on {0} has badly formed XML — {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1571">
            <summary>
            XML comment on {0} has a duplicate param tag for {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1572">
            <summary>
            XML comment on {0} has a param tag for {1}, but there is no parameter by that name
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1573">
            <summary>
            Parameter {0} has no matching param tag in the XML comment for {0} (but other parameters do)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1574">
            <summary>
            XML comment on {0} has cref attribute {1} that could not be resolved.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1580">
            <summary>
            Invalid type for parameter {0} in XML comment cref attribute
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1581">
            <summary>
            Invalid return type in XML comment cref attribute
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1584">
            <summary>
            XML comment on {0} has syntactically incorrect cref attribute {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1587">
            <summary>
            XML comment is not placed on a valid language element
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1589">
            <summary>
            Unable to include XML fragment {0} of file {1} -- {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1590">
            <summary>
            Invalid XML include element -- Missing file attribute
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1591">
            <summary>
            Missing XML comment for publicly visible type or member {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1592">
            <summary>
            Badly formed XML in included comments file -- {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1598">
            <summary>
            XML parser could not be loaded for the following reason: {0}. The XML documentation file {1} will not be generated.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1607">
            <summary>
            Assembly generation -- {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1610">
            <summary>
            Unable to delete temporary file {0} used for default Win32 resource -- {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1616">
            <summary>
            Option {0} overrides attribute {1} given in a source file or added module
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1633">
            <summary>
            Unrecognized #pragma directive
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1634">
            <summary>
            Expected disable or restore
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1635">
            <summary>
            Cannot restore warning {0} because it was disabled globally
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1645">
            <summary>
            Feature {0} is not part of the standardized ISO C# language specification, and may not be accepted by other compilers
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1658">
            <summary>
            {0}. See also error: {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1668">
            <summary>
            Invalid search path 'path' specified in {0} -- {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1682">
            <summary>
            Reference to type {0} claims it is nested within {1}, but it could not be found
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1683">
            <summary>
            Reference to type {0} claims it is defined in this assembly, but it is not defined in source or any added modules
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1684">
            <summary>
            Reference to type {0} claims it is defined in {1}, but it could not be found
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1685">
            <summary>
            The predefined type {0} is defined in multiple assemblies in the global alias; using definition from {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1687">
            <summary>
            Source file has exceeded the limit of 16,707,565 lines representable in the PDB, debug information will be incorrect
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1690">
            <summary>
            Accessing a member on {0} may cause a runtime exception because it is a field of a marshal-by-reference class
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1691">
            <summary>
            {0} is not a valid warning number
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1692">
            <summary>
            Invalid number
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1694">
            <summary>
            Invalid filename specified for preprocessor directive. Filename is too long or not a valid filename.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1695">
            <summary>
            Invalid #pragma checksum syntax; should be #pragma checksum ""filename"" ""{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}"" ""XXXX...""
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1696">
            <summary>
            Single-line comment or end-of-line expected
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1697">
            <summary>
            Different checksum values given for {0}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1698">
            <summary>
            Circular assembly reference {0} does not match the output assembly name {1}. Try adding a reference to {0} or changing the output assembly name to match.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1699">
            <summary>
            Use command line option {0} or appropriate project settings instead of {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1700">
            <summary>
            Assembly reference Assembly Name is invalid and cannot be resolved
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1701">
            <summary>
            Assuming assembly reference {0} matches {1}, you may need to supply runtime policy 
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1702">
            <summary>
            Assuming assembly reference {0} matches {1}, you may need to supply runtime policy
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1707">
            <summary>
            Delegate {0} bound to {1} instead of {2} because of new language rules
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1709">
            <summary>
            Filename specified for preprocessor directive is empty
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1710">
            <summary>
            XML comment on {0} has a duplicate typeparam tag for {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1711">
            <summary>
            XML comment on {0} has a typeparam tag for {1}, but there is no type parameter by that name
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1712">
            <summary>
            Type parameter {0} has no matching typeparam tag in the XML comment on {1} (but other type parameters do)
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1717">
            <summary>
            Assignment made to same variable; did you mean to assign something else?
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1718">
            <summary>
            Comparison made to same variable; did you mean to compare something else?
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1720">
            <summary>
            Expression will always cause a System.NullReferenceException because the default value of {0} is null
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1723">
            <summary>
            XML comment on {0} has cref attribute {1} that refers to a type parameter
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1911">
            <summary>
            Access to member {0} through a 'base' keyword from an anonymous method, lambda expression, query expression, or iterator results in unverifiable code. Consider moving the access into a helper method on the containing type.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1927">
            <summary>
            Ignoring /win32manifest for module because it only applies to assemblies.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1956">
            <summary>
            Member {0} implements interface member {0} in type {1}. There are multiple matches for the interface member at run-time. It is implementation dependent which method will be called.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS1957">
            <summary>
            Member {0} overrides {1}. There are multiple override candidates at run-time. It is implementation dependent which method will be called.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS2002">
            <summary>
            Source file {0} specified multiple times
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS2014">
            <summary>
            Compiler option {0} is obsolete, please use {1} instead
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS2023">
            <summary>
            Ignoring /noconfig option because it was specified in a response file
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS2029">
            <summary>
            Invalid value for '/define'; {0} is not a valid identifier
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3000">
            <summary>
            Methods with variable arguments are not CLS-compliant
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3001">
            <summary>
            Argument type {0} is not CLS-compliant
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3002">
            <summary>
            Return type of {0} is not CLS-compliant
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3003">
            <summary>
            Type of {0} is not CLS-compliant
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3004">
            <summary>
            Mixed and decomposed Unicode characters are not CLS-compliant
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3005">
            <summary>
            Identifier {0} differing only in case is not CLS-compliant
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3006">
            <summary>
            Overloaded method {0} differing only in ref or out, or in array rank, is not CLS-compliant
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3007">
            <summary>
            Overloaded method {0} differing only by unnamed array types is not CLS-compliant
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3008">
            <summary>
            Identifier {0} differing only in case is not CLS-compliant
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3009">
            <summary>
            {0}: base type {0} is not CLS-compliant
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3010">
            <summary>
            {0}: CLS-compliant interfaces must have only CLS-compliant members
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3011">
            <summary>
            {0}: only CLS-compliant members can be abstract
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3012">
            <summary>
            You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3013">
            <summary>
            Added modules must be marked with the CLSCompliant attribute to match the assembly
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3014">
            <summary>
            {0} does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3015">
            <summary>
            {0} has no accessible constructors which use only CLS-compliant types
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3016">
            <summary>
            Arrays as attribute arguments is not CLS-compliant
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3017">
            <summary>
            You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3018">
            <summary>
            {0} cannot be marked as CLS-Compliant because it is a member of non CLS-compliant type {1}
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3019">
            <summary>
            CLS compliance checking will not be performed on {0} because it is not visible from outside this assembly.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3021">
            <summary>
            {0} does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3022">
            <summary>
            CLSCompliant attribute has no meaning when applied to parameters. Try putting it on the method instead.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3023">
            <summary>
            CLSCompliant attribute has no meaning when applied to return types. Try putting it on the method instead.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3026">
            <summary>
            CLS-compliant field {0} cannot be volatile
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS3027">
            <summary>
            {0} is not CLS-compliant because base interface {1} is not CLS-compliant
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.CSharpWarningIdentifiers.CS5000">
            <summary>
            Unknown compiler option {0}
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression">
            <summary>
            Provides a base implementation of <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAddSubtExpression"/>
            which represents an add or subtract operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionBase.#ctor">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionBase"/> instance
            initialized to a default state.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBinaryOperationExpressionBase`2.leftSide">
            <summary>
            Data member for <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBinaryOperationExpressionBase`2.LeftSide"/>.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBinaryOperationExpressionBase`2.rightSide">
            <summary>
            Data member for <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBinaryOperationExpressionBase`2.RightSide"/>.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBinaryOperationExpressionBase`2.LeftSide">
            <summary>
            Returns the left side of the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBinaryOperationExpressionBase`2"/>.
            </summary>
            <remarks>Can be null if precedence is Left</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBinaryOperationExpressionBase`2.RightSide">
            <summary>
            Returns the right side of the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBinaryOperationExpressionBase`2"/>.
            </summary>
            <remarks>Can be null if precedence is Right</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBinaryOperationExpressionBase`2.Associativity">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity"/> associated to the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBinaryOperationExpressionBase`2"/>.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAddSubtExpression">
            <summary>
            Defines properties and methods for working with an addition or subtraction operation expression.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAddSubtExpression.Operation">
            <summary>
            Returns/sets the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtOperation"/> the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAddSubtExpression"/>
            represents.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression.operation">
            <summary>
            Data member for <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression.Operation"/>.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAddSubtExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtOperation,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpMulDivExpression)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression"/> instance
            with the <paramref name="leftSide"/>, <paramref name="operation"/> and 
            <paramref name="rightSide"/> provided.
            </summary>
            <param name="leftSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAddSubtExpression"/> which makes up the
            left operand.</param>
            <param name="operation">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtOperation"/> that is
            represented by the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression"/>.</param>
            <param name="rightSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpMulDivExpression"/> which makes up the
            right operand.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when <paramref name="operation"/> is
            <see cref="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtOperation.Term"/> or is not one of the other elements in the
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtOperation"/> enumeration.</exception>
            <exception cref="T:System.ArgumentNullException">thrown when <paramref name="leftSide"/>
            is null; or when <paramref name="rightSide"/> is null.</exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpMulDivExpression)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression"/> with the <paramref name="term"/> which will
            be pointed to by the new instance.
            </summary>
            <param name="term">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpMulDivExpression"/> pointed to by the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression"/>.</param>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression.Type">
            <summary>
            Returns the type of expression the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression"/> is.
            </summary>
            <remarks>Returns the appropriate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.ExpressionKind"/> value
            relative to the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtOperation"/>
            of the <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression.Operation"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression.Associativity">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity"/> associated to the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression"/>.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Left"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression.Operation">
            <summary>
            Returns/sets the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtOperation"/> the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtExpression"/>
            represents.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression">
            <summary>
            Provides an expression representing an assignment operation.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAssignExpression">
            <summary>
            Defines properties and methods for an assignment expression.
            </summary>
            <remarks>The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAssignExpression"/> uses
            <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Right"/> recursion.</remarks>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression.operation">
            <summary>
            Data member for <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression"/>.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpConditionalExpression)">
            <summary>
            Creates a new non-operational <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression"/> with the <paramref name="term"/>
            provided.
            </summary>
            <param name="term">The term the non-operational <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression"/>
            points to.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpConditionalExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAssignExpression)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression"/> instance
            with the <paramref name="leftSide"/>, <paramref name="operation"/>
            and <paramref name="rightSide"/> provided.
            </summary>
            <param name="leftSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpConditionalExpression"/> which makes up the
            left operand.</param>
            <param name="operation">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation"/> which indicates the operation
            the current <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression"/> represents.</param>
            <param name="rightSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAssignExpression"/> which makes up the 
            right operand.</param>
            <exception cref="T:System.ArgumentNullException">thrown when <paramref name="leftSide"/> or 
            <paramref name="rightSide"/> is null.</exception>
            <exception cref="T:System.ArgumentException">thrown when <paramref name="leftSide"/> is not
            an <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IAssignTargetExpression"/> when detached.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when <paramref name="operation"/>
            is a value not within the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation"/> enumeration; or when
            <paramref name="operation"/> is <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.Term"/>.</exception>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression.Type">
            <summary>
            Returns the type of expression the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression"/> is.
            </summary>
            <remarks>Returns based upon the <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression.Operation"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression.Associativity">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity"/> associated to the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression"/>.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Right"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression.Operation">
            <summary>
            Returns/sets the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation"/> associated to the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression"/>.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression.ValidAsStatement">
            <summary>
            Returns whether the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAssignExpression"/> is valid as a statement in its 
            current form.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseAndExpression">
            <summary>
            Provides a base implementation of <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseAndExpression"/>; 
            a logical and binary operation (C♯: '&amp;'; VB: "And"; CIL: "and").
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseAndExpression">
            <summary>
            Defines properties and methods for a logical and binary operation (LeftSide &amp; RightSide).
            </summary>
            <remarks>The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseAndExpression"/> uses/has
            <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Left"/> recursion.</remarks>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseAndExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpInequalityExpression)">
            <summary>
            Creates a new non-operational <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseAndExpression"/> with the <paramref name="term"/>
            provided.
            </summary>
            <param name="term">The term the non-operational <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseAndExpression"/>
            points to.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseAndExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseAndExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpInequalityExpression)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseAndExpression"/> with the <paramref name="leftSide"/> and
            <paramref name="rightSide"/> provided.
            </summary>
            <param name="leftSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseAndExpression"/> to evaluate alongside 
            <paramref name="rightSide"/></param>
            <param name="rightSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpInequalityExpression"/> to evaluate
            with <paramref name="leftSide"/>.</param>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseAndExpression.Type">
            <summary>
            Returns the type of expression the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseAndExpression"/> is.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.ExpressionKind.BitwiseAndOperation"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseAndExpression.Associativity">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity"/> associated to the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseAndExpression"/>.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Left"/>.</remarks>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseExclusiveOrExpression">
            <summary>
            Provides a base implementation of <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseExclusiveOrExpression"/>; 
            a logical and binary operation ('^'; "XOr").
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseExclusiveOrExpression">
            <summary>
            Defines properties and methods for working with a logical exclusive or expression (LeftSide ^ RightSide).
            </summary>
            <remarks>The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseExclusiveOrExpression"/> uses/has
            <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Left"/> recursion.</remarks>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseExclusiveOrExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseAndExpression)">
            <summary>
            Creates a new non-operational <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseExclusiveOrExpression"/> with the <paramref name="term"/>
            provided.
            </summary>
            <param name="term">The term the non-operational <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseExclusiveOrExpression"/>
            points to.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseExclusiveOrExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseExclusiveOrExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseAndExpression)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseExclusiveOrExpression"/> with the <paramref name="leftSide"/> and
            <paramref name="rightSide"/> provided.
            </summary>
            <param name="leftSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseExclusiveOrExpression"/> to evaluate alongside 
            <paramref name="rightSide"/></param>
            <param name="rightSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseAndExpression"/> to evaluate
            with <paramref name="leftSide"/>.</param>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseExclusiveOrExpression.Type">
            <summary>
            Returns the type of expression the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseExclusiveOrExpression"/> is.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.ExpressionKind.BitwiseExclusiveOrOperation"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseExclusiveOrExpression.Associativity">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity"/> associated to the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseExclusiveOrExpression"/>.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Left"/>.</remarks>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseOrExpression">
            <summary>
            Provides a base implementation of <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseOrExpression"/>; 
            a logical and binary operation ('|'; "Or", "or").
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseOrExpression">
            <summary>
            Defines properties and methods for working with a logical or expression (LeftSide | RightSide).
            </summary>
            <remarks>The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseOrExpression"/> uses/has
            <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Left"/> recursion.</remarks>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseOrExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseExclusiveOrExpression)">
            <summary>
            Creates a new non-operational <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseOrExpression"/> with the <paramref name="term"/>
            provided.
            </summary>
            <param name="term">The term the non-operational <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseOrExpression"/>
            points to.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseOrExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseOrExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseExclusiveOrExpression)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseOrExpression"/> with the <paramref name="leftSide"/> and
            <paramref name="rightSide"/> provided.
            </summary>
            <param name="leftSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseOrExpression"/> to evaluate alongside 
            <paramref name="rightSide"/></param>
            <param name="rightSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseExclusiveOrExpression"/> to evaluate
            with <paramref name="leftSide"/>.</param>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseOrExpression.Type">
            <summary>
            Returns the type of expression the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseOrExpression"/> is.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.ExpressionKind.BitwiseOrOperation"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseOrExpression.Associativity">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity"/> associated to the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBitwiseOrExpression"/>.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Left"/>.</remarks>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression">
            <summary>
            Provides a base implementation of <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpConditionalExpression"/>
            for working with a ternary operator conditional expression.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpConditionalExpression">
            <summary>
            Defines properties and methods for working with a ternary operator
            conditional expression.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpConditionalExpression.CheckPart">
            <summary>
            Returns/sets the check part of the conditional.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpConditionalExpression.TruePart">
            <summary>
            Returns/sets the true part of the conditional.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpConditionalExpression.FalsePart">
            <summary>
            Returns/sets the false part of the conditional.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.checkPart">
            <summary>
            Data member for <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.CheckPart"/>.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.truePart">
            <summary>
            Data member for <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.TruePart"/>.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.falsePart">
            <summary>
            Data member for <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.FalsePart"/>.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalOrExpression)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression"/>
            with the <paramref name="termPart"/> provided.
            </summary>
            <param name="termPart">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalOrExpression"/>
            which makes the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression"/> a pass-through.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalOrExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpConditionalExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpConditionalExpression)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression"/> with 
            the <paramref name="checkPart"/>, <paramref name="truePart"/>
            and <paramref name="falsePart"/>
            provided.
            </summary>
            <param name="checkPart">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalOrExpression"/> which relates to the 
            condition to check.</param>
            <param name="truePart">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpConditionalExpression"/> that is 
            evaluated when <paramref name="checkPart"/> evaluates to true.</param>
            <param name="falsePart">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpConditionalExpression"/>
            that is evaluated when <paramref name="checkPart"/> evaluates to false.</param>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.IsTerm">
            <summary>
            Returns whether the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression"/>
            is a pass-through and only <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.CheckPart"/> is set.
            </summary>
            <remarks><para>A pass-through implies that the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression"/>
            is functionally non-operational and translates to the <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.CheckPart"/>
            only.</para><para>If <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.FalsePart"/> OR <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.TruePart"/>
            are null and <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.CheckPart"/> is not null, then this returns true;
            otherwise, this returns false.</para></remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.CheckPart">
            <summary>
            Returns/sets the check part of the conditional.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.TruePart">
            <summary>
            Returns/sets the true part of the conditional.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpConditionalExpression.FalsePart">
            <summary>
            Returns/sets the false part of the conditional.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions">
            <summary>
            Provides a series of C&#9839; expression extensions which make sequencing C&#9839;
            expressions easier.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.AffixTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.CSharpOperatorPrecedences)">
            <summary>
            Affixes the given <paramref name="target"/> <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> 
            to the <paramref name="targetPrecedence"/>.
            </summary>
            <param name="target">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to affix to 
            <paramref name="targetPrecedence"/>.</param>
            <param name="targetPrecedence">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.CSharpOperatorPrecedences"/> 
            that the expression should yield upon return.</param>
            <returns>A new <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> affixed to the 
            <paramref name="targetPrecedence"/> for use in a binary 
            operation.</returns>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Detach(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Removes a previous <see cref="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.AffixTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.CSharpOperatorPrecedences)"/> casing on 
            a given <paramref name="target"/>.
            </summary>
            <param name="target">The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> 
            which has had <see cref="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.AffixTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.CSharpOperatorPrecedences)"/>
            called on it.</param>
            <returns>The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> instance as it was 
            before the <see cref="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.AffixTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.CSharpOperatorPrecedences)"/> was called on it..</returns>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the logical and operation occurs.
            </param>
            <param name="logicalPair">
            The logical pair <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being true.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LogicalOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the logical or operation occurs.
            </param>
            <param name="logicalAlternate">
            The logical alternate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being false.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Char,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Double,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Boolean)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Boolean"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Byte)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Byte"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Char)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Char"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Decimal)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Decimal"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Double)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Double"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int16)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Int16"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int32)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Int32"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int64)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Int64"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.SByte)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.SByte"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Single)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Single"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt16)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.UInt16"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt32)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.UInt32"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt64)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.UInt64"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Boolean)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Boolean"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Byte)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Byte"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Char)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Char"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Decimal)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Decimal"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Double)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Double"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int16)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Int16"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int32)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Int32"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int64)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Int64"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.SByte)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.SByte"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Single)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Single"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt16)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.UInt16"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt32)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.UInt32"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt64)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.UInt64"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Boolean)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Boolean"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Byte)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Byte"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Char)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Char"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Decimal)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Decimal"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Double)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Double"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int16)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Int16"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int32)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Int32"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int64)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Int64"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.SByte)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.SByte"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Single)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Single"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt16)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.UInt16"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt32)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.UInt32"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt64)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.UInt64"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Boolean)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Boolean"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Byte)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Byte"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Char)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Char"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Decimal)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Decimal"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Double)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Double"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int16)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Int16"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int32)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Int32"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int64)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Int64"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.SByte)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.SByte"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Single)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Single"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt16)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.UInt16"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt32)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.UInt32"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt64)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.UInt64"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Boolean)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Boolean"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Byte)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Byte"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Char)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Char"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Decimal)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Decimal"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Double)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Double"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int16)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Int16"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int32)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Int32"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int64)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Int64"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.SByte)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.SByte"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Single)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.Single"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt16)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.UInt16"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt32)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.UInt32"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt64)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:System.UInt64"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Single,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseOr(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the union operation occurs.
            </param>
            <param name="bitUnionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a union with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitUnionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Char,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Double,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Boolean)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Boolean"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Byte)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Byte"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Char)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Char"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Decimal)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Decimal"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Double)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Double"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int16)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Int16"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int32)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Int32"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int64)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Int64"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.SByte)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.SByte"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Single)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Single"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt16)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.UInt16"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt32)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.UInt32"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt64)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.UInt64"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Boolean)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Boolean"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Byte)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Byte"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Char)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Char"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Decimal)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Decimal"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Double)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Double"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int16)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Int16"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int32)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Int32"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int64)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Int64"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.SByte)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.SByte"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Single)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Single"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt16)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.UInt16"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt32)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.UInt32"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt64)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.UInt64"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Boolean)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Boolean"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Byte)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Byte"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Char)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Char"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Decimal)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Decimal"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Double)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Double"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int16)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Int16"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int32)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Int32"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int64)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Int64"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.SByte)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.SByte"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Single)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Single"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt16)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.UInt16"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt32)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.UInt32"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt64)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.UInt64"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Boolean)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Boolean"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Byte)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Byte"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Char)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Char"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Decimal)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Decimal"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Double)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Double"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int16)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Int16"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int32)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Int32"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int64)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Int64"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.SByte)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.SByte"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Single)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Single"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt16)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.UInt16"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt32)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.UInt32"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt64)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.UInt64"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Boolean)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Boolean"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Byte)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Byte"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Char)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Char"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Decimal)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Decimal"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Double)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Double"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int16)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Int16"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int32)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Int32"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int64)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Int64"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.SByte)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.SByte"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Single)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.Single"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt16)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.UInt16"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt32)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.UInt32"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt64)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:System.UInt64"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Single,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseXOr(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the symmetric difference operation occurs.
            </param>
            <param name="symmetricDifferencePair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="symmetricDifferencePair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Char,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Double,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Boolean)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Boolean"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Byte)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Byte"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Char)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Char"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Decimal)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Decimal"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Double)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Double"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int16)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Int16"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int32)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Int32"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int64)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Int64"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.SByte)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.SByte"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Single)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Single"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt16)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.UInt16"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt32)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.UInt32"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt64)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.UInt64"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Boolean)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Boolean"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Byte)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Byte"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Char)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Char"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Decimal)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Decimal"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Double)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Double"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int16)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Int16"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int32)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Int32"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int64)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Int64"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.SByte)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.SByte"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Single)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Single"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt16)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.UInt16"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt32)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.UInt32"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt64)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.UInt64"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Boolean)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Boolean"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Byte)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Byte"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Char)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Char"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Decimal)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Decimal"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Double)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Double"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int16)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Int16"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int32)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Int32"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int64)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Int64"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.SByte)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.SByte"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Single)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Single"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt16)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.UInt16"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt32)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.UInt32"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt64)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.UInt64"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Boolean)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Boolean"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Byte)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Byte"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Char)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Char"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Decimal)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Decimal"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Double)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Double"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int16)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Int16"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int32)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Int32"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int64)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Int64"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.SByte)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.SByte"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Single)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Single"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt16)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.UInt16"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt32)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.UInt32"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt64)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.UInt64"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Boolean)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Boolean"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Byte)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Byte"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Char)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Char"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Decimal)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Decimal"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Double)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Double"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int16)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Int16"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int32)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Int32"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int64)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Int64"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.SByte)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.SByte"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Single)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.Single"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt16)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.UInt16"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt32)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.UInt32"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt64)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:System.UInt64"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Single,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.BitwiseAnd(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the intersection operation occurs.
            </param>
            <param name="intersectionPair">
            The bitwise <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="intersectionPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Boolean"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Byte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Char"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Decimal"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Double"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Int16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Int32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Int64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.SByte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Single"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.String)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.String"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.UInt16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.UInt32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.UInt64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Boolean"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Byte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Char"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Decimal"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Double"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Int16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Int32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Int64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.SByte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Single"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.String)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.String"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.UInt16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.UInt32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.UInt64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Boolean"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Byte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Char"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Decimal"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Double"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Int16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Int32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Int64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.SByte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Single"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.String)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.String"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.UInt16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.UInt32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.UInt64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Boolean"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Byte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Char"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Decimal"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Double"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Int16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Int32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Int64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.SByte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Single"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.String)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.String"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.UInt16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.UInt32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.UInt64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Boolean"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Byte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Char"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Decimal"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Double"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Int16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Int32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Int64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.SByte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.Single"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.String)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.String"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.UInt16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.UInt32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:System.UInt64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.String,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.String"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.String,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.String"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.String,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.String"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.String,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.String"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.String,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.String"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.EqualTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the equality operation occurs.
            </param>
            <param name="potentialEquivalent">
            The potentially equivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialEquivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Boolean"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Byte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Char"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Decimal"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Double"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Int16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Int32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Int64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.SByte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Single"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.String)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.String"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.UInt16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.UInt32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.UInt64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Boolean"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Byte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Char"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Decimal"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Double"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Int16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Int32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Int64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.SByte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Single"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.String)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.String"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.UInt16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.UInt32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.UInt64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Boolean"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Byte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Char"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Decimal"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Double"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Int16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Int32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Int64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.SByte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Single"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.String)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.String"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.UInt16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.UInt32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.UInt64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Boolean"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Byte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Char"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Decimal"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Double"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Int16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Int32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Int64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.SByte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Single"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.String)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.String"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.UInt16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.UInt32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.UInt64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Boolean"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Byte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Char"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Decimal"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Double"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Int16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Int32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Int64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.SByte"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.Single"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.String)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.String"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.UInt16"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.UInt32"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:System.UInt64"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.String,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.String"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.String,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.String"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.String,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.String"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.String,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.String"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.String,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.String"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.InequalTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the inequality operation occurs.
            </param>
            <param name="potentialInequivalent">
            The potentially inequivalent <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to compare to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="potentialInequivalent"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThanOrEqualTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational greater or equal to operation occurs.
            </param>
            <param name="lesserOrEqualSide">
            The lesser or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThanOrEqualTo(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational lesser or equal to operation occurs.
            </param>
            <param name="greaterOrEqualSide">
            The greater or equal <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterOrEqualSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Char,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Double,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Single,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.LessThan(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational less-than operation occurs.
            </param>
            <param name="greaterSide">
            The greater <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="greaterSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Boolean,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Char,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Char,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Double,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Boolean)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Boolean"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Byte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Byte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Char)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Char"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Decimal)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Decimal"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Double)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Double"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Int16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Int32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Int64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.SByte)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.SByte"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Single)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.Single"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt16)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.UInt16"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt32)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.UInt32"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt64)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:System.UInt64"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Single,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.GreaterThan(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the relational greater-than operation occurs.
            </param>
            <param name="lesserSide">
            The lower <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value to relate to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="lesserSide"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Boolean,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> as an expression of the operation..
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Boolean,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Boolean,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Boolean,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Boolean,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Boolean"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Byte,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Byte,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Byte,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Byte,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Byte,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Char,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Char,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Char,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Char,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Char,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Char"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Decimal,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Decimal,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Decimal,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Decimal,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Decimal,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Double,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Double,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Double,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Double,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Double,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Boolean)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Boolean"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Byte)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Byte"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Char)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Char"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Decimal)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Decimal"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Double)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Double"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Int16)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Int16"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Int32)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Int32"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Int64)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Int64"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.SByte)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.SByte"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Single)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Single"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.UInt16)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.UInt16"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.UInt32)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.UInt32"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.UInt64)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.UInt64"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Boolean)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Boolean"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Byte)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Byte"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Char)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Char"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Decimal)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Decimal"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Double)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Double"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Int16)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Int16"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Int32)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Int32"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Int64)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Int64"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.SByte)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.SByte"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Single)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Single"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.UInt16)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.UInt16"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.UInt32)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.UInt32"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.UInt64)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.UInt64"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Boolean)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Boolean"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Byte)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Byte"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Char)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Char"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Decimal)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Decimal"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Double)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Double"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Int16)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Int16"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Int32)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Int32"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Int64)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Int64"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.SByte)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.SByte"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Single)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Single"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.UInt16)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.UInt16"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.UInt32)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.UInt32"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.UInt64)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.UInt64"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Boolean)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Boolean"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Byte)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Byte"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Char)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Char"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Decimal)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Decimal"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Double)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Double"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Int16)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Int16"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Int32)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Int32"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Int64)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Int64"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.SByte)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.SByte"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Single)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Single"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.UInt16)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.UInt16"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.UInt32)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.UInt32"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.UInt64)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.UInt64"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Boolean)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Boolean"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Byte)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Byte"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Char)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Char"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Decimal)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Decimal"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Double)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Double"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Int16)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Int16"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Int32)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Int32"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Int64)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Int64"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.SByte)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.SByte"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.Single)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.Single"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.UInt16)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.UInt16"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.UInt32)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.UInt32"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,System.UInt64)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:System.UInt64"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Int16,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Int16,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Int16,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Int16,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Int16,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Int32,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Int32,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Int32,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Int32,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Int32,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Int64,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Int64,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Int64,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Int64,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Int64,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.SByte,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.SByte,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.SByte,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.SByte,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.SByte,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Single,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Single,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Single,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Single,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.Single,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.UInt16,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.UInt16,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.UInt16,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.UInt16,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.UInt16,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.UInt32,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.UInt32,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.UInt32,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.UInt32,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.UInt32,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.UInt64,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.UInt64,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.UInt64,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.UInt64,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Shift(System.UInt64,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Shifts <paramref name="target"/> by <paramref name="bitsToShift"/> bits in the <paramref name="shiftDirection"/> as an expression of the operation.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the bitwise shift operation occurs.
            </param>
            <param name="shiftDirection">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> that indicates the direction the <paramref name="target"/> should be shifted.
            </param>
            <param name="bitsToShift">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value representing the number of bits to shift <paramref name="target"/> by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="bitsToShift"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Double,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Byte)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Byte"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Decimal)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Decimal"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Double)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Double"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int16)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Int16"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int32)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Int32"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int64)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Int64"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.SByte)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.SByte"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Single)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Single"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt16)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.UInt16"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt32)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.UInt32"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt64)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.UInt64"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Byte)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Byte"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Decimal)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Decimal"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Double)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Double"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int16)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Int16"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int32)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Int32"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int64)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Int64"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.SByte)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.SByte"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Single)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Single"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt16)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.UInt16"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt32)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.UInt32"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt64)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.UInt64"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Byte)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Byte"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Decimal)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Decimal"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Double)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Double"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int16)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Int16"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int32)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Int32"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int64)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Int64"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.SByte)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.SByte"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Single)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Single"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt16)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.UInt16"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt32)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.UInt32"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt64)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.UInt64"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Byte)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Byte"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Decimal)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Decimal"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Double)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Double"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int16)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Int16"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int32)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Int32"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int64)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Int64"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.SByte)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.SByte"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Single)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Single"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt16)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.UInt16"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt32)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.UInt32"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt64)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.UInt64"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Byte)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Byte"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Decimal)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Decimal"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Double)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Double"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int16)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Int16"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int32)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Int32"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int64)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Int64"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.SByte)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.SByte"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Single)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.Single"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt16)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.UInt16"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt32)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.UInt32"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt64)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:System.UInt64"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Single,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Add(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the addition operation occurs.
            </param>
            <param name="supplement">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> value which is added to <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="supplement"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Double,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Byte)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Byte"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Decimal)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Decimal"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Double)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Double"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int16)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Int16"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int32)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Int32"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int64)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Int64"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.SByte)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.SByte"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Single)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Single"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt16)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.UInt16"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt32)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.UInt32"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt64)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.UInt64"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Byte)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Byte"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Decimal)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Decimal"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Double)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Double"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int16)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Int16"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int32)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Int32"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int64)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Int64"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.SByte)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.SByte"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Single)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Single"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt16)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.UInt16"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt32)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.UInt32"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt64)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.UInt64"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Byte)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Byte"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Decimal)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Decimal"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Double)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Double"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int16)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Int16"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int32)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Int32"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int64)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Int64"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.SByte)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.SByte"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Single)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Single"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt16)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.UInt16"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt32)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.UInt32"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt64)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.UInt64"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Byte)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Byte"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Decimal)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Decimal"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Double)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Double"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int16)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Int16"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int32)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Int32"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int64)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Int64"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.SByte)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.SByte"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Single)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Single"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt16)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.UInt16"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt32)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.UInt32"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt64)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.UInt64"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Byte)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Byte"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Decimal)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Decimal"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Double)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Double"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int16)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Int16"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int32)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Int32"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int64)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Int64"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.SByte)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.SByte"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Single)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.Single"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt16)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.UInt16"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt32)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.UInt32"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt64)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:System.UInt64"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Single,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Subtract(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the subtraction operation occurs.
            </param>
            <param name="diminishment">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> whose value is removed from <paramref name="target"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="diminishment"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Byte"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Byte"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Byte"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Byte"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Byte"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Decimal"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Decimal"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Decimal"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Decimal"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Decimal"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Double,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Double"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Double"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Double"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Double"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Double"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Byte)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Byte"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Decimal)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Decimal"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Double)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Double"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int16)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Int16"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int32)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Int32"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int64)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Int64"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.SByte)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.SByte"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Single)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Single"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt16)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.UInt16"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt32)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.UInt32"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt64)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.UInt64"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Byte)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Byte"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Decimal)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Decimal"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Double)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Double"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int16)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Int16"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int32)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Int32"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int64)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Int64"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.SByte)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.SByte"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Single)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Single"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt16)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.UInt16"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt32)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.UInt32"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt64)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.UInt64"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Byte)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Byte"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Decimal)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Decimal"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Double)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Double"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int16)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Int16"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int32)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Int32"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int64)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Int64"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.SByte)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.SByte"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Single)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Single"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt16)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.UInt16"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt32)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.UInt32"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt64)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.UInt64"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Byte)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Byte"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Decimal)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Decimal"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Double)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Double"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int16)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Int16"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int32)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Int32"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int64)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Int64"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.SByte)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.SByte"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Single)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Single"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt16)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.UInt16"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt32)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.UInt32"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt64)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.UInt64"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Byte)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Byte"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Decimal)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Decimal"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Double)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Double"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int16)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Int16"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int32)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Int32"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int64)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Int64"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.SByte)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.SByte"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Single)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.Single"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt16)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.UInt16"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt32)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.UInt32"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt64)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:System.UInt64"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Int16"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Int16"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Int16"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Int16"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Int16"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Int32"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Int32"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Int32"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Int32"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Int32"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Int64"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Int64"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Int64"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Int64"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Int64"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.SByte"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.SByte"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.SByte"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.SByte"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.SByte"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Single,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Single"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Single"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Single"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Single"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.Single"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.UInt16"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.UInt16"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.UInt16"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.UInt16"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.UInt16"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.UInt32"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.UInt32"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.UInt32"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.UInt32"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.UInt32"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.UInt64"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.UInt64"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.UInt64"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.UInt64"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Division(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
            </summary>
            <param name="target">
            The <see cref="T:System.UInt64"/> numerator on which the division operation occurs.
            </param>
            <param name="denominator">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="denominator"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Double,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Byte)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Byte"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Decimal)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Decimal"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Double)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Double"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int16)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Int16"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int32)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Int32"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int64)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Int64"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.SByte)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.SByte"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Single)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Single"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt16)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.UInt16"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt32)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.UInt32"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt64)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.UInt64"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Byte)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Byte"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Decimal)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Decimal"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Double)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Double"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int16)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Int16"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int32)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Int32"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int64)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Int64"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.SByte)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.SByte"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Single)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Single"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt16)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.UInt16"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt32)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.UInt32"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt64)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.UInt64"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Byte)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Byte"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Decimal)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Decimal"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Double)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Double"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int16)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Int16"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int32)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Int32"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int64)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Int64"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.SByte)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.SByte"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Single)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Single"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt16)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.UInt16"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt32)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.UInt32"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt64)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.UInt64"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Byte)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Byte"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Decimal)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Decimal"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Double)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Double"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int16)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Int16"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int32)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Int32"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int64)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Int64"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.SByte)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.SByte"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Single)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Single"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt16)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.UInt16"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt32)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.UInt32"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt64)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.UInt64"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Byte)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Byte"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Decimal)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Decimal"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Double)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Double"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int16)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Int16"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int32)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Int32"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int64)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Int64"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.SByte)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.SByte"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Single)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.Single"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt16)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.UInt16"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt32)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.UInt32"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt64)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:System.UInt64"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Single,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Multiply(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the multiplication operation occurs.
            </param>
            <param name="multiplier">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="multiplier"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Byte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Byte"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Decimal,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Decimal"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Double,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Double,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Double"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Byte)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Byte"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Decimal)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Decimal"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Double)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Double"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int16)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Int16"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int32)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Int32"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Int64)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Int64"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.SByte)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.SByte"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.Single)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Single"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt16)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.UInt16"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt32)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.UInt32"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression,System.UInt64)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.UInt64"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Byte)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Byte"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Decimal)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Decimal"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Double)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Double"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int16)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Int16"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int32)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Int32"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Int64)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Int64"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.SByte)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.SByte"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.Single)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Single"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt16)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.UInt16"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt32)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.UInt32"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember,System.UInt64)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.UInt64"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Byte)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Byte"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Decimal)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Decimal"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Double)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Double"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int16)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Int16"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int32)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Int32"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Int64)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Int64"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.SByte)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.SByte"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.Single)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Single"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt16)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.UInt16"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt32)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.UInt32"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember,System.UInt64)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.UInt64"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Byte)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Byte"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Decimal)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Decimal"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Double)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Double"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int16)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Int16"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int32)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Int32"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Int64)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Int64"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.SByte)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.SByte"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.Single)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Single"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt16)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.UInt16"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt32)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.UInt32"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember,System.UInt64)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.UInt64"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Byte)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Byte"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Decimal)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Decimal"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Double)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Double"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int16)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Int16"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int32)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Int32"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int64)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Int64"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.SByte)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.SByte"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Single)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.Single"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt16)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.UInt16"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt32)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.UInt32"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt64)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:System.UInt64"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="target"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Int16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int16"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Int32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int32"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Int64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Int64"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.SByte,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.SByte"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Single,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.Single,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.Single"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.UInt16,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt16"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.UInt32,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt32"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Modulus(System.UInt64,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
            </summary>
            <param name="target">
            The target <see cref="T:System.UInt64"/> on which the modulus operation occurs.
            </param>
            <param name="moduloPair">
            The <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            thrown when <paramref name="moduloPair"/> is null.
            </exception>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.INaryOperandExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.SByte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Byte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.Int64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember,System.UInt64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.INaryOperandExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,System.SByte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,System.Byte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,System.Int16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,System.UInt16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,System.Int32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,System.UInt32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,System.Int64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember,System.UInt64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.INaryOperandExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,System.SByte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,System.Byte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,System.Int16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,System.UInt16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,System.Int32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,System.UInt32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,System.Int64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember,System.UInt64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.INaryOperandExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,System.SByte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,System.Byte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,System.Int16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,System.UInt16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,System.Int32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,System.UInt32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,System.Int64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember,System.UInt64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.INaryOperandExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,System.SByte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,System.Byte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,System.Int16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,System.UInt16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,System.Int32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,System.UInt32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,System.Int64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember,System.UInt64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.INaryOperandExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,System.SByte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,System.Byte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,System.Int16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,System.UInt16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,System.Int32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,System.UInt32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,System.Int64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember,System.UInt64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.INaryOperandExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,System.SByte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,System.Byte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,System.Int16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,System.UInt16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,System.Int32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,System.UInt32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,System.Int64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember,System.UInt64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.INaryOperandExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,System.SByte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,System.Byte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,System.Int16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,System.UInt16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,System.Int32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,System.UInt32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,System.Int64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression,System.UInt64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.INaryOperandExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,System.SByte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,System.Byte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,System.Int16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,System.UInt16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,System.Int32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,System.UInt32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,System.Int64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression,System.UInt64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.INaryOperandExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,System.SByte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,System.Byte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,System.Int16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,System.UInt16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,System.Int32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,System.UInt32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,System.Int64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression,System.UInt64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,AllenCopeland.Abstraction.Slf.Ast.Expressions.INaryOperandExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,System.SByte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,System.Byte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,System.Int16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,System.UInt16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,System.Int32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,System.UInt32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,System.Int64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember,System.UInt64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Members.ILocalMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IClassPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IEnumFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IInterfacePropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructFieldMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IStructPropertyMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IFieldReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IPropertyReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.ILocalReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,AllenCopeland.Abstraction.Slf.Abstract.Members.IParameterMember)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,AllenCopeland.Abstraction.Slf.Ast.Expressions.INaryOperandExpression)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,System.SByte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,System.Byte)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,System.Int16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,System.UInt16)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,System.Int32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,System.UInt32)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,System.Int64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Assign(AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatementParent,AllenCopeland.Abstraction.Slf.Ast.Expressions.IParameterReferenceExpression,System.UInt64)">
            <summary>
            Assigns a <paramref name="assignValue"/> to the <paramref name="assignTarget"/>
            with the standard <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.AssignmentOperation.SimpleAssign"/> operation.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression">
            <summary>
            Provides a root implementation of <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpInequalityExpression"/>.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpInequalityExpression">
            <summary>
            Defines properties and methods for working 
            with an inequality expression.
            </summary>
            <remarks>The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpInequalityExpression"/> uses/has
            <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Left"/> recursion.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpInequalityExpression.Operation">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityOperation"/> 
            defined by the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpInequalityExpression"/>.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression.operation">
            <summary>
            Data member for <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression.Operation"/>.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpInequalityExpression,System.Boolean,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression"/> instance
            with the <paramref name="leftSide"/>, <paramref name="equals"/>,
            and <paramref name="rightSide"/> provided.
            </summary>
            <param name="leftSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpInequalityExpression"/> which makes up the
            left-operand of the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression"/>.</param>
            <param name="equals">if true <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression.Operation"/> is <see cref="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityOperation.Equality"/>;
            <see cref="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityOperation.Inequality"/> otherwise.</param>
            <param name="rightSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression"/> which makes
            up the right-operand of the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression"/>.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression"/> instance
            with the <paramref name="nonOperationalTerm"/> provided.
            </summary>
            <param name="nonOperationalTerm">An <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression"/> instance
            which yields an <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression"/> which is a forward to a simple term.</param>
            <remarks>Used to indicate an inequality expression that is built as a result of a
            language parse.</remarks>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression.op_Implicit(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalExpression)~AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression">
            <summary>
            Implicitly converts the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalExpression"/> into a 
            non-operational term <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression"/>.
            </summary>
            <param name="term">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalExpression"/> that will take place of
            <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBinaryOperationExpressionBase`2.RightSide"/> as the term.</param>
            <returns>A new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression"/> with the <paramref name="term"/> as the
            <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpBinaryOperationExpressionBase`2.RightSide"/>.</returns>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression.Type">
            <summary>
            Returns the type of expression the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression"/> is.
            </summary>
            <remarks>Returns the appropriate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.ExpressionKind"/> value
            relative to the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityOperation"/> 
            within <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression.Operation"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression.Associativity">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity"/> associated to the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression"/>.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Left"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression.Operation">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityOperation"/> defined by the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityExpression"/>.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalAndExpression">
            <summary>
            Provides a base implementation of <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalAndExpression"/>; 
            a logical and binary operation (C♯: "&amp;&amp;"; VB: "AndAlso"; CIL: "brfalse[.s]" (in case of false, short circuit)).
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalAndExpression">
            <summary>
            Defines properties and methods for working with a 
            condition and expression (LeftSide &amp;&amp;
            RightSide)
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalAndExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseOrExpression)">
            <summary>
            Creates a new non-operational <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalAndExpression"/> with the <paramref name="term"/>
            provided.
            </summary>
            <param name="term">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseOrExpression"/> term the non-operational
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalAndExpression"/>
            points to.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalAndExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalAndExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseOrExpression)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalAndExpression"/> with the <paramref name="leftSide"/> and
            <paramref name="rightSide"/> provided.
            </summary>
            <param name="leftSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalAndExpression"/> to evaluate alongside 
            <paramref name="rightSide"/></param>
            <param name="rightSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBitwiseOrExpression"/> to evaluate
            with <paramref name="leftSide"/>.</param>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalAndExpression.Type">
            <summary>
            Returns the type of expression the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalAndExpression"/> is.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.ExpressionKind.BitwiseAndOperation"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalAndExpression.Associativity">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity"/> associated to the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalAndExpression"/>.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Left"/>.</remarks>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalOrExpression">
            <summary>
            Provides a base implementation of <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalOrExpression"/>; 
            a logical and binary operation ('|'; "Or", "or").
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalOrExpression">
            <summary>
            Defines properties and methods for working with a condition or expression (LeftSide || RightSide)
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalOrExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalAndExpression)">
            <summary>
            Creates a new non-operational <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalOrExpression"/> with the <paramref name="term"/>
            provided.
            </summary>
            <param name="term">The term the non-operational <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalAndExpression"/>
            points to.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalOrExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalOrExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalAndExpression)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalOrExpression"/> with the <paramref name="leftSide"/> and
            <paramref name="rightSide"/> provided.
            </summary>
            <param name="leftSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalOrExpression"/> to evaluate alongside 
            <paramref name="rightSide"/></param>
            <param name="rightSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpLogicalAndExpression"/> to evaluate
            when <paramref name="leftSide"/> is false.</param>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalOrExpression.Type">
            <summary>
            Returns the type of expression the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalOrExpression"/> is.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.ExpressionKind.LogicalOrOperation"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalOrExpression.Associativity">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity"/> associated to the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpLogicalOrExpression"/>.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Left"/>.</remarks>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivExpression">
            <summary>
            Provides a base implementation of <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpMulDivExpression"/>;
            a multiplication, division or division remainder operation expression.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpMulDivExpression">
            <summary>
            Defines properties and methods for working with a multiplication, division or division remainder
            operation expression.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpMulDivExpression.Operation">
            <summary>
            Returns/sets the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivOperation"/> represented by the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpMulDivExpression"/>
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivExpression.operation">
            <summary>
            Data member for <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivExpression.Operation"/>.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivExpression.Type">
            <summary>
            Returns the type of expression the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivExpression"/> is.
            </summary>
            <remarks>Returns the appropriate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.ExpressionKind"/> value
            relative to the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivOperation"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivExpression.Associativity">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity"/> associated to the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivExpression"/>.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Left"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivExpression.Operation">
            <summary>
            Returns/sets the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivOperation"/> represented by the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivExpression"/>.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalExpression">
            <summary>
            Provides a base implementation of <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression"/>, a relational check operation
            expression.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression">
            <summary>
            Defines properties and methods for working with a relational check operation.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression.Operation">
            <summary>
            Returns the type of <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalOperation"/> the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression"/>
            is.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalExpression.operation">
            <summary>
            Data member for <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalExpression.Operation"/>.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalOperation,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpShiftExpression)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalExpression"/> instance with the 
            <paramref name="leftSide"/>, <paramref name="operation"/>, and <paramref name="rightSide"/>
            provided.
            </summary>
            <param name="leftSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression"/>
            which sits on the left side of <paramref name="operation"/>.</param>
            <param name="operation">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalOperation"/> to be performed
            with regards to <paramref name="leftSide"/> and <paramref name="rightSide"/>.</param>
            <param name="rightSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpShiftExpression"/>
            which sits on the right-side of <paramref name="operation"/>.</param>
            <exception cref="T:System.ArgumentNullException">thrown when <paramref name="rightSide"/> is null, or when
            <paramref name="leftSide"/> is null and <paramref name="operation"/> is not 
            <see cref="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalOperation.Term"/>.</exception>
            <exception cref="T:System.ArgumentException">thrown when <paramref name="operation"/> is
            <see cref="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalOperation.TypeCastOrNull"/> or <see cref="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalOperation.TypeCheck"/>
            and <paramref name="rightSide"/> does not <see cref="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpExpressionExtensions.Detach(AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression)"/>
            to an <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.ITypeReferenceExpression"/>.</exception>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalExpression.Associativity">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity"/> associated to the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalExpression"/>.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Left"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalExpression.Type">
            <summary>
            Returns the type of expression the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalExpression"/> is.
            </summary>
            <remarks>Returns the appropriate <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.ExpressionKind"/> value
            relative to the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalOperation"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalExpression.Operation">
            <summary>
            Returns the type of <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalOperation"/> the
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalExpression"/>
            is.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression">
            <summary>
            Provides a base implementation of <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpShiftExpression"/> which represents
            a shift expression operation.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpShiftExpression">
            <summary>
            Defines properties and methods for working with a shift expression.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpShiftExpression.Operation">
            <summary>
            Returns/sets the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> associated to the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpShiftExpression"/>.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression.operation">
            <summary>
            Data member for <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression.Operation"/>.
            </summary>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpShiftExpression,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation,AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAddSubtExpression)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression"/> with the <paramref name="leftSide"/>,
            <paramref name="operation"/> and <paramref name="rightSide"/> provided.
            </summary>
            <param name="leftSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpShiftExpression"/> the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression"/> uses as its left operand.</param>
            <param name="operation">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> which denotes
            the kind of shift action to take between the <paramref name="leftSide"/>
            and <paramref name="rightSide"/>.</param>
            <param name="rightSide">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAddSubtExpression"/> the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression"/>
            uses as its right operand.</param>
        </member>
        <member name="M:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression.#ctor(AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAddSubtExpression)">
            <summary>
            Creates a new <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression"/> with the <paramref name="term"/> provided.
            </summary>
            <param name="term">The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAddSubtExpression"/> the non-operational
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression"/> points to.</param>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression.Associativity">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity"/> associated to the 
            <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression"/>.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.BinaryOperationAssociativity.Left"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression.Type">
            <summary>
            Returns the type of expression the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression"/> is.
            </summary>
            <remarks>Returns <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.ExpressionKind.BinaryForwardTerm"/> when <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression.Operation"/>
            is <see cref="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation.Term"/>,
            <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.ExpressionKind.ShiftLeftOperation"/>
            when <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression.Operation"/> is <see cref="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation.LeftShift"/>
            and <see cref="F:AllenCopeland.Abstraction.Slf.Ast.Expressions.ExpressionKind.ShiftRightOperation"/> when <see cref="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression.Operation"/>
            is <see cref="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation.RightShift"/>.</remarks>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression.Operation">
            <summary>
            Returns/sets the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation"/> associated to the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftExpression"/>.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtOperation">
            <summary>
            The type of operation the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAddSubtExpression"/> is.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtOperation.Term">
            <summary>
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAddSubtExpression"/> is a non-operational term that references
            the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpMulDivExpression"/>.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtOperation.Addition">
            <summary>
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAddSubtExpression"/> is an addition operation.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpAddSubtOperation.Subtraction">
            <summary>
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAddSubtExpression"/> is an subtraction operation.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpBinaryOperator.Precedence">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.CSharpOperatorPrecedences"/> 
            <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IExpression"/> to determine execution
            order of certain expression <see cref="T:System.Type"/>s.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityOperation">
            <summary>
            The type of inequality operation.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityOperation.Term">
            <summary>
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpInequalityExpression"/> is 
            merely a single sided term with no operation.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityOperation.Equality">
            <summary>
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpInequalityExpression"/> 
            represents a comparison of equality.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpInequalityOperation.Inequality">
            <summary>
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpInequalityExpression"/> 
            represents a comparison of inequality.
            </summary>
            <remarks>
                C♯: "!="
                VB: "&lt;&gt;"
            </remarks>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivOperation">
            <summary>
            The type of operation to be performed by the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpMulDivExpression"/>.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivOperation.Multiplication">
            <summary>
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpMulDivExpression"/> represents a multiplication operation.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivOperation.Division">
            <summary>
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpMulDivExpression"/> represents a strict division operation.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivOperation.Remainder">
            <summary>
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpMulDivExpression"/> represents a division operation in which the remainder is
            returned.
            </summary>
            <remarks>Also known as 'modulus'.</remarks>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpMulDivOperation.Term">
            <summary>
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpMulDivExpression"/> represents a non-operational term as a pointer to a 
            <see cref="T:AllenCopeland.Abstraction.Slf.Ast.Expressions.IUnaryOperationExpression"/>
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalOperation.LessThan">
            <summary>
            Represents an operation where left side of the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression"/>
            is checked on whether it is less than the right side.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalOperation.LessThanOrEqualTo">
            <summary>
            Represents an operation where left side of the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression"/>
            is checked on whether it is less than or equal to the right side.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalOperation.GreaterThan">
            <summary>
            Represents an operation where left side of the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression"/>
            is checked on whether it is greater than the right side.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalOperation.GreaterThanOrEqualTo">
            <summary>
            Represents an operation where left side of the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression"/>
            is checked on whether it is greater than or equal to the right side.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalOperation.TypeCheck">
            <summary>
            Represents an operation where the left side of the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression"/>
            is type-checked against another type; true is returned if it is the type
            provided; false, otherwise.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalOperation.TypeCastOrNull">
            <summary>
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpRelationalExpression"/> represents a 
            type-cast or null expression.
            </summary>
            <remarks>
                C♯: Term "as" TypeIdentifier
                VB: "Dim" Temp "As" TermType '=' Term
                    ... IIf(Temp TypeOf GenericParameter, Temp, Null) ...
            </remarks>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpRelationalOperation.Term">
            <summary>
            The relaitonal operation is a non-binary operation and is therefore a term containing
            only the <see cref="P:AllenCopeland.Abstraction.Slf.Ast.Expressions.IBinaryOperationExpression`2.RightSide"/>.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation.Term">
            <summary>
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpShiftExpression"/> is not a binary operation but rather a non-operational
            term which points to a <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpAddSubtExpression"/>.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation.LeftShift">
            <summary>
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpShiftExpression"/> represents a left-shift operation.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.CSharpShiftOperation.RightShift">
            <summary>
            The <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Expressions.ICSharpShiftExpression"/> represents a right-shift operation.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Parsers.ICSharpParser">
            <summary>
            Defines properties and methods for working with a parser
            which parses C&#9839; source files.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpAssemblyFileContext.CurrentResult">
            <summary>
            Returns the <see cref="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpAssemblyFileInfo"/> resulted
            from a visit operation.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0001">
            <summary>
              Looks up a localized string similar to Internal compiler error.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0003">
            <summary>
              Looks up a localized string similar to Out of memory.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0004">
            <summary>
              Looks up a localized string similar to Warning treated as error.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0005">
            <summary>
              Looks up a localized string similar to Compiler option {0} must be followed by an argument.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0006">
            <summary>
              Looks up a localized string similar to Metadata file {0} could not be found.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0007">
            <summary>
              Looks up a localized string similar to Unexpected common language runtime initialization error — {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0008">
            <summary>
              Looks up a localized string similar to Unexpected error reading metadata from file &apos;file&apos; — {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0009">
            <summary>
              Looks up a localized string similar to Metadata file {0} could not be opened — {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0010">
            <summary>
              Looks up a localized string similar to Unexpected fatal error -- {0}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0011">
            <summary>
              Looks up a localized string similar to The base class or interface {0} in assembly {1} referenced by type {2} could not be resolved.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0012">
            <summary>
              Looks up a localized string similar to The type {0} is defined in an assembly that is not referenced. You must add a reference to assembly {1}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0013">
            <summary>
              Looks up a localized string similar to Unexpected error writing metadata to file {0} -- {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0014">
            <summary>
              Looks up a localized string similar to Required file {0} could not be found.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0015">
            <summary>
              Looks up a localized string similar to The name of type {0} is too long.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0016">
            <summary>
              Looks up a localized string similar to Could not write to output file {0} — {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0017">
            <summary>
              Looks up a localized string similar to Program {0} has more than one entry point defined. Compile with /main to specify the type that contains the entry point..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0019">
            <summary>
              Looks up a localized string similar to Operator {0} cannot be applied to operands of type {1} and {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0020">
            <summary>
              Looks up a localized string similar to Division by constant zero.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0021">
            <summary>
              Looks up a localized string similar to Cannot apply indexing with [] to an expression of type {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0022">
            <summary>
              Looks up a localized string similar to Wrong number of indices inside [], expected {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0023">
            <summary>
              Looks up a localized string similar to Operator {0} cannot be applied to operand of type {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0025">
            <summary>
              Looks up a localized string similar to Standard library file {0} could not be found.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0026">
            <summary>
              Looks up a localized string similar to Keyword &apos;this&apos; is not valid in a static property, static method, or static field initializer.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0027">
            <summary>
              Looks up a localized string similar to Keyword &apos;this&apos; is not available in the current context.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0029">
            <summary>
              Looks up a localized string similar to Cannot implicitly convert type {0} to {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0030">
            <summary>
              Looks up a localized string similar to Cannot convert type {0} to {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0031">
            <summary>
              Looks up a localized string similar to Constant value {0} cannot be converted to a {1}. (use &apos;unchecked&apos; syntax to override).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0034">
            <summary>
              Looks up a localized string similar to Operator {0} is ambiguous on operands of type {1} and {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0035">
            <summary>
              Looks up a localized string similar to Operator {0} is ambiguous on an operand of type {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0036">
            <summary>
              Looks up a localized string similar to An out parameter cannot have the &apos;[In]&apos; attribute.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0037">
            <summary>
              Looks up a localized string similar to Cannot convert null to {0} because it is a non-nullable value type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0038">
            <summary>
              Looks up a localized string similar to Cannot access a nonstatic member of outer type {0} via nested type {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0039">
            <summary>
              Looks up a localized string similar to Cannot convert type {0} to {1} via a reference conversion, boxing conversion, unboxing conversion, wrapping conversion, or null type conversion.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0040">
            <summary>
              Looks up a localized string similar to Unexpected error creating debug information file — {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0041">
            <summary>
              Looks up a localized string similar to The fully qualified name for {0} is too long for debug information. Compile without &apos;/debug&apos; option..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0042">
            <summary>
              Looks up a localized string similar to Unexpected error creating debug information file {0} — {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0043">
            <summary>
              Looks up a localized string similar to PDB file {0} has an incorrect or out-of-date format. Delete it and rebuild..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0050">
            <summary>
              Looks up a localized string similar to Inconsistent accessibility: return type {0} is less accessible than method {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0051">
            <summary>
              Looks up a localized string similar to Inconsistent accessibility: parameter type {0} is less accessible than method {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0052">
            <summary>
              Looks up a localized string similar to Inconsistent accessibility: field type {0} is less accessible than field {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0053">
            <summary>
              Looks up a localized string similar to Inconsistent accessibility: property type {0} is less accessible than property {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0054">
            <summary>
              Looks up a localized string similar to Inconsistent accessibility: indexer return type {0} is less accessible than indexer {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0055">
            <summary>
              Looks up a localized string similar to Inconsistent accessibility: parameter type {0} is less accessible than indexer {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0056">
            <summary>
              Looks up a localized string similar to Inconsistent accessibility: return type {0} is less accessible than operator {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0057">
            <summary>
              Looks up a localized string similar to Inconsistent accessibility: parameter type {0} is less accessible than operator {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0058">
            <summary>
              Looks up a localized string similar to Inconsistent accessibility: return type {0} is less accessible than delegate {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0059">
            <summary>
              Looks up a localized string similar to Inconsistent accessibility: parameter type {0} is less accessible than delegate {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0060">
            <summary>
              Looks up a localized string similar to Inconsistent accessibility: base class {0} is less accessible than class {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0061">
            <summary>
              Looks up a localized string similar to Inconsistent accessibility: base interface {0} is less accessible than interface {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0065">
            <summary>
              Looks up a localized string similar to {0}: event property must have both add and remove accessors.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0066">
            <summary>
              Looks up a localized string similar to {0}: event must be of a delegate type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0068">
            <summary>
              Looks up a localized string similar to {0}: event in interface cannot have initializer.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0069">
            <summary>
              Looks up a localized string similar to An event in an interface cannot have add or remove accessors.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0070">
            <summary>
              Looks up a localized string similar to The event {0} can only appear on the left hand side of += or -= (except when used from within the type {1}).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0071">
            <summary>
              Looks up a localized string similar to An explicit interface implementation of an event must use event accessor syntax.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0072">
            <summary>
              Looks up a localized string similar to {0} : cannot override; {1} is not an event.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0073">
            <summary>
              Looks up a localized string similar to An add or remove accessor must have a body.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0074">
            <summary>
              Looks up a localized string similar to {0}: abstract event cannot have initializer.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0075">
            <summary>
              Looks up a localized string similar to To cast a negative value, you must enclose the value in parentheses.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0076">
            <summary>
              Looks up a localized string similar to The enumerator name &apos;value__&apos; is reserved and cannot be used.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0077">
            <summary>
              Looks up a localized string similar to The as operator must be used with a reference type or nullable type ({0} is a non-nullable value type)..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0079">
            <summary>
              Looks up a localized string similar to The event {0} can only appear on the left hand side of += or -=.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0080">
            <summary>
              Looks up a localized string similar to Constraints are not allowed on non-generic declarations.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0081">
            <summary>
              Looks up a localized string similar to Type parameter declaration must be an identifier not a type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0082">
            <summary>
              Looks up a localized string similar to Type {0} already reserves a member called {1} with the same parameter types.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0100">
            <summary>
              Looks up a localized string similar to The parameter name {0} is a duplicate.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0101">
            <summary>
              Looks up a localized string similar to The namespace {0} already contains a definition for {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0102">
            <summary>
              Looks up a localized string similar to The type {0} already contains a definition for {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0103">
            <summary>
              Looks up a localized string similar to The name {0} does not exist in the current context.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0104">
            <summary>
              Looks up a localized string similar to {0} is an ambiguous reference between {1} and {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0106">
            <summary>
              Looks up a localized string similar to The modifier {0} is not valid for this item.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0107">
            <summary>
              Looks up a localized string similar to More than one protection modifier.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0110">
            <summary>
              Looks up a localized string similar to The evaluation of the constant value for {0} involves a circular definition.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0111">
            <summary>
              Looks up a localized string similar to Type {0} already defines a member called {1} with the same parameter types.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0112">
            <summary>
              Looks up a localized string similar to A static member {0} cannot be marked as override, virtual or abstract.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0113">
            <summary>
              Looks up a localized string similar to A member {0} marked as override cannot be marked as new or virtual.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0115">
            <summary>
              Looks up a localized string similar to {0} : no suitable method found to override.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0116">
            <summary>
              Looks up a localized string similar to A namespace does not directly contain members such as fields or methods.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0117">
            <summary>
              Looks up a localized string similar to {0} does not contain a definition for &apos;identifier&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0118">
            <summary>
              Looks up a localized string similar to {0} is a {1} but is used like a {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0119">
            <summary>
              Looks up a localized string similar to {0} is a {1}, which is not valid in the given context..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0120">
            <summary>
              Looks up a localized string similar to An object reference is required for the nonstatic field, method, or property {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0121">
            <summary>
              Looks up a localized string similar to The call is ambiguous between the following methods or properties: {0} and {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0122">
            <summary>
              Looks up a localized string similar to {0} is inaccessible due to its protection level.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0123">
            <summary>
              Looks up a localized string similar to No overload for {0} matches delegate {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0126">
            <summary>
              Looks up a localized string similar to An object of a type convertible to {0} is required.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0127">
            <summary>
              Looks up a localized string similar to Since {0} returns void, a return keyword must not be followed by an object expression.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0128">
            <summary>
              Looks up a localized string similar to A local variable named {0} is already defined in this scope.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0131">
            <summary>
              Looks up a localized string similar to The left-hand side of an assignment must be a variable, property or indexer.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0132">
            <summary>
              Looks up a localized string similar to {0} : a static constructor must be parameterless.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0133">
            <summary>
              Looks up a localized string similar to The expression being assigned to {0} must be constant.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0134">
            <summary>
              Looks up a localized string similar to {0} is of type {1}. A const field of a reference type other than string can only be initialized with null..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0135">
            <summary>
              Looks up a localized string similar to {0} conflicts with the declaration {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0136">
            <summary>
              Looks up a localized string similar to A local variable named {0} cannot be declared in this scope because it would give a different meaning to {0}, which is already used in a &apos;parent or current/child&apos; scope to denote something else.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0138">
            <summary>
              Looks up a localized string similar to A using namespace directive can only be applied to namespaces; {0} is a type not a namespace.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0139">
            <summary>
              Looks up a localized string similar to No enclosing loop out of which to break or continue.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0140">
            <summary>
              Looks up a localized string similar to The label {0} is a duplicate.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0143">
            <summary>
              Looks up a localized string similar to The type {0} has no constructors defined.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0144">
            <summary>
              Looks up a localized string similar to Cannot create an instance of the abstract class or interface {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0145">
            <summary>
              Looks up a localized string similar to A const field requires a value to be provided.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0146">
            <summary>
              Looks up a localized string similar to Circular base class dependency involving {0} and {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0148">
            <summary>
              Looks up a localized string similar to The delegate {0} does not have a valid constructor.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0149">
            <summary>
              Looks up a localized string similar to Method name expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0150">
            <summary>
              Looks up a localized string similar to A constant value is expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0151">
            <summary>
              Looks up a localized string similar to A value of an integral type expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0152">
            <summary>
              Looks up a localized string similar to The label {0} already occurs in this switch statement.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0153">
            <summary>
              Looks up a localized string similar to A goto case is only valid inside a switch statement.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0154">
            <summary>
              Looks up a localized string similar to The property or indexer &apos;property&apos; cannot be used in this context because it lacks the get accessor.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0155">
            <summary>
              Looks up a localized string similar to The type caught or thrown must be derived from System.Exception.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0156">
            <summary>
              Looks up a localized string similar to A throw statement with no arguments is not allowed in a finally clause that is nested inside the nearest enclosing catch clause.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0157">
            <summary>
              Looks up a localized string similar to Control cannot leave the body of a finally clause.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0158">
            <summary>
              Looks up a localized string similar to The label {0} shadows another label by the same name in a contained scope.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0159">
            <summary>
              Looks up a localized string similar to No such label {0} within the scope of the goto statement.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0160">
            <summary>
              Looks up a localized string similar to A previous catch clause already catches all exceptions of this or of a super type ({0}).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0161">
            <summary>
              Looks up a localized string similar to {0}: not all code paths return a value.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0163">
            <summary>
              Looks up a localized string similar to Control cannot fall through from one case label ({0}) to another.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0165">
            <summary>
              Looks up a localized string similar to Use of unassigned local variable {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0167">
            <summary>
              Looks up a localized string similar to The delegate {0} is missing the Invoke method.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0170">
            <summary>
              Looks up a localized string similar to Use of possibly unassigned field {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0171">
            <summary>
              Looks up a localized string similar to Backing field for automatically implemented property {0} must be fully assigned before control is returned to the caller. Consider calling the default constructor from a constructor initializer..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0172">
            <summary>
              Looks up a localized string similar to Type of conditional expression cannot be determined because {0} and {1} implicitly convert to one another.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0173">
            <summary>
              Looks up a localized string similar to Type of conditional expression cannot be determined because there is no implicit conversion between {0} and {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0174">
            <summary>
              Looks up a localized string similar to A base class is required for a &apos;base&apos; reference.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0175">
            <summary>
              Looks up a localized string similar to Use of keyword &apos;base&apos; is not valid in this context.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0176">
            <summary>
              Looks up a localized string similar to Static member {0} cannot be accessed with an instance reference; qualify it with a type name instead.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0177">
            <summary>
              Looks up a localized string similar to The out parameter {0} must be assigned to before control leaves the current method.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0178">
            <summary>
              Looks up a localized string similar to Invalid rank specifier: expected &apos;,&apos; or &apos;]&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0179">
            <summary>
              Looks up a localized string similar to {0} cannot be extern and declare a body.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0180">
            <summary>
              Looks up a localized string similar to {0} cannot be both extern and abstract.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0182">
            <summary>
              Looks up a localized string similar to An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0185">
            <summary>
              Looks up a localized string similar to {0} is not a reference type as required by the lock statement.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0186">
            <summary>
              Looks up a localized string similar to Use of null is not valid in this context .
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0188">
            <summary>
              Looks up a localized string similar to The &apos;this&apos; object cannot be used before all of its fields are assigned to.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0191">
            <summary>
              Looks up a localized string similar to Property or indexer {0} cannot be assigned to -- it is read only.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0192">
            <summary>
              Looks up a localized string similar to Fields of static readonly field {0} cannot be passed ref or out (except in a static constructor).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0193">
            <summary>
              Looks up a localized string similar to The * or -&gt; operator must be applied to a pointer.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0196">
            <summary>
              Looks up a localized string similar to A pointer must be indexed by only one value.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0198">
            <summary>
              Looks up a localized string similar to Fields of static readonly field {0} cannot be assigned to (except in a static constructor or a variable initializer).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0199">
            <summary>
              Looks up a localized string similar to Fields of static readonly field {0} cannot be passed ref or out (except in a static constructor).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0200">
            <summary>
              Looks up a localized string similar to Property or indexer {0} cannot be assigned to — it is read only.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0201">
            <summary>
              Looks up a localized string similar to Only assignment, call, increment, decrement, and new object expressions can be used as a statement.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0202">
            <summary>
              Looks up a localized string similar to foreach requires that the return type {0} of &apos;{1}.GetEnumerator()&apos; must have a suitable public MoveNext method and public Current property.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0204">
            <summary>
              Looks up a localized string similar to Only 65534 locals are allowed.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0205">
            <summary>
              Looks up a localized string similar to Cannot call an abstract base member: {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0206">
            <summary>
              Looks up a localized string similar to A property or indexer may not be passed as an out or ref parameter.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0208">
            <summary>
              Looks up a localized string similar to Cannot take the address of, get the size of, or declare a pointer to a managed type ({0}).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0209">
            <summary>
              Looks up a localized string similar to The type of local declared in a fixed statement must be a pointer type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0210">
            <summary>
              Looks up a localized string similar to You must provide an initializer in a fixed or using statement declaration.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0211">
            <summary>
              Looks up a localized string similar to Cannot take the address of the given expression.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0212">
            <summary>
              Looks up a localized string similar to You can only take the address of an unfixed expression inside of a fixed statement initializer.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0213">
            <summary>
              Looks up a localized string similar to You cannot use the fixed statement to take the address of an already fixed expression.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0214">
            <summary>
              Looks up a localized string similar to Pointers and fixed size buffers may only be used in an unsafe context.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0215">
            <summary>
              Looks up a localized string similar to The return type of operator True or False must be bool.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0216">
            <summary>
              Looks up a localized string similar to The operator {0} requires a matching operator {1} to also be defined.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0217">
            <summary>
              Looks up a localized string similar to In order to be applicable as a short circuit operator a user-defined logical operator ({0}) must have the same return type as the type of its 2 parameters..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0218">
            <summary>
              Looks up a localized string similar to The type ({0}) must contain declarations of operator true and operator false.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0220">
            <summary>
              Looks up a localized string similar to The operation overflows at compile time in checked mode.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0221">
            <summary>
              Looks up a localized string similar to Constant value {0} cannot be converted to a {1} (use &apos;unchecked&apos; syntax to override).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0225">
            <summary>
              Looks up a localized string similar to The params parameter must be a single dimensional array.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0226">
            <summary>
              Looks up a localized string similar to An __arglist expression may only appear inside of a call or new expression..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0227">
            <summary>
              Looks up a localized string similar to Unsafe code may only appear if compiling with /unsafe.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0228">
            <summary>
              Looks up a localized string similar to {0} does not contain a definition for {1}, or it is not accessible.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0229">
            <summary>
              Looks up a localized string similar to Ambiguity between {0} and {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0230">
            <summary>
              Looks up a localized string similar to Type and identifier are both required in a foreach statement.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0231">
            <summary>
              Looks up a localized string similar to A params parameter must be the last parameter in a formal parameter list..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0233">
            <summary>
              Looks up a localized string similar to {0} does not have a predefined size, therefore sizeof can only be used in an unsafe context (consider using System.Runtime.InteropServices.Marshal.SizeOf).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0234">
            <summary>
              Looks up a localized string similar to The type or namespace name {0} does not exist in the namespace {1} (are you missing an assembly reference?).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0236">
            <summary>
              Looks up a localized string similar to A field initializer cannot reference the nonstatic field, method, or property {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0238">
            <summary>
              Looks up a localized string similar to {0} cannot be sealed because it is not an override.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0239">
            <summary>
              Looks up a localized string similar to {0} : cannot override inherited member {1} because it is sealed.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0241">
            <summary>
              Looks up a localized string similar to Default parameter specifiers are not permitted.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0242">
            <summary>
              Looks up a localized string similar to The operation in question is undefined on void pointers.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0243">
            <summary>
              Looks up a localized string similar to The Conditional attribute is not valid on &apos;method&apos; because it is an override method.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0244">
            <summary>
              Looks up a localized string similar to Neither &apos;is&apos; nor &apos;as&apos; is valid on pointer types.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0245">
            <summary>
              Looks up a localized string similar to Destructors and object.Finalize cannot be called directly. Consider calling IDisposable.Dispose if available..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0246">
            <summary>
              Looks up a localized string similar to The type or namespace name {0} could not be found (are you missing a using directive or an assembly reference?).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0247">
            <summary>
              Looks up a localized string similar to Cannot use a negative size with stackalloc.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0248">
            <summary>
              Looks up a localized string similar to Cannot create an array with a negative size.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0249">
            <summary>
              Looks up a localized string similar to Do not override object.Finalize. Instead, provide a destructor..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0250">
            <summary>
              Looks up a localized string similar to Do not directly call your base class Finalize method. It is called automatically from your destructor..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0254">
            <summary>
              Looks up a localized string similar to The right hand side of a fixed statement assignment may not be a cast expression.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0255">
            <summary>
              Looks up a localized string similar to stackalloc may not be used in a catch or finally block.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0260">
            <summary>
              Looks up a localized string similar to Missing partial modifier on declaration of type {0}; another partial declaration of this type exists.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0261">
            <summary>
              Looks up a localized string similar to Partial declarations of {0} must be all classes, all structs, or all interfaces.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0262">
            <summary>
              Looks up a localized string similar to Partial declarations of {0} have conflicting accessibility modifiers.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0263">
            <summary>
              Looks up a localized string similar to Partial declarations of {0} must not specify different base classes.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0264">
            <summary>
              Looks up a localized string similar to Partial declarations of {0} must have the same type parameter names in the same order.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0265">
            <summary>
              Looks up a localized string similar to Partial declarations of {0} have inconsistent constraints for type parameter {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0266">
            <summary>
              Looks up a localized string similar to Cannot implicitly convert type {0} to {1}. An explicit conversion exists (are you missing a cast?).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0267">
            <summary>
              Looks up a localized string similar to The partial modifier can only appear immediately before &apos;class&apos;, &apos;struct&apos;, or &apos;interface&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0268">
            <summary>
              Looks up a localized string similar to Imported type {0} is invalid. It contains a circular base class dependency..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0269">
            <summary>
              Looks up a localized string similar to Use of unassigned out parameter {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0270">
            <summary>
              Looks up a localized string similar to Array size cannot be specified in a variable declaration (try initializing with a &apos;new&apos; expression).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0271">
            <summary>
              Looks up a localized string similar to The property or indexer {0} cannot be used in this context because the get accessor is inaccessible.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0272">
            <summary>
              Looks up a localized string similar to The property or indexer {0} cannot be used in this context because the set accessor is inaccessible.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0273">
            <summary>
              Looks up a localized string similar to The accessibility modifier of the {0} accessor must be more restrictive than the property or indexer {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0274">
            <summary>
              Looks up a localized string similar to Cannot specify accessibility modifiers for both accessors of the property or indexer {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0275">
            <summary>
              Looks up a localized string similar to {0}: accessibility modifiers may not be used on accessors in an interface.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0276">
            <summary>
              Looks up a localized string similar to {0}: accessibility modifiers on accessors may only be used if the property or indexer has both a get and a set accessor.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0277">
            <summary>
              Looks up a localized string similar to {0} does not implement interface member {1}. {2} is not public.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0281">
            <summary>
              Looks up a localized string similar to Friend access was granted to {0}, but the output assembly is named {1}. Try adding a reference to {0} or changing the output assembly name to match..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0283">
            <summary>
              Looks up a localized string similar to The type {0} cannot be declared const.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0304">
            <summary>
              Looks up a localized string similar to Cannot create an instance of the variable type {0} because it does not have the new() constraint.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0305">
            <summary>
              Looks up a localized string similar to Using the generic type {0} requires {1} type arguments.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0306">
            <summary>
              Looks up a localized string similar to The type {0} may not be used as a type argument.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0307">
            <summary>
              Looks up a localized string similar to The {0} {1} is not a generic method. If you intended an expression list, use parentheses around the &lt; expression..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0308">
            <summary>
              Looks up a localized string similar to The non-generic type-or-method {0} cannot be used with type arguments..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0310">
            <summary>
              Looks up a localized string similar to The type {0} must be a non-abstract type with a public parameterless constructor in order to use it as parameter {1} in the generic type or method {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0311">
            <summary>
              Looks up a localized string similar to The type {0} cannot be used as type parameter {2} in the generic type or method {3}. There is no implicit reference conversion from {0} to {1}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0312">
            <summary>
              Looks up a localized string similar to The type {0} cannot be used as type parameter {1} in the generic type or method {2}. The nullable type {0} does not satisfy the constraint of {3}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0313">
            <summary>
              Looks up a localized string similar to The type {0} cannot be used as type parameter {1} in the generic type or method {2}. The nullable type {0} does not satisfy the constraint of {2}. Nullable types cannot satisfy any interface constraints..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0314">
            <summary>
              Looks up a localized string similar to The type {0} cannot be used as type parameter {1} in the generic type or method {2}. There is no boxing conversion or type parameter conversion from {3} to {4}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0315">
            <summary>
              Looks up a localized string similar to The type {0} cannot be used as type parameter &apos;{1}&apos; in the generic type or method &apos;{2}&apos;. There is no boxing conversion from &apos;{3}&apos; to &apos;{4}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0316">
            <summary>
              Looks up a localized string similar to The parameter name {0} conflicts with an automatically-generated parameter name..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0400">
            <summary>
              Looks up a localized string similar to The type or namespace name {0} could not be found in the global namespace (are you missing an assembly reference?).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0401">
            <summary>
              Looks up a localized string similar to The new() constraint must be the last constraint specified.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0403">
            <summary>
              Looks up a localized string similar to Cannot convert null to type parameter {0} because it could be a non-nullable value type. Consider using default({0}) instead..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0404">
            <summary>
              Looks up a localized string similar to &apos;&lt;&apos; unexpected : attributes cannot be generic.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0405">
            <summary>
              Looks up a localized string similar to Duplicate constraint {0} for type parameter {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0406">
            <summary>
              Looks up a localized string similar to The class type constraint {0} must come before any other constraints.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0407">
            <summary>
              Looks up a localized string similar to {0} has the wrong return type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0409">
            <summary>
              Looks up a localized string similar to A constraint clause has already been specified for type parameter {0}. All of the constraints for a type parameter must be specified in a single where clause..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0410">
            <summary>
              Looks up a localized string similar to No overload for {0} has the correct parameter and return types.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0411">
            <summary>
              Looks up a localized string similar to The type arguments for method {0} cannot be inferred from the usage. Try specifying the type arguments explicitly..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0412">
            <summary>
              Looks up a localized string similar to {0}: a parameter or local variable cannot have the same name as a method type parameter.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0413">
            <summary>
              Looks up a localized string similar to The type parameter {0} cannot be used with the &apos;as&apos; operator because it does not have a class type constraint nor a constraint that is a class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0415">
            <summary>
              Looks up a localized string similar to The {0} attribute is valid only on an indexer that is not an explicit interface member declaration.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0416">
            <summary>
              Looks up a localized string similar to {0}: an attribute argument cannot use type parameters.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0417">
            <summary>
              Looks up a localized string similar to {0}: cannot provide arguments when creating an instance of a variable type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0418">
            <summary>
              Looks up a localized string similar to {0}: an abstract class cannot be sealed or static.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0423">
            <summary>
              Looks up a localized string similar to Since {0} has the ComImport attribute, {1} must be extern or abstract.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0424">
            <summary>
              Looks up a localized string similar to {0}: a class with the ComImport attribute cannot specify a base class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0425">
            <summary>
              Looks up a localized string similar to The constraints for type parameter {0} of method {1} must match the constraints for type parameter {2} of interface method {3}. Consider using an explicit interface implementation instead..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0426">
            <summary>
              Looks up a localized string similar to The type name {0} does not exist in the type {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0428">
            <summary>
              Looks up a localized string similar to Cannot convert method group {0} to non-delegate type {1}. Did you intend to invoke the method?.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0430">
            <summary>
              Looks up a localized string similar to The extern alias {0} was not specified in a /reference option.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0431">
            <summary>
              Looks up a localized string similar to Cannot use alias {0} with &apos;::&apos; since the alias references a type. Use &apos;.&apos; instead..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0432">
            <summary>
              Looks up a localized string similar to Alias {0} not found.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0433">
            <summary>
              Looks up a localized string similar to The type {0} exists in both {1} and {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0434">
            <summary>
              Looks up a localized string similar to The namespace {0} in {1} conflicts with the type {2} in {3}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0438">
            <summary>
              Looks up a localized string similar to The type {0} in {1} conflicts with the namespace {2} in {3}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0439">
            <summary>
              Looks up a localized string similar to An extern alias declaration must precede all other elements defined in the namespace.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0441">
            <summary>
              Looks up a localized string similar to {0}: a class cannot be both static and sealed.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0442">
            <summary>
              Looks up a localized string similar to {0}: abstract properties cannot have private accessors.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0443">
            <summary>
              Looks up a localized string similar to Syntax error, value expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0445">
            <summary>
              Looks up a localized string similar to Cannot modify the result of an unboxing conversion.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0446">
            <summary>
              Looks up a localized string similar to Foreach cannot operate on a {0}. Did you intend to invoke the {0}?.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0447">
            <summary>
              Looks up a localized string similar to Attributes cannot be used on type arguments, only on type parameters.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0448">
            <summary>
              Looks up a localized string similar to The return type for ++ or -- operator must be the containing type or derived from the containing type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0449">
            <summary>
              Looks up a localized string similar to The &apos;class&apos; or &apos;struct&apos; constraint must come before any other constraints.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0450">
            <summary>
              Looks up a localized string similar to {0}: cannot specify both a constraint class and the &apos;class&apos; or &apos;struct&apos; constraint.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0451">
            <summary>
              Looks up a localized string similar to The &apos;new()&apos; constraint cannot be used with the &apos;struct&apos; constraint.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0452">
            <summary>
              Looks up a localized string similar to The type {0} must be a reference type in order to use it as parameter {1} in the generic type or method {2}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0453">
            <summary>
              Looks up a localized string similar to The type {0} must be a non-nullable value type in order to use it as parameter {1} in the generic type or method {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0454">
            <summary>
              Looks up a localized string similar to Circular constraint dependency involving {0} and {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0455">
            <summary>
              Looks up a localized string similar to Type parameter {0} inherits conflicting constraints {1} and {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0456">
            <summary>
              Looks up a localized string similar to Type parameter {0} has the &apos;struct&apos; constraint so {0} cannot be used as a constraint for {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0457">
            <summary>
              Looks up a localized string similar to Ambiguous user defined conversions {0} and {1} when converting from {2} to {3}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0459">
            <summary>
              Looks up a localized string similar to Cannot take the address of a read-only local variable.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0460">
            <summary>
              Looks up a localized string similar to Constraints for override and explicit interface implementation methods are inherited from the base method, so they cannot be specified directly.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0462">
            <summary>
              Looks up a localized string similar to The inherited members {0} and {1} have the same signature in type {1}, so they cannot be overridden.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0463">
            <summary>
              Looks up a localized string similar to Evaluation of the decimal constant expression failed with error: {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0466">
            <summary>
              Looks up a localized string similar to {0} should not have a params parameter since {1} does not.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0468">
            <summary>
              Looks up a localized string similar to Ambiguity between type {0} and type {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0470">
            <summary>
              Looks up a localized string similar to Method {0} cannot implement interface accessor {1} for type {2}. Use an explicit interface implementation..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0471">
            <summary>
              Looks up a localized string similar to The method [0} is not a generic method. If you intended an expression list, use parentheses around the &amp;lt; expression..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0473">
            <summary>
              Looks up a localized string similar to Explicit interface implementation {0} matches more than one interface member. Which interface member is actually chosen is implementation-dependent. Consider using a non-explicit implementation instead..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0500">
            <summary>
              Looks up a localized string similar to {0} cannot declare a body because it is marked abstract.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0501">
            <summary>
              Looks up a localized string similar to {0} must declare a body because it is not marked abstract, extern, or partial.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0502">
            <summary>
              Looks up a localized string similar to {0} cannot be both abstract and sealed.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0503">
            <summary>
              Looks up a localized string similar to The abstract method {0} cannot be marked virtual.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0504">
            <summary>
              Looks up a localized string similar to The constant {0} cannot be marked static.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0505">
            <summary>
              Looks up a localized string similar to {0}: cannot override because {1} is not a function.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0506">
            <summary>
              Looks up a localized string similar to {0} : cannot override inherited member {1} because it is not marked &apos;virtual&apos;, &apos;abstract&apos;, or &apos;override&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0507">
            <summary>
              Looks up a localized string similar to {0} : cannot change access modifiers when overriding {1} inherited member {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0508">
            <summary>
              Looks up a localized string similar to {0}: return type must be {1} to match overridden member {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0509">
            <summary>
              Looks up a localized string similar to {0} : cannot derive from sealed type {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0513">
            <summary>
              Looks up a localized string similar to {0} is abstract but it is contained in nonabstract class {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0514">
            <summary>
              Looks up a localized string similar to {0} : static constructor cannot have an explicit &apos;this&apos; or &apos;base&apos; constructor call.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0515">
            <summary>
              Looks up a localized string similar to {0} : access modifiers are not allowed on static constructors.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0516">
            <summary>
              Looks up a localized string similar to Constructor {0} can not call itself.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0517">
            <summary>
              Looks up a localized string similar to {0} has no base class and cannot call a base constructor.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0518">
            <summary>
              Looks up a localized string similar to Predefined type {0} is not defined or imported.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0520">
            <summary>
              Looks up a localized string similar to Predefined type {0} is declared incorrectly.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0522">
            <summary>
              Looks up a localized string similar to {0} : structs cannot call base class constructors.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0523">
            <summary>
              Looks up a localized string similar to Struct member {0} of type {1} causes a cycle in the struct layout.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0524">
            <summary>
              Looks up a localized string similar to {0} : interfaces cannot declare types.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0525">
            <summary>
              Looks up a localized string similar to Interfaces cannot contain fields.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0526">
            <summary>
              Looks up a localized string similar to Interfaces cannot contain constructors.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0527">
            <summary>
              Looks up a localized string similar to Type {0} in interface list is not an interface.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0528">
            <summary>
              Looks up a localized string similar to {0} is already listed in interface list.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0529">
            <summary>
              Looks up a localized string similar to Inherited interface {0} causes a cycle in the interface hierarchy of {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0531">
            <summary>
              Looks up a localized string similar to {0} : interface members cannot have a definition.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0533">
            <summary>
              Looks up a localized string similar to {0} hides inherited abstract member {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0534">
            <summary>
              Looks up a localized string similar to {0} does not implement inherited abstract member {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0535">
            <summary>
              Looks up a localized string similar to {0} does not implement interface member {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0537">
            <summary>
              Looks up a localized string similar to The class System.Object cannot have a base class or implement an interface.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0538">
            <summary>
              Looks up a localized string similar to {0} in explicit interface declaration is not an interface.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0539">
            <summary>
              Looks up a localized string similar to {0} in explicit interface declaration is not a member of interface.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0540">
            <summary>
              Looks up a localized string similar to {0} : containing type does not implement interface {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0541">
            <summary>
              Looks up a localized string similar to {0} : explicit interface declaration can only be declared in a class or struct.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0542">
            <summary>
              Looks up a localized string similar to {0} : member names cannot be the same as their enclosing type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0543">
            <summary>
              Looks up a localized string similar to {0} : the enumerator value is too large to fit in its type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0544">
            <summary>
              Looks up a localized string similar to {0}: cannot override because {1} is not a property.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0545">
            <summary>
              Looks up a localized string similar to {0} : cannot override because {1} does not have an overridable get accessor.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0546">
            <summary>
              Looks up a localized string similar to {0} : cannot override because {1} does not have an overridable set accessor.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0547">
            <summary>
              Looks up a localized string similar to {0} : property or indexer cannot have void type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0548">
            <summary>
              Looks up a localized string similar to {0} : property or indexer must have at least one accessor.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0549">
            <summary>
              Looks up a localized string similar to {0} is a new virtual member in sealed class {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0550">
            <summary>
              Looks up a localized string similar to {0} adds an accessor not found in interface member {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0551">
            <summary>
              Looks up a localized string similar to Explicit interface implementation {0} is missing accessor {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0552">
            <summary>
              Looks up a localized string similar to {0} : user defined conversion to/from interface.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0553">
            <summary>
              Looks up a localized string similar to {0} : user defined conversion to/from base class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0554">
            <summary>
              Looks up a localized string similar to {0} : user defined conversion to/from derived class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0555">
            <summary>
              Looks up a localized string similar to User-defined operator cannot take an object of the enclosing type and convert to an object of the enclosing type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0556">
            <summary>
              Looks up a localized string similar to User-defined conversion must convert to or from the enclosing type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0557">
            <summary>
              Looks up a localized string similar to Duplicate user-defined conversion in type {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0558">
            <summary>
              Looks up a localized string similar to User-defined operator {0} must be declared static and public.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0559">
            <summary>
              Looks up a localized string similar to The parameter type for ++ or -- operator must be the containing type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0562">
            <summary>
              Looks up a localized string similar to The parameter of a unary operator must be the containing type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0563">
            <summary>
              Looks up a localized string similar to One of the parameters of a binary operator must be the containing type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0564">
            <summary>
              Looks up a localized string similar to The first operand of an overloaded shift operator must have the same type as the containing type, and the type of the second operand must be int.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0567">
            <summary>
              Looks up a localized string similar to Interfaces cannot contain operators.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0568">
            <summary>
              Looks up a localized string similar to Structs cannot contain explicit parameterless constructors.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0569">
            <summary>
              Looks up a localized string similar to {1} : cannot override {0} because it is not supported by the language.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0570">
            <summary>
              Looks up a localized string similar to Property, indexer, or event {0} is not supported by the language; try directly calling accessor method {1}!.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0571">
            <summary>
              Looks up a localized string similar to {0} : cannot explicitly call operator or accessor.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0572">
            <summary>
              Looks up a localized string similar to {0} : cannot reference a type through an expression; try {1} instead.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0573">
            <summary>
              Looks up a localized string similar to {0} : cannot have instance field initializers in structs.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0574">
            <summary>
              Looks up a localized string similar to Name of destructor must match name of class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0575">
            <summary>
              Looks up a localized string similar to Only class types can contain destructors.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0576">
            <summary>
              Looks up a localized string similar to Namespace {0} contains a definition conflicting with alias {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0577">
            <summary>
              Looks up a localized string similar to The Conditional attribute is not valid on {0} because it is a constructor, destructor, operator, or explicit interface implementation.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0578">
            <summary>
              Looks up a localized string similar to The Conditional attribute is not valid on {0} because its return type is not void.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0579">
            <summary>
              Looks up a localized string similar to Duplicate {0} attribute.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0582">
            <summary>
              Looks up a localized string similar to The Conditional not valid on interface members.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0583">
            <summary>
              Looks up a localized string similar to Internal Compiler Error. An internal error has occurred in the compiler. To work around this problem, try simplifying or changing the program near the locations listed below. Locations at the top of the list are closer to the point at which the internal error occurred. Errors such as this can be reported to Microsoft by using the /errorreport option..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0584">
            <summary>
              Looks up a localized string similar to Internal Compiler Error: stage {0} symbol {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0585">
            <summary>
              Looks up a localized string similar to Internal Compiler Error: stage {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0586">
            <summary>
              Looks up a localized string similar to Internal Compiler Error: stage {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0587">
            <summary>
              Looks up a localized string similar to Internal Compiler Error: stage {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0588">
            <summary>
              Looks up a localized string similar to Internal Compiler Error: stage &apos;LEX&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0589">
            <summary>
              Looks up a localized string similar to Internal Compiler Error: stage &apos;PARSE&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0590">
            <summary>
              Looks up a localized string similar to User-defined operators cannot return void.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0591">
            <summary>
              Looks up a localized string similar to Invalid value for argument to {0} attribute.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0592">
            <summary>
              Looks up a localized string similar to Attribute {0} is not valid on this declaration type. It is valid on {1} declarations only..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0594">
            <summary>
              Looks up a localized string similar to Floating-point constant is outside the range of type {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0596">
            <summary>
              Looks up a localized string similar to The Guid attribute must be specified with the ComImport attribute.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0599">
            <summary>
              Looks up a localized string similar to Invalid value for named attribute argument {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0601">
            <summary>
              Looks up a localized string similar to The DllImport attribute must be specified on a method marked &apos;static&apos; and &apos;extern&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0609">
            <summary>
              Looks up a localized string similar to Cannot set the IndexerName attribute on an indexer marked override.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0610">
            <summary>
              Looks up a localized string similar to Field or property cannot be of type {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0611">
            <summary>
              Looks up a localized string similar to Array elements cannot be of type {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0616">
            <summary>
              Looks up a localized string similar to {0} is not an attribute class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0617">
            <summary>
              Looks up a localized string similar to {0} is not a valid named attribute argument because it is not a valid attribute parameter type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0619">
            <summary>
              Looks up a localized string similar to {0} is obsolete: {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0620">
            <summary>
              Looks up a localized string similar to Indexers cannot have void type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0621">
            <summary>
              Looks up a localized string similar to {0} : virtual or abstract members cannot be private.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0622">
            <summary>
              Looks up a localized string similar to Can only use array initializer expressions to assign to array types. Try using a new expression instead..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0623">
            <summary>
              Looks up a localized string similar to Array initializers can only be used in a variable or field initializer. Try using a new expression instead..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0625">
            <summary>
              Looks up a localized string similar to {0}: instance field types marked with StructLayout(LayoutKind.Explicit) must have a FieldOffset attribute.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0629">
            <summary>
              Looks up a localized string similar to Conditional member {0} cannot implement interface member {1} in type {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0631">
            <summary>
              Looks up a localized string similar to ref and out are not valid in this context.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0633">
            <summary>
              Looks up a localized string similar to The argument to the {0} attribute must be a valid identifier.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0635">
            <summary>
              Looks up a localized string similar to {0} : System.Interop.UnmanagedType.CustomMarshaller requires named arguments ComType and Marshal.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0636">
            <summary>
              Looks up a localized string similar to The FieldOffset attribute can only be placed on members of types marked with the StructLayout(LayoutKind.Explicit).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0637">
            <summary>
              Looks up a localized string similar to The FieldOffset attribute is not allowed on static or const fields.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0641">
            <summary>
              Looks up a localized string similar to {0} : attribute is only valid on classes derived from System.Attribute.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0643">
            <summary>
              Looks up a localized string similar to {0} duplicate named attribute argument.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0644">
            <summary>
              Looks up a localized string similar to {0} cannot derive from special class {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0645">
            <summary>
              Looks up a localized string similar to Identifier too long.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0646">
            <summary>
              Looks up a localized string similar to Cannot specify the DefaultMember attribute on a type containing an indexer.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0647">
            <summary>
              Looks up a localized string similar to Error emitting {0} attribute -- {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0648">
            <summary>
              Looks up a localized string similar to {0} is a type not supported by the language.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0650">
            <summary>
              Looks up a localized string similar to Bad array declarator: To declare a managed array the rank specifier precedes the variable&apos;s identifier. To declare a fixed size buffer field, use the fixed keyword before the field type..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0653">
            <summary>
              Looks up a localized string similar to Cannot apply attribute class {0} because it is abstract.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0655">
            <summary>
              Looks up a localized string similar to {0} is not a valid named attribute argument because it is not a valid attribute parameter type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0656">
            <summary>
              Looks up a localized string similar to Missing compiler required member {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0662">
            <summary>
              Looks up a localized string similar to {0} cannot specify only Out attribute on a ref parameter. Use both In and Out attributes, or neither..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0663">
            <summary>
              Looks up a localized string similar to Cannot define overloaded methods that differ only on ref and out..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0664">
            <summary>
              Looks up a localized string similar to Literal of type double cannot be implicitly converted to type {0}; use an {1} suffix to create a literal of this type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0666">
            <summary>
              Looks up a localized string similar to {0} : new protected member declared in struct.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0667">
            <summary>
              Looks up a localized string similar to The feature {0} is deprecated. Please use {1} instead..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0668">
            <summary>
              Looks up a localized string similar to Two indexers have different names; the IndexerName attribute must be used with the same name on every indexer within a type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0669">
            <summary>
              Looks up a localized string similar to A class with the ComImport attribute cannot have a user-defined constructor.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0670">
            <summary>
              Looks up a localized string similar to Field cannot have void type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0673">
            <summary>
              Looks up a localized string similar to System.Void cannot be used from C# -- use typeof(void) to get the void type object..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0674">
            <summary>
              Looks up a localized string similar to Do not use &apos;System.ParamArrayAttribute&apos;. Use the &apos;params&apos; keyword instead..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0677">
            <summary>
              Looks up a localized string similar to {0}: a volatile field cannot be of the type {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0678">
            <summary>
              Looks up a localized string similar to {0}: a field can not be both volatile and readonly.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0681">
            <summary>
              Looks up a localized string similar to The modifier &apos;abstract&apos; is not valid on fields. Try using a property instead.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0682">
            <summary>
              Looks up a localized string similar to {0} cannot implement {1} because it is not supported by the language.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0683">
            <summary>
              Looks up a localized string similar to {0} explicit method implementation cannot implement {1} because it is an accessor.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0685">
            <summary>
              Looks up a localized string similar to Conditional member {0} cannot have an out parameter.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0686">
            <summary>
              Looks up a localized string similar to Accessor {0} cannot implement interface member {1} for type {2}. Use an explicit interface implementation..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0687">
            <summary>
              Looks up a localized string similar to The namespace alias qualifier &apos;::&apos; always resolves to a type or namespace so is illegal here. Consider using &apos;.&apos; instead..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0689">
            <summary>
              Looks up a localized string similar to Cannot derive from {0} because it is a type parameter.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0690">
            <summary>
              Looks up a localized string similar to Input file {0} contains invalid metadata..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0692">
            <summary>
              Looks up a localized string similar to Duplicate type parameter {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0694">
            <summary>
              Looks up a localized string similar to Type parameter {0} has the same name as the containing type, or method.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0695">
            <summary>
              Looks up a localized string similar to {0} cannot implement both {1} and {1} because they may unify for some type parameter substitutions.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0698">
            <summary>
              Looks up a localized string similar to A generic type cannot derive from {0} because it is an attribute class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0699">
            <summary>
              Looks up a localized string similar to {0} does not define type parameter {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0701">
            <summary>
              Looks up a localized string similar to {0} is not a valid constraint. A type used as a constraint must be an interface, a non-sealed class or a type parameter..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0702">
            <summary>
              Looks up a localized string similar to Constraint cannot be special class {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0703">
            <summary>
              Looks up a localized string similar to Inconsistent accessibility: constraint type {0} is less accessible than {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0704">
            <summary>
              Looks up a localized string similar to Cannot do member lookup in {0} because it is a type parameter.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0706">
            <summary>
              Looks up a localized string similar to Invalid constraint type. A type used as a constraint must be an interface, a non-sealed class or a type parameter..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0708">
            <summary>
              Looks up a localized string similar to {0}: cannot declare instance members in a static class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0709">
            <summary>
              Looks up a localized string similar to {0}: cannot derive from static class {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0710">
            <summary>
              Looks up a localized string similar to Static classes cannot have instance constructors.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0711">
            <summary>
              Looks up a localized string similar to Static classes cannot contain destructors.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0712">
            <summary>
              Looks up a localized string similar to Cannot create an instance of the static class {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0713">
            <summary>
              Looks up a localized string similar to Static class {0} cannot derive from type {1}. Static classes must derive from object..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0714">
            <summary>
              Looks up a localized string similar to {0} : static classes cannot implement interfaces.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0715">
            <summary>
              Looks up a localized string similar to {0} : static classes cannot contain user defined operators.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0716">
            <summary>
              Looks up a localized string similar to Cannot convert to static type {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0717">
            <summary>
              Looks up a localized string similar to {0}: static classes cannot be used as constraints.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0718">
            <summary>
              Looks up a localized string similar to {0}: static types cannot be used as type arguments.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0719">
            <summary>
              Looks up a localized string similar to {0}: array elements cannot be of static type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0720">
            <summary>
              Looks up a localized string similar to {0}: cannot declare indexers in a static class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0721">
            <summary>
              Looks up a localized string similar to {0}: static types cannot be used as parameters.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0722">
            <summary>
              Looks up a localized string similar to {0}: static types cannot be used as return types.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0723">
            <summary>
              Looks up a localized string similar to Cannot declare variable of static type {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0724">
            <summary>
              Looks up a localized string similar to does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0729">
            <summary>
              Looks up a localized string similar to Type {0} is defined in this assembly, but a type forwarder is specified for it.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0730">
            <summary>
              Looks up a localized string similar to Cannot forward type {0} because it is a nested type of {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0731">
            <summary>
              Looks up a localized string similar to The type forwarder for type {0} in assembly {1} causes a cycle.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0733">
            <summary>
              Looks up a localized string similar to Cannot forward generic type, {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0734">
            <summary>
              Looks up a localized string similar to The /moduleassemblyname option may only be specified when building a target type of &apos;module&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0735">
            <summary>
              Looks up a localized string similar to Invalid type specified as an argument for TypeForwardedTo attribute.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0736">
            <summary>
              Looks up a localized string similar to {0} does not implement interface member {1}. {2} cannot implement an interface member because it is static..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0737">
            <summary>
              Looks up a localized string similar to {0} does not implement interface member {1}. {2} cannot implement an interface member because it is not public..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0738">
            <summary>
              Looks up a localized string similar to {0} does not implement interface member {1}. {2} cannot implement {1} because it does not have the matching return type of {3}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0739">
            <summary>
              Looks up a localized string similar to {0} duplicate TypeForwardedToAttribute..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0742">
            <summary>
              Looks up a localized string similar to A query body must end with a select clause or a group clause.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0743">
            <summary>
              Looks up a localized string similar to Expected contextual keyword &apos;on&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0744">
            <summary>
              Looks up a localized string similar to Expected contextual keyword &apos;equals&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0745">
            <summary>
              Looks up a localized string similar to Expected contextual keyword &apos;by&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0746">
            <summary>
              Looks up a localized string similar to Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0747">
            <summary>
              Looks up a localized string similar to Invalid initializer member declarator..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0748">
            <summary>
              Looks up a localized string similar to Inconsistent lambda parameter usage; all parameter types must either be explicit or implicit..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0750">
            <summary>
              Looks up a localized string similar to A partial method cannot have access modifiers or the virtual, abstract, override, new, sealed, or extern modifiers..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0751">
            <summary>
              Looks up a localized string similar to A partial method must be declared in a partial class or partial struct.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0752">
            <summary>
              Looks up a localized string similar to A partial method cannot have out parameters.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0753">
            <summary>
              Looks up a localized string similar to Only methods, classes, structs, or interfaces may be partial..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0754">
            <summary>
              Looks up a localized string similar to A partial method may not explicitly implement an interface method..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0755">
            <summary>
              Looks up a localized string similar to Both partial method declarations must be extension methods or neither may be an extension method..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0756">
            <summary>
              Looks up a localized string similar to A partial method may not have multiple defining declarations..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0757">
            <summary>
              Looks up a localized string similar to A partial method may not have multiple implementing declarations..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0758">
            <summary>
              Looks up a localized string similar to Both partial method declarations must use a params parameter or neither may use a params parameter.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0759">
            <summary>
              Looks up a localized string similar to No defining declaration found for implementing declaration of partial method {0}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0761">
            <summary>
              Looks up a localized string similar to Partial method declarations of {0} have inconsistent type parameter constraints..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0762">
            <summary>
              Looks up a localized string similar to Cannot create delegate from method {0} because it is a partial method without an implementing declaration.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0763">
            <summary>
              Looks up a localized string similar to Both partial method declarations must be static or neither may be static..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0764">
            <summary>
              Looks up a localized string similar to Both partial method declarations must be unsafe or neither may be unsafe.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0765">
            <summary>
              Looks up a localized string similar to Partial methods with only a defining declaration or removed conditional methods cannot be used in expression trees.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0766">
            <summary>
              Looks up a localized string similar to Partial methods must have a void return type..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0811">
            <summary>
              Looks up a localized string similar to The fully qualified name for {0} is too long for debug information. Compile without &apos;/debug&apos; option..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0815">
            <summary>
              Looks up a localized string similar to Cannot assign {0} to an implicitly typed local.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0818">
            <summary>
              Looks up a localized string similar to Implicitly typed locals must be initialized.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0819">
            <summary>
              Looks up a localized string similar to Implicitly typed locals cannot have multiple declarators..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0820">
            <summary>
              Looks up a localized string similar to Cannot assign array initializer to an implicitly typed local.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0821">
            <summary>
              Looks up a localized string similar to Implicitly typed locals cannot be fixed.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0822">
            <summary>
              Looks up a localized string similar to Implicitly typed locals cannot be const.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0825">
            <summary>
              Looks up a localized string similar to The contextual keyword &apos;var&apos; may only appear within a local variable declaration..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0826">
            <summary>
              Looks up a localized string similar to No best type found for implicitly typed array..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0828">
            <summary>
              Looks up a localized string similar to Cannot assign {0} to anonymous type property..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0831">
            <summary>
              Looks up a localized string similar to An expression tree may not contain a base access..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0832">
            <summary>
              Looks up a localized string similar to An expression tree may not contain an assignment operator..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0833">
            <summary>
              Looks up a localized string similar to An anonymous type cannot have multiple properties with the same name..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0834">
            <summary>
              Looks up a localized string similar to A lambda expression must have an expression body to be converted to an expression tree..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0835">
            <summary>
              Looks up a localized string similar to Cannot convert lambda to an expression tree whose type argument {0} is not a delegate type..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0836">
            <summary>
              Looks up a localized string similar to Cannot use anonymous type in a constant expression..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0837">
            <summary>
              Looks up a localized string similar to The first operand of an &apos;is&apos; or &apos;as&apos; operator may not be a lambda expression or anonymous method..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0838">
            <summary>
              Looks up a localized string similar to An expression tree may not contain a multidimensional array initializer..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0839">
            <summary>
              Looks up a localized string similar to Argument missing..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0840">
            <summary>
              Looks up a localized string similar to {0} must declare a body because it is not marked abstract or extern. Automatically implemented properties must define both get and set accessors..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0841">
            <summary>
              Looks up a localized string similar to Cannot use variable {0} before it is declared..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0842">
            <summary>
              Looks up a localized string similar to Automatically implemented properties cannot be used inside a type marked with StructLayout(LayoutKind.Explicit)..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0843">
            <summary>
              Looks up a localized string similar to Backing field for automatically implemented property {0} must be fully assigned before control is returned to the caller. Consider calling the default constructor from a constructor initializer..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0844">
            <summary>
              Looks up a localized string similar to Cannot use local variable {0} before it is declared. The declaration of the local variable hides the field {0}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS0845">
            <summary>
              Looks up a localized string similar to An expression tree lambda may not contain a coalescing operator with a null literal left-hand side..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1001">
            <summary>
              Looks up a localized string similar to Identifier expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1002">
            <summary>
              Looks up a localized string similar to ; expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1003">
            <summary>
              Looks up a localized string similar to Syntax error, &apos;char&apos; expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1004">
            <summary>
              Looks up a localized string similar to Duplicate {0} modifier.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1007">
            <summary>
              Looks up a localized string similar to Property accessor already defined.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1008">
            <summary>
              Looks up a localized string similar to Type byte, sbyte, short, ushort, int, uint, long, or ulong expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1009">
            <summary>
              Looks up a localized string similar to Unrecognized escape sequence.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1010">
            <summary>
              Looks up a localized string similar to Newline in constant.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1011">
            <summary>
              Looks up a localized string similar to Empty character literal.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1012">
            <summary>
              Looks up a localized string similar to Too many characters in character literal.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1013">
            <summary>
              Looks up a localized string similar to Invalid number.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1014">
            <summary>
              Looks up a localized string similar to A get or set accessor expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1015">
            <summary>
              Looks up a localized string similar to An object, string, or class type expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1016">
            <summary>
              Looks up a localized string similar to Named attribute argument expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1017">
            <summary>
              Looks up a localized string similar to Catch clauses cannot follow the general catch clause of a try statement.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1018">
            <summary>
              Looks up a localized string similar to Keyword &apos;this&apos; or &apos;base&apos; expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1019">
            <summary>
              Looks up a localized string similar to Overloadable unary operator expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1020">
            <summary>
              Looks up a localized string similar to Overloadable binary operator expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1021">
            <summary>
              Looks up a localized string similar to Integral constant is too large.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1022">
            <summary>
              Looks up a localized string similar to Type or namespace definition, or end-of-file expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1023">
            <summary>
              Looks up a localized string similar to Embedded statement cannot be a declaration or labeled statement.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1024">
            <summary>
              Looks up a localized string similar to Preprocessor directive expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1025">
            <summary>
              Looks up a localized string similar to Single-line comment or end-of-line expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1026">
            <summary>
              Looks up a localized string similar to ) expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1027">
            <summary>
              Looks up a localized string similar to #endif directive expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1028">
            <summary>
              Looks up a localized string similar to Unexpected preprocessor directive.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1029">
            <summary>
              Looks up a localized string similar to #error: {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1031">
            <summary>
              Looks up a localized string similar to Type expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1032">
            <summary>
              Looks up a localized string similar to Cannot define/undefine preprocessor symbols after first token in file.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1033">
            <summary>
              Looks up a localized string similar to Source file has exceeded the limit of 16,707,565 lines representable in the PDB; debug information will be incorrect.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1034">
            <summary>
              Looks up a localized string similar to Compiler limit exceeded: Line cannot exceed &apos;number&apos; characters.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1035">
            <summary>
              Looks up a localized string similar to End-of-file found, &apos;*/&apos; expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1036">
            <summary>
              Looks up a localized string similar to ( or . expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1037">
            <summary>
              Looks up a localized string similar to Overloadable operator expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1038">
            <summary>
              Looks up a localized string similar to #endregion directive expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1039">
            <summary>
              Looks up a localized string similar to Unterminated string literal.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1040">
            <summary>
              Looks up a localized string similar to Preprocessor directives must appear as the first non-whitespace character on a line.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1041">
            <summary>
              Looks up a localized string similar to Identifier expected, &apos;keyword&apos; is a keyword.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1043">
            <summary>
              Looks up a localized string similar to { or ; expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1044">
            <summary>
              Looks up a localized string similar to Cannot use more than one type in a for, using, fixed, or declaration statement.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1055">
            <summary>
              Looks up a localized string similar to An add or remove accessor expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1056">
            <summary>
              Looks up a localized string similar to Unexpected character &apos;character&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1057">
            <summary>
              Looks up a localized string similar to {0}: static classes cannot contain protected members.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1059">
            <summary>
              Looks up a localized string similar to The operand of an increment or decrement operator must be a variable, property or indexer..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1061">
            <summary>
              Looks up a localized string similar to {0} does not contain a definition for {1} and no extension method {2} accepting a first argument of type {0} could be found (are you missing a using directive or an assembly reference?)..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1100">
            <summary>
              Looks up a localized string similar to Method {0} has a parameter modifier &apos;this&apos; which is not on the first parameter..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1101">
            <summary>
              Looks up a localized string similar to The parameter modifier &apos;ref&apos; cannot be used with &apos;this&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1102">
            <summary>
              Looks up a localized string similar to The parameter modifier &apos;out&apos; cannot be used with &apos;this&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1103">
            <summary>
              Looks up a localized string similar to The first parameter of an extension method cannot be of type {0}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1104">
            <summary>
              Looks up a localized string similar to A parameter array cannot be used with &apos;this&apos; modifier on an extension method..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1105">
            <summary>
              Looks up a localized string similar to Extension methods must be static..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1106">
            <summary>
              Looks up a localized string similar to Extension methods must be defined in a non generic static class..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1107">
            <summary>
              Looks up a localized string similar to A parameter can only have one {0} modifier..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1108">
            <summary>
              Looks up a localized string similar to A parameter cannot have all the specified modifiers; there are too many modifiers on the parameter..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1109">
            <summary>
              Looks up a localized string similar to Extension Methods must be defined on top level static classes, {0} is a nested class..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1110">
            <summary>
              Looks up a localized string similar to Cannot use &apos;this&apos; modifier on first parameter of method declaration without a reference to System.Core.dll. Add a reference to System.Core.dll or remove &apos;this&apos; modifier from the method declaration..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1112">
            <summary>
              Looks up a localized string similar to Do not use &apos;System.Runtime.CompilerServices.ExtensionAttribute&apos;. Use the &apos;this&apos; keyword instead..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1113">
            <summary>
              Looks up a localized string similar to Extension methods {0} defined on value type {1} cannot be used to create delegates..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1501">
            <summary>
              Looks up a localized string similar to No overload for method {0} takes {1} arguments.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1502">
            <summary>
              Looks up a localized string similar to The best overloaded Add method {0} for the collection initializer has some invalid arguments.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1503">
            <summary>
              Looks up a localized string similar to The best overloaded Add method {0} for the collection initializer has some invalid arguments.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1504">
            <summary>
              Looks up a localized string similar to Source file {0} could not be opened ({1}).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1507">
            <summary>
              Looks up a localized string similar to Cannot link resource file {0} when building a module.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1508">
            <summary>
              Looks up a localized string similar to Resource identifier {0} has already been used in this assembly.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1509">
            <summary>
              Looks up a localized string similar to Referenced file {0} is not an assembly; use &apos;/addmodule&apos; option instead.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1510">
            <summary>
              Looks up a localized string similar to A ref or out argument must be an assignable variable.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1511">
            <summary>
              Looks up a localized string similar to Keyword &apos;base&apos; is not available in a static method.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1512">
            <summary>
              Looks up a localized string similar to Keyword &apos;base&apos; is not available in the current context.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1513">
            <summary>
              Looks up a localized string similar to } expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1514">
            <summary>
              Looks up a localized string similar to { expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1515">
            <summary>
              Looks up a localized string similar to &apos;in&apos; expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1517">
            <summary>
              Looks up a localized string similar to Invalid preprocessor expression.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1518">
            <summary>
              Looks up a localized string similar to Expected class, delegate, enum, interface, or struct.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1519">
            <summary>
              Looks up a localized string similar to Invalid token {0} in class, struct, or interface member declaration.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1520">
            <summary>
              Looks up a localized string similar to Method must have a return type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1521">
            <summary>
              Looks up a localized string similar to Invalid base type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1524">
            <summary>
              Looks up a localized string similar to Expected catch or finally.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1525">
            <summary>
              Looks up a localized string similar to Invalid expression term {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1526">
            <summary>
              Looks up a localized string similar to A new expression requires (), [], or {} after type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1527">
            <summary>
              Looks up a localized string similar to Elements defined in a namespace cannot be explicitly declared as private, protected, or protected internal.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1528">
            <summary>
              Looks up a localized string similar to Expected ; or = (cannot specify constructor arguments in declaration).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1529">
            <summary>
              Looks up a localized string similar to A using clause must precede all other elements defined in the namespace except extern alias declarations.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1530">
            <summary>
              Looks up a localized string similar to Keyword &apos;new&apos; is not allowed on elements defined in a namespace.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1534">
            <summary>
              Looks up a localized string similar to Overloaded binary operator {0} takes two parameters.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1535">
            <summary>
              Looks up a localized string similar to Overloaded unary operator {0} takes one parameter.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1536">
            <summary>
              Looks up a localized string similar to Invalid parameter type void.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1537">
            <summary>
              Looks up a localized string similar to The using alias {0} appeared previously in this namespace.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1540">
            <summary>
              Looks up a localized string similar to Cannot access protected member {0} via a qualifier of type {1}; the qualifier must be of type {2} (or derived from it).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1541">
            <summary>
              Looks up a localized string similar to Invalid reference option: {0} — cannot reference directories.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1542">
            <summary>
              Looks up a localized string similar to {0} cannot be added to this assembly because it already is an assembly; use &apos;/R&apos; option instead.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1545">
            <summary>
              Looks up a localized string similar to Property, indexer, or event {0} is not supported by the language; try directly calling accessor methods {1} or {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1546">
            <summary>
              Looks up a localized string similar to Property, indexer, or event {0} is not supported by the language; try directly calling accessor method {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1547">
            <summary>
              Looks up a localized string similar to Keyword &apos;void&apos; cannot be used in this context.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1548">
            <summary>
              Looks up a localized string similar to Cryptographic failure while signing assembly {0} — {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1549">
            <summary>
              Looks up a localized string similar to Appropriate cryptographic service not found.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1551">
            <summary>
              Looks up a localized string similar to Indexers must have at least one parameter.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1552">
            <summary>
              Looks up a localized string similar to Array type specifier, [], must appear before parameter name.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1553">
            <summary>
              Looks up a localized string similar to Declaration is not valid; use &apos;{0} operator {1} (...&apos; instead.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1554">
            <summary>
              Looks up a localized string similar to Declaration is not valid; use &apos;{0} operator {1} (...&apos; instead.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1555">
            <summary>
              Looks up a localized string similar to Could not find {0} specified for Main method.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1556">
            <summary>
              Looks up a localized string similar to {0} specified for Main method must be a valid class or struct.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1557">
            <summary>
              Looks up a localized string similar to Cannot use {0} for Main method because it is in a different output file.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1558">
            <summary>
              Looks up a localized string similar to {0} does not have a suitable static Main method.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1559">
            <summary>
              Looks up a localized string similar to Cannot use {0} for Main method because it is imported.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1560">
            <summary>
              Looks up a localized string similar to Invalid filename specified for preprocessor directive. Filename is too long or not a valid filename.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1561">
            <summary>
              Looks up a localized string similar to Output filename is too long or invalid.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1562">
            <summary>
              Looks up a localized string similar to Outputs without source must have the /out option specified.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1563">
            <summary>
              Looks up a localized string similar to Output {0} does not have any source files.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1564">
            <summary>
              Looks up a localized string similar to Conflicting options specified: Win32 resource file; Win32 manifest..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1565">
            <summary>
              Looks up a localized string similar to Conflicting options specified: Win32 resource file; Win32 icon.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1566">
            <summary>
              Looks up a localized string similar to Error reading resource file {0} — {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1567">
            <summary>
              Looks up a localized string similar to Error generating Win32 resource: {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1569">
            <summary>
              Looks up a localized string similar to Error generating XML documentation file {0} ({1}).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1575">
            <summary>
              Looks up a localized string similar to A stackalloc expression requires [] after type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1576">
            <summary>
              Looks up a localized string similar to The line number specified for #line directive is missing or invalid.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1577">
            <summary>
              Looks up a localized string similar to Assembly generation failed — reason.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1578">
            <summary>
              Looks up a localized string similar to Filename, single-line comment or end-of-line expected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1579">
            <summary>
              Looks up a localized string similar to foreach statement cannot operate on variables of type {0} because {1} does not contain a public definition for {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1583">
            <summary>
              Looks up a localized string similar to {0} is not a valid Win32 resource file.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1585">
            <summary>
              Looks up a localized string similar to Member modifier {0} must precede the member type and name.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1586">
            <summary>
              Looks up a localized string similar to Array creation must have array size or array initializer.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1588">
            <summary>
              Looks up a localized string similar to Cannot determine common language runtime directory -- {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1593">
            <summary>
              Looks up a localized string similar to Delegate {0} does not take {1} arguments.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1594">
            <summary>
              Looks up a localized string similar to Delegate {0} has some invalid arguments.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1597">
            <summary>
              Looks up a localized string similar to Semicolon after method or accessor block is not valid.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1599">
            <summary>
              Looks up a localized string similar to Method or delegate cannot return type {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1600">
            <summary>
              Looks up a localized string similar to Compilation cancelled by user.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1601">
            <summary>
              Looks up a localized string similar to Method or delegate parameter cannot be of type {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1604">
            <summary>
              Looks up a localized string similar to Cannot assign to {0} because it is read-only.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1605">
            <summary>
              Looks up a localized string similar to Cannot pass {0} as a ref or out argument because it is read-only.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1606">
            <summary>
              Looks up a localized string similar to Assembly signing failed; output may not be signed -- {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1608">
            <summary>
              Looks up a localized string similar to The Required attribute is not permitted on C# types.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1609">
            <summary>
              Looks up a localized string similar to Modifiers cannot be placed on event accessor declarations.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1611">
            <summary>
              Looks up a localized string similar to The params parameter cannot be declared as ref or out.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1612">
            <summary>
              Looks up a localized string similar to Cannot modify the return value of {0} because it is not a variable.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1613">
            <summary>
              Looks up a localized string similar to The managed coclass wrapper class {0} for interface {1} cannot be found (are you missing an assembly reference?).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1614">
            <summary>
              Looks up a localized string similar to {0} is ambiguous; between {1} and {2}. use either &apos;@{0}&apos; or &apos;{0}Attribute&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1615">
            <summary>
              Looks up a localized string similar to Argument {0} should not be passed with the {1} keyword.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1617">
            <summary>
              Looks up a localized string similar to Invalid option {0} for /langversion; must be ISO-1, ISO-2 or Default.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1618">
            <summary>
              Looks up a localized string similar to Cannot create delegate with {0} because it has a Conditional attribute.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1619">
            <summary>
              Looks up a localized string similar to Cannot create temporary file {0} -- {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1620">
            <summary>
              Looks up a localized string similar to Argument {0} must be passed with the {1} keyword.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1621">
            <summary>
              Looks up a localized string similar to The yield statement cannot be used inside an anonymous method or lambda expression.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1622">
            <summary>
              Looks up a localized string similar to Cannot return a value from an iterator. Use the yield return statement to return a value, or yield break to end the iteration..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1623">
            <summary>
              Looks up a localized string similar to Iterators cannot have ref or out parameters.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1624">
            <summary>
              Looks up a localized string similar to The body of {0} cannot be an iterator block because {1} is not an iterator interface type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1625">
            <summary>
              Looks up a localized string similar to Cannot yield in the body of a finally clause.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1626">
            <summary>
              Looks up a localized string similar to Cannot yield a value in the body of a try block with a catch clause.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1627">
            <summary>
              Looks up a localized string similar to Expression expected after yield return.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1628">
            <summary>
              Looks up a localized string similar to Cannot use ref or out parameter {0} inside an anonymous method, lambda expression, or query expression.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1629">
            <summary>
              Looks up a localized string similar to Unsafe code may not appear in iterators.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1630">
            <summary>
              Looks up a localized string similar to Invalid option {0} for /errorreport; must be prompt, send, queue, or none.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1631">
            <summary>
              Looks up a localized string similar to Cannot yield a value in the body of a catch clause.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1632">
            <summary>
              Looks up a localized string similar to Control cannot leave the body of an anonymous method or lambda expression.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1637">
            <summary>
              Looks up a localized string similar to Iterators cannot have unsafe parameters or yield types.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1638">
            <summary>
              Looks up a localized string similar to {0} is a reserved identifier and cannot be used when ISO language version mode is used.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1639">
            <summary>
              Looks up a localized string similar to The managed coclass wrapper class signature {0} for interface {1} is not a valid class name signature.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1640">
            <summary>
              Looks up a localized string similar to foreach statement cannot operate on variables of type {0} because it implements multiple instantiations of {1}, try casting to a specific interface instantiation.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1641">
            <summary>
              Looks up a localized string similar to A fixed size buffer field must have the array size specifier after the field name.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1642">
            <summary>
              Looks up a localized string similar to Fixed size buffer fields may only be members of structs..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1643">
            <summary>
              Looks up a localized string similar to Not all code paths return a value in method of type {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1644">
            <summary>
              Looks up a localized string similar to Feature {0} is not part of the standardized ISO C# language specification, and may not be accepted by other compilers.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1646">
            <summary>
              Looks up a localized string similar to Keyword, identifier, or string expected after verbatim specifier: .
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1647">
            <summary>
              Looks up a localized string similar to An expression is too long or complex to compile near {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1648">
            <summary>
              Looks up a localized string similar to Members of readonly field {0} cannot be modified (except in a constructor or a variable initializer).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1649">
            <summary>
              Looks up a localized string similar to Members of readonly field {0} cannot be passed ref or out (except in a constructor).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1650">
            <summary>
              Looks up a localized string similar to Fields of static readonly field {0} cannot be assigned to (except in a static constructor or a variable initializer).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1651">
            <summary>
              Looks up a localized string similar to Fields of static readonly field {0} cannot be passed ref or out (except in a static constructor).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1654">
            <summary>
              Looks up a localized string similar to Cannot modify members of {0} because it is a {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1655">
            <summary>
              Looks up a localized string similar to Cannot pass fields of {0} as a ref or out argument because it is a {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1656">
            <summary>
              Looks up a localized string similar to Cannot assign to {0} because it is a {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1657">
            <summary>
              Looks up a localized string similar to Cannot pass {0} as a ref or out argument because {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1660">
            <summary>
              Looks up a localized string similar to Cannot convert anonymous method block to type {0} because it is not a delegate type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1661">
            <summary>
              Looks up a localized string similar to Cannot convert anonymous method block to delegate type {0} because the specified block&apos;s parameter types do not match the delegate parameter types.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1662">
            <summary>
              Looks up a localized string similar to Cannot convert anonymous method block to delegate type {0} because some of the return types in the block are not implicitly convertible to the delegate return type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1663">
            <summary>
              Looks up a localized string similar to Fixed size buffer type must be one of the following: bool, byte, short, int, long, char, sbyte, ushort, uint, ulong, float or double.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1664">
            <summary>
              Looks up a localized string similar to Fixed size buffer of length {0} and type {1} is too big.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1665">
            <summary>
              Looks up a localized string similar to Fixed size buffers must have a length greater than zero.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1666">
            <summary>
              Looks up a localized string similar to You cannot use fixed size buffers contained in unfixed expressions. Try using the fixed statement..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1667">
            <summary>
              Looks up a localized string similar to Attribute {0} is not valid on property or event accessors. It is valid on {1} declarations only..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1670">
            <summary>
              Looks up a localized string similar to params is not valid in this context.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1671">
            <summary>
              Looks up a localized string similar to A namespace declaration cannot have modifiers or attributes.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1672">
            <summary>
              Looks up a localized string similar to Invalid option {0} for /platform; must be anycpu, x86, Itanium or x64.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1673">
            <summary>
              Looks up a localized string similar to Anonymous methods, lambda expressions, and query expressions inside structs cannot access instance members of &apos;this&apos;. Consider copying &apos;this&apos; to a local variable outside the anonymous method, lambda expression or query expression and using the local instead..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1674">
            <summary>
              Looks up a localized string similar to {0}: type used in a using statement must be implicitly convertible to &apos;System.IDisposable&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1675">
            <summary>
              Looks up a localized string similar to Enums cannot have type parameters.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1676">
            <summary>
              Looks up a localized string similar to Parameter {0} must be declared with the {1} keyword.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1677">
            <summary>
              Looks up a localized string similar to Parameter {0} should not be declared with the {1} keyword.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1678">
            <summary>
              Looks up a localized string similar to Parameter {0} is declared as type {1} but should be {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1679">
            <summary>
              Looks up a localized string similar to Invalid extern alias for {0}; {1} is not a valid identifier.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1680">
            <summary>
              Looks up a localized string similar to Invalid reference alias option: &apos;alias=&apos; -- missing filename..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1681">
            <summary>
              Looks up a localized string similar to You cannot redefine the global extern alias.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1686">
            <summary>
              Looks up a localized string similar to Local {0} or its members cannot have their address taken and be used inside an anonymous method or lambda expression.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1688">
            <summary>
              Looks up a localized string similar to Cannot convert anonymous method block without a parameter list to delegate type {0} because it has one or more out parameters.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1689">
            <summary>
              Looks up a localized string similar to Attribute {0} is only valid on methods or attribute classes.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1703">
            <summary>
              Looks up a localized string similar to An assembly with the same simple name {0} has already been imported. Try removing one of the references or sign them to enable side-by-side..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1704">
            <summary>
              Looks up a localized string similar to An assembly with the same simple name {0} has already been imported. Try removing one of the references or sign them to enable side-by-side..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1705">
            <summary>
              Looks up a localized string similar to Assembly {0} uses {1} which has a higher version than referenced assembly {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1706">
            <summary>
              Looks up a localized string similar to Expression cannot contain anonymous methods or lambda expressions.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1708">
            <summary>
              Looks up a localized string similar to Fixed size buffers can only be accessed through locals or fields.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1713">
            <summary>
              Looks up a localized string similar to Unexpected error building metadata name for type {0} — {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1714">
            <summary>
              Looks up a localized string similar to The base class or interface of {0} could not be resolved or is invalid.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1715">
            <summary>
              Looks up a localized string similar to {0}: type must be {1} to match overridden member {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1716">
            <summary>
              Looks up a localized string similar to Do not use &apos;System.Runtime.CompilerServices.FixedBuffer&apos; attribute. Use the &apos;fixed&apos; field modifier instead..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1719">
            <summary>
              Looks up a localized string similar to Error reading Win32 resource file {0} -- {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1721">
            <summary>
              Looks up a localized string similar to Class {0} cannot have multiple base classes: {1} and {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1722">
            <summary>
              Looks up a localized string similar to Base class {0} must come before any interfaces.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1724">
            <summary>
              Looks up a localized string similar to Value specified for the argument to &apos;System.Runtime.InteropServices.DefaultCharSetAttribute&apos; is not valid.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1725">
            <summary>
              Looks up a localized string similar to Friend assembly reference {0} is invalid. InternalsVisibleTo declarations cannot have a version, culture, public key token, or processor architecture specified..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1726">
            <summary>
              Looks up a localized string similar to Friend assembly reference {0} is invalid. Strong-name signed assemblies must specify a public key in their InternalsVisibleTo declarations..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1727">
            <summary>
              Looks up a localized string similar to Cannot send error report automatically without authorization. Please visit {0} to authorize sending error report..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1728">
            <summary>
              Looks up a localized string similar to Cannot bind delegate to {0} because it is a member of {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1729">
            <summary>
              Looks up a localized string similar to {0} does not contain a constructor that takes {1} arguments..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1730">
            <summary>
              Looks up a localized string similar to Assembly and module attributes must precede all other elements defined in a file except using clauses and extern alias declarations..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1731">
            <summary>
              Looks up a localized string similar to Cannot convert {0} to delegate because some of the return types in the block are not implicitly convertible to the delegate return type..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1732">
            <summary>
              Looks up a localized string similar to Expected parameter..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1733">
            <summary>
              Looks up a localized string similar to Expected expression..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1900">
            <summary>
              Looks up a localized string similar to Warning level must be in the range 0-4.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1902">
            <summary>
              Looks up a localized string similar to Invalid option {0} for /debug; must be full or pdbonly.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1906">
            <summary>
              Looks up a localized string similar to Invalid option {0}; Resource visibility must be either &apos;public&apos; or &apos;private&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1908">
            <summary>
              Looks up a localized string similar to The type of the argument to the DefaultValue attribute must match the parameter type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1909">
            <summary>
              Looks up a localized string similar to The DefaultValue attribute is not applicable on parameters of type {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1910">
            <summary>
              Looks up a localized string similar to Argument of type {0} is not applicable for the DefaultValue attribute.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1912">
            <summary>
              Looks up a localized string similar to Duplicate initialization of member {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1913">
            <summary>
              Looks up a localized string similar to Member {0} cannot be initialized. It is not a field or property..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1914">
            <summary>
              Looks up a localized string similar to Static field {0} cannot be assigned in an object initializer.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1917">
            <summary>
              Looks up a localized string similar to Members of read-only field {0} of type {1} cannot be assigned with an object initializer because it is of a value type..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1918">
            <summary>
              Looks up a localized string similar to Members of property {0} of type {1} cannot be assigned with an object initializer because it is of a value type..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1919">
            <summary>
              Looks up a localized string similar to Unsafe type {0} cannot be used in object creation..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1920">
            <summary>
              Looks up a localized string similar to Element initializer cannot be empty..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1921">
            <summary>
              Looks up a localized string similar to The best overloaded method match for {0} has wrong signature for the initializer element. The initializable Add must be an accessible instance method..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1922">
            <summary>
              Looks up a localized string similar to Collection initializer requires its type {0} to implement System.Collections.IEnumerable..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1925">
            <summary>
              Looks up a localized string similar to Cannot initialize object of type {0} with a collection initializer..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1926">
            <summary>
              Looks up a localized string similar to Error reading Win32 manifest file {0} -- {1}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1928">
            <summary>
              Looks up a localized string similar to {0} does not contain a definition for {1} and the best extension method overload {2} has some invalid arguments..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1929">
            <summary>
              Looks up a localized string similar to Instance argument: cannot convert from {0} to {1}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1930">
            <summary>
              Looks up a localized string similar to The range variable {0} has already been declared.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1931">
            <summary>
              Looks up a localized string similar to The range variable {0} conflicts with a previous declaration of {1}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1932">
            <summary>
              Looks up a localized string similar to Cannot assign {0} to a range variable..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1933">
            <summary>
              Looks up a localized string similar to Expression cannot contain query expressions.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1934">
            <summary>
              Looks up a localized string similar to Could not find an implementation of the query pattern for source type {0}. {1} not found. Consider explicitly specifying the type of the range variable {2}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1935">
            <summary>
              Looks up a localized string similar to Could not find an implementation of the query pattern for source type {0}. {1} not found. Are you missing a reference to &apos;System.Core.dll&apos; or a using directive for &apos;System.Linq&apos;?.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1936">
            <summary>
              Looks up a localized string similar to Could not find an implementation of the query pattern for source type {0}. {1} not found..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1937">
            <summary>
              Looks up a localized string similar to The name {0} is not in scope on the left side of &apos;equals&apos;. Consider swapping the expressions on either side of &apos;equals&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1938">
            <summary>
              Looks up a localized string similar to The name {0} is not in scope on the right side of &apos;equals&apos;. Consider swapping the expressions on either side of &apos;equals&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1939">
            <summary>
              Looks up a localized string similar to Cannot pass the range variable {0} as an out or ref parameter..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1940">
            <summary>
              Looks up a localized string similar to Multiple implementations of the query pattern were found for source type {0}. Ambiguous call to {1}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1941">
            <summary>
              Looks up a localized string similar to The type of one of the expressions in the {0} clause is incorrect. Type inference failed in the call to {1}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1942">
            <summary>
              Looks up a localized string similar to The type of the expression in the {0} clause is incorrect. Type inference failed in the call to {1}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1943">
            <summary>
              Looks up a localized string similar to An expression of type {0} is not allowed in a subsequent from clause in a query expression with source type {1}. Type inference failed in the call to {2}..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1944">
            <summary>
              Looks up a localized string similar to An expression tree may not contain an unsafe pointer operation.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1945">
            <summary>
              Looks up a localized string similar to An expression tree may not contain an anonymous method expression..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1946">
            <summary>
              Looks up a localized string similar to An anonymous method expression cannot be converted to an expression tree..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1947">
            <summary>
              Looks up a localized string similar to Range variable {0} cannot be assigned to -- it is read only..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1948">
            <summary>
              Looks up a localized string similar to The range variable {0} cannot have the same name as a method type parameter.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1949">
            <summary>
              Looks up a localized string similar to The contextual keyword &apos;var&apos; cannot be used in a range variable declaration..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1950">
            <summary>
              Looks up a localized string similar to The best overloaded Add method {0} for the collection initializer has some invalid arguments..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1951">
            <summary>
              Looks up a localized string similar to An expression tree lambda may not contain an out or ref parameter..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1952">
            <summary>
              Looks up a localized string similar to An expression tree lambda may not contain a method with variable arguments.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1953">
            <summary>
              Looks up a localized string similar to An expression tree lambda may not contain a method group..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1954">
            <summary>
              Looks up a localized string similar to The best overloaded method match {0} for the collection initializer element cannot be used. Collection initializer &apos;Add&apos; methods cannot have ref or out parameters..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1955">
            <summary>
              Looks up a localized string similar to Non-invocable member {0} cannot be used like a method..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1958">
            <summary>
              Looks up a localized string similar to Object and collection initializer expressions may not be applied to a delegate creation expression,.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS1959">
            <summary>
              Looks up a localized string similar to {0} is of type {1}. The type specified in a constant declaration must be sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, decimal, bool, string, an enum-type, or a reference-type..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2001">
            <summary>
              Looks up a localized string similar to Source file {0} could not be found.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2003">
            <summary>
              Looks up a localized string similar to Response file {0} included multiple times.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2005">
            <summary>
              Looks up a localized string similar to Missing file specification for {0} option.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2006">
            <summary>
              Looks up a localized string similar to Command-line syntax error: Missing {0} for {1} option.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2007">
            <summary>
              Looks up a localized string similar to Unrecognized command-line option: {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2008">
            <summary>
              Looks up a localized string similar to No inputs specified.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2011">
            <summary>
              Looks up a localized string similar to Unable to open response file {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2012">
            <summary>
              Looks up a localized string similar to Cannot open {0} for writing.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2013">
            <summary>
              Looks up a localized string similar to Invalid image base number {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2015">
            <summary>
              Looks up a localized string similar to {0} is a binary file instead of a text file.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2016">
            <summary>
              Looks up a localized string similar to Code page {0} is invalid or not installed.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2017">
            <summary>
              Looks up a localized string similar to Cannot specify /main if building a module or library.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2018">
            <summary>
              Looks up a localized string similar to Unable to find messages file &apos;cscmsgs.dll&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2019">
            <summary>
              Looks up a localized string similar to Invalid target type for /target: must specify &apos;exe&apos;, &apos;winexe&apos;, &apos;library&apos;, or &apos;module&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2020">
            <summary>
              Looks up a localized string similar to Only the first set of input files can build a target other than &apos;module&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2021">
            <summary>
              Looks up a localized string similar to File name {0} is too long or invalid.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2022">
            <summary>
              Looks up a localized string similar to Options &apos;/out&apos; and &apos;/target&apos; must appear before source file names.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2024">
            <summary>
              Looks up a localized string similar to Invalid file section alignment number &apos;#&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2032">
            <summary>
              Looks up a localized string similar to Character {0} is not allowed on the command-line or in response files.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2033">
            <summary>
              Looks up a localized string similar to Cannot create short filename {0} when a long filename with the same short filename already exists.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2034">
            <summary>
              Looks up a localized string similar to A /reference option that declares an extern alias can only have one filename. To specify multiple aliases or filenames, use multiple /reference options..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2035">
            <summary>
              Looks up a localized string similar to &gt;Command-line syntax error: Missing &apos;:&amp;lt;number&amp;gt;&apos; for {0} option.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS2036">
            <summary>
              Looks up a localized string similar to The /pdb option requires that the /debug option also be used..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpErrors_CS5001">
            <summary>
              Looks up a localized string similar to Program {0} does not contain a static &apos;Main&apos; method suitable for an entry point.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0028">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; has the wrong signature to be an entry point .
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0067">
            <summary>
              Looks up a localized string similar to The event &apos;{0}&apos; is never used..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0078">
            <summary>
              Looks up a localized string similar to The &apos;l&apos; suffix is easily confused with the digit &apos;1&apos;: use &apos;L&apos; for clarity..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0105">
            <summary>
              Looks up a localized string similar to The using directive for &apos;{0}&apos; appeared previously in this namespace..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0108">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; hides inherited member &apos;{1}&apos;. Use the new keyword if hiding was intended..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0109">
            <summary>
              Looks up a localized string similar to The member &apos;{0}&apos; does not hide an inherited member. The new keyword is not required..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0114">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; hides inherited member &apos;{1}&apos;. To make the current method override that implementation, add the override keyword. Otherwise add the new keyword..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0162">
            <summary>
              Looks up a localized string similar to Unreachable code detected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0164">
            <summary>
              Looks up a localized string similar to This label has not been referenced.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0168">
            <summary>
              Looks up a localized string similar to The variable &apos;{0}&apos; is assigned but its value is never used.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0169">
            <summary>
              Looks up a localized string similar to The private field &apos;{0}&apos; is never used.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0183">
            <summary>
              Looks up a localized string similar to The given expression is always of the provided ({0}) type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0184">
            <summary>
              Looks up a localized string similar to The given expression is never of the provided ({0}) type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0197">
            <summary>
              Looks up a localized string similar to Passing &apos;{0}&apos; as ref or out or taking its address may cause a runtime exception because it is a field of a marshal-by-reference class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0219">
            <summary>
              Looks up a localized string similar to The variable &apos;{0}&apos; is assigned but its value is never used.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0251">
            <summary>
              Looks up a localized string similar to Indexing an array with a negative index (array indices always start at zero).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0252">
            <summary>
              Looks up a localized string similar to Possible unintended reference comparison; to get a value comparison, cast the left hand side to type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0253">
            <summary>
              Looks up a localized string similar to Possible unintended reference comparison; to get a value comparison, cast the right hand side to type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0278">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; does not implement the &apos;{1}&apos; pattern. &apos;{2}&apos; is ambiguous with &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0279">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; does not implement the &apos;{1}&apos; pattern. &apos;{2}&apos; is either static or not public..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0280">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; does not implement the &apos;{1}&apos; pattern. &apos;{2}&apos; has the wrong signature..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0282">
            <summary>
              Looks up a localized string similar to There is no defined ordering between fields in multiple declarations of partial class or struct &apos;{0}&apos;. To specify an ordering, all instance fields must be in the same declaration..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0402">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; : an entry point cannot be generic or in a generic type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0414">
            <summary>
              Looks up a localized string similar to The private field &apos;{0}&apos; is assigned but its value is never used.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0419">
            <summary>
              Looks up a localized string similar to Ambiguous reference in cref attribute: &apos;{0}&apos;. Assuming &apos;{1}&apos;, but could have also matched other overloads including &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0420">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos;: a reference to a volatile field will not be treated as volatile.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0422">
            <summary>
              Looks up a localized string similar to The /incremental option is no longer supported.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0429">
            <summary>
              Looks up a localized string similar to Unreachable expression code detected .
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0435">
            <summary>
              Looks up a localized string similar to The namespace &apos;{0}&apos; in &apos;{1}&apos; conflicts with the imported type &apos;{2}&apos; in &apos;{3}&apos;. Using the namespace defined in &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0436">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; in &apos;{1}&apos; conflicts with the imported type &apos;{2}&apos; in &apos;{3}&apos;. Using the type defined in &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0437">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; in &apos;{1}&apos; conflicts with the imported namespace &apos;{2}&apos; in &apos;{3}&apos;. Using the type defined in &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0440">
            <summary>
              Looks up a localized string similar to Defining an alias named &apos;global&apos; is ill-advised since &apos;global::&apos; always references the global namespace and not an alias.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0444">
            <summary>
              Looks up a localized string similar to Predefined type &apos;{0}&apos; was not found in &apos;{1}&apos; but was found in &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0458">
            <summary>
              Looks up a localized string similar to The result of the expression is always &apos;null&apos; of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0464">
            <summary>
              Looks up a localized string similar to Comparing with null of type &apos;{0}&apos; always produces &apos;false&apos;.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0465">
            <summary>
              Looks up a localized string similar to Introducing a &apos;Finalize&apos; method can interfere with destructor invocation. Did you intend to declare a destructor?.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0467">
            <summary>
              Looks up a localized string similar to Ambiguity between method &apos;{0}&apos; and non-method &apos;{1}&apos;. Using method group..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0469">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; value is not implicitly convertible to type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0472">
            <summary>
              Looks up a localized string similar to The result of the expression is always &apos;{0}&apos; since a value of type &apos;{1}&apos; is never equal to &apos;null&apos; of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0602">
            <summary>
              Looks up a localized string similar to The feature &apos;{0}&apos; is deprecated. Please use &apos;{1}&apos; instead..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0612">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is obsolete..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0618">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is obsolete: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0626">
            <summary>
              Looks up a localized string similar to Method, operator, or accessor &apos;{0}&apos; is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0628">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; : new protected member declared in sealed class..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0642">
            <summary>
              Looks up a localized string similar to Possible mistaken empty statement.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0649">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is never assigned to, and will always have its default value &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0652">
            <summary>
              Looks up a localized string similar to Comparison to integral constant is useless; the constant is outside the range of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0657">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid attribute location for this declaration. Valid attribute locations for this declaration are &apos;{1}&apos;. All attributes in this block will be ignored..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0658">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a recognized attribute location. All attributes in this block will be ignored..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0659">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; overrides Object.Equals(object o) but does not override &apos;Object.GetHashCode()&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0660">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; defines operator == or operator != but does not override &apos;Object.Equals(object o)&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0661">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; defines operator == or operator != but does not override &apos;Object.GetHashCode()&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0665">
            <summary>
              Looks up a localized string similar to Assignment in conditional expression is always constant; did you mean to use &apos;==&apos; instead of &apos;=&apos;?.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0672">
            <summary>
              Looks up a localized string similar to Member &apos;{0}&apos; overrides obsolete member &apos;{1}&apos;. Add the Obsolete attribute to &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0675">
            <summary>
              Looks up a localized string similar to Bitwise-or operator used on a sign-extended operand; consider casting to a smaller unsigned type first.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0693">
            <summary>
              Looks up a localized string similar to Type parameter &apos;{0}&apos; has the same name as the type parameter from outer type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0728">
            <summary>
              Looks up a localized string similar to Possibly incorrect assignment to local &apos;{0}&apos; which is the argument to a using or lock statement. The Dispose call or unlocking will happen on the original value of the local..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0809">
            <summary>
              Looks up a localized string similar to Obsolete member &apos;{0}&apos; overrides non-obsolete member &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS0824">
            <summary>
              Looks up a localized string similar to Constructor &apos;{0}&apos; is marked external..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1030">
            <summary>
              Looks up a localized string similar to #warning: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1058">
            <summary>
              Looks up a localized string similar to A previous catch clause already catches all exceptions. All exceptions thrown will be wrapped in a System.Runtime.CompilerServices.RuntimeWrappedException.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1060">
            <summary>
              Looks up a localized string similar to Use of possibly unassigned field &apos;name&apos;. Struct instance variables are initially unassigned if struct is unassigned..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1522">
            <summary>
              Looks up a localized string similar to Empty switch block.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1570">
            <summary>
              Looks up a localized string similar to XML comment on &apos;{0}&apos; has badly formed XML: {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1571">
            <summary>
              Looks up a localized string similar to XML comment on &apos;{0}&apos; has a duplicate param tag for &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1572">
            <summary>
              Looks up a localized string similar to XML comment on &apos;{0}&apos; has a param tag for &apos;{1}&apos;, but there is no parameter by that name..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1573">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; has no matching param tag in the XML comment for &apos;{0}&apos; (but other parameters do)..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1574">
            <summary>
              Looks up a localized string similar to XML comment on &apos;{0}&apos; has cref attribute &apos;{1}&apos; that could not be resolved..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1580">
            <summary>
              Looks up a localized string similar to Invalid type for parameter &apos;{0}&apos; in XML comment cref attribute..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1581">
            <summary>
              Looks up a localized string similar to Invalid return type in XML comment cref attribute.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1584">
            <summary>
              Looks up a localized string similar to XML comment on &apos;{0}&apos; has syntactically incorrect cref attribute &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1587">
            <summary>
              Looks up a localized string similar to XML comment is not placed on a valid language element.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1589">
            <summary>
              Looks up a localized string similar to Unable to include XML fragment &apos;{0}&apos; of file &apos;{1}&apos;: {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1590">
            <summary>
              Looks up a localized string similar to Invalid XML include element -- Missing file attribute.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1591">
            <summary>
              Looks up a localized string similar to Missing XML comment for publicly visible type or member &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1592">
            <summary>
              Looks up a localized string similar to Badly formed XML in included comments file -- &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1598">
            <summary>
              Looks up a localized string similar to XML parser could not be loaded for the following reason: &apos;{0}&apos;. The XML documentation file &apos;{1}&apos; will not be generated..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1607">
            <summary>
              Looks up a localized string similar to Assembly generation: {0}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1610">
            <summary>
              Looks up a localized string similar to Unable to delete temporary file &apos;{0}&apos; used for default Win32 resource -- {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1616">
            <summary>
              Looks up a localized string similar to Option &apos;{0}&apos; overrides attribute &apos;{1}&apos; given in a source file or added module..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1633">
            <summary>
              Looks up a localized string similar to Unrecognized #pragma directive.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1634">
            <summary>
              Looks up a localized string similar to Expected disable or restore.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1635">
            <summary>
              Looks up a localized string similar to Cannot restore warning &apos;{0}&apos; because it was disabled globally..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1645">
            <summary>
              Looks up a localized string similar to Feature &apos;{0}&apos; is not part of the standardized ISO C# language specification, and may not be accepted by other compilers..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1658">
            <summary>
              Looks up a localized string similar to {0}. See also error: {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1668">
            <summary>
              Looks up a localized string similar to Invalid search path &apos;{0}&apos; specified in &apos;{1}&apos;: {2}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1682">
            <summary>
              Looks up a localized string similar to Reference to type &apos;{0}&apos; claims it is nested within &apos;{1}&apos;, but it could not be found..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1683">
            <summary>
              Looks up a localized string similar to Reference to type &apos;{0}&apos; claims it is defined in this assembly, but it is not defined in source or any added modules..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1684">
            <summary>
              Looks up a localized string similar to Reference to type &apos;{0}&apos; claims it is defined in &apos;{1}&apos;, but it could not be found..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1685">
            <summary>
              Looks up a localized string similar to The predefined type &apos;{0}&apos; is defined in multiple assemblies in the global alias; using definition from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1687">
            <summary>
              Looks up a localized string similar to Source file has exceeded the limit of 16,707,565 lines representable in the PDB, debug information will be incorrect.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1690">
            <summary>
              Looks up a localized string similar to Accessing a member on &apos;{0}&apos; may cause a runtime exception because it is a field of a marshal-by-reference class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1691">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid warning number.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1692">
            <summary>
              Looks up a localized string similar to Invalid number..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1694">
            <summary>
              Looks up a localized string similar to Invalid filename specified for preprocessor directive. Filename is too long or not a valid filename..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1695">
            <summary>
              Looks up a localized string similar to Invalid #pragma checksum syntax; should be #pragma checksum &quot;filename&quot; &quot;{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}&quot; &quot;XXXX...&quot;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1696">
            <summary>
              Looks up a localized string similar to Single-line comment or end-of-line expected..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1697">
            <summary>
              Looks up a localized string similar to Different checksum values given for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1698">
            <summary>
              Looks up a localized string similar to Circular assembly reference &apos;{0}&apos; does not match the output assembly name &apos;{1}&apos;. Try adding a reference to &apos;{0}&apos; or changing the output assembly name to match..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1699">
            <summary>
              Looks up a localized string similar to Use command line option &apos;{0}&apos; or appropriate project settings instead of &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1700">
            <summary>
              Looks up a localized string similar to Assembly reference Assembly Name is invalid and cannot be resolved.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1701">
            <summary>
              Looks up a localized string similar to Assuming assembly reference &apos;{0}&apos; matches &apos;{1}&apos;, you may need to supply runtime policy..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1702">
            <summary>
              Looks up a localized string similar to Assuming assembly reference &apos;{0}&apos; matches &apos;{1}&apos;, you may need to supply runtime policy..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1707">
            <summary>
              Looks up a localized string similar to Delegate &apos;{0}&apos; bound to &apos;{1}&apos; instead of &apos;{2}&apos; because of new language rules.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1709">
            <summary>
              Looks up a localized string similar to Filename specified for preprocessor directive is empty..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1710">
            <summary>
              Looks up a localized string similar to XML comment on &apos;{0}&apos; has a duplicate typeparam tag for &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1711">
            <summary>
              Looks up a localized string similar to XML comment on &apos;{0}&apos; has a typeparam tag for &apos;{1}&apos;, but there is no type parameter by that name..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1712">
            <summary>
              Looks up a localized string similar to Type parameter &apos;{0}&apos; has no matching typeparam tag in the XML comment on &apos;{1}&apos; (but other type parameters do.).
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1717">
            <summary>
              Looks up a localized string similar to Assignment made to same variable; did you mean to assign something else?.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1718">
            <summary>
              Looks up a localized string similar to Comparison made to same variable; did you mean to compare something else?.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1720">
            <summary>
              Looks up a localized string similar to Expression will always cause a System.NullReferenceException because the default value of {0} is null.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1723">
            <summary>
              Looks up a localized string similar to XML comment on {0} has cref attribute {1} that refers to a type parameter.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1911">
            <summary>
              Looks up a localized string similar to Access to member {0} through a &apos;base&apos; keyword from an anonymous method, lambda expression, query expression, or iterator results in unverifiable code. Consider moving the access into a helper method on the containing type..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1927">
            <summary>
              Looks up a localized string similar to Ignoring /win32manifest for module because it only applies to assemblies..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1956">
            <summary>
              Looks up a localized string similar to Member {0} implements interface member {0} in type {1}. There are multiple matches for the interface member at run-time. It is implementation dependent which method will be called..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS1957">
            <summary>
              Looks up a localized string similar to Member {0} overrides {1}. There are multiple override candidates at run-time. It is implementation dependent which method will be called..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS2002">
            <summary>
              Looks up a localized string similar to Source file {0} specified multiple times.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS2014">
            <summary>
              Looks up a localized string similar to Compiler option {0} is obsolete, please use {1} instead.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS2023">
            <summary>
              Looks up a localized string similar to Ignoring /noconfig option because it was specified in a response file.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS2029">
            <summary>
              Looks up a localized string similar to Invalid value for &apos;/define&apos;; {0} is not a valid identifier.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3000">
            <summary>
              Looks up a localized string similar to Methods with variable arguments are not CLS-compliant.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3001">
            <summary>
              Looks up a localized string similar to Argument type {0} is not CLS-compliant.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3002">
            <summary>
              Looks up a localized string similar to Return type of {0} is not CLS-compliant.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3003">
            <summary>
              Looks up a localized string similar to Type of {0} is not CLS-compliant.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3004">
            <summary>
              Looks up a localized string similar to Mixed and decomposed Unicode characters are not CLS-compliant.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3005">
            <summary>
              Looks up a localized string similar to Identifier {0} differing only in case is not CLS-compliant.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3006">
            <summary>
              Looks up a localized string similar to Overloaded method {0} differing only in ref or out, or in array rank, is not CLS-compliant.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3007">
            <summary>
              Looks up a localized string similar to Overloaded method {0} differing only by unnamed array types is not CLS-compliant.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3008">
            <summary>
              Looks up a localized string similar to Identifier {0} differing only in case is not CLS-compliant.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3009">
            <summary>
              Looks up a localized string similar to {0}: base type {0} is not CLS-compliant.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3010">
            <summary>
              Looks up a localized string similar to {0}: CLS-compliant interfaces must have only CLS-compliant members.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3011">
            <summary>
              Looks up a localized string similar to {0}: only CLS-compliant members can be abstract.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3012">
            <summary>
              Looks up a localized string similar to You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3013">
            <summary>
              Looks up a localized string similar to Added modules must be marked with the CLSCompliant attribute to match the assembly.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3014">
            <summary>
              Looks up a localized string similar to {0} does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3015">
            <summary>
              Looks up a localized string similar to {0} has no accessible constructors which use only CLS-compliant types.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3016">
            <summary>
              Looks up a localized string similar to Arrays as attribute arguments is not CLS-compliant.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3017">
            <summary>
              Looks up a localized string similar to You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3018">
            <summary>
              Looks up a localized string similar to {0} cannot be marked as CLS-Compliant because it is a member of non CLS-compliant type {1}.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3019">
            <summary>
              Looks up a localized string similar to CLS compliance checking will not be performed on {0} because it is not visible from outside this assembly..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3021">
            <summary>
              Looks up a localized string similar to {0} does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3022">
            <summary>
              Looks up a localized string similar to CLSCompliant attribute has no meaning when applied to parameters. Try putting it on the method instead..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3023">
            <summary>
              Looks up a localized string similar to CLSCompliant attribute has no meaning when applied to return types. Try putting it on the method instead..
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3026">
            <summary>
              Looks up a localized string similar to CLS-compliant field {0} cannot be volatile.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS3027">
            <summary>
              Looks up a localized string similar to {0} is not CLS-compliant because base interface {1} is not CLS-compliant.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Properties.Resources.CSharpWarnings_CS5000">
            <summary>
              Looks up a localized string similar to Unknown compiler option {0}.
            </summary>
        </member>
        <member name="T:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_02_As">
            <summary>
              Looks up a localized string similar to as.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_02_Do">
            <summary>
              Looks up a localized string similar to do.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_02_If">
            <summary>
              Looks up a localized string similar to if.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_02_In">
            <summary>
              Looks up a localized string similar to in.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_02_Is">
            <summary>
              Looks up a localized string similar to is.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_03_For">
            <summary>
              Looks up a localized string similar to for.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_03_Get">
            <summary>
              Looks up a localized string similar to get.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_03_Int">
            <summary>
              Looks up a localized string similar to int.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_03_Let">
            <summary>
              Looks up a localized string similar to let.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_03_New">
            <summary>
              Looks up a localized string similar to new.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_03_Out">
            <summary>
              Looks up a localized string similar to out.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_03_Ref">
            <summary>
              Looks up a localized string similar to ref.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_03_Set">
            <summary>
              Looks up a localized string similar to set.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_03_Try">
            <summary>
              Looks up a localized string similar to try.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_03_Var">
            <summary>
              Looks up a localized string similar to var.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_Base">
            <summary>
              Looks up a localized string similar to base.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_Bool">
            <summary>
              Looks up a localized string similar to bool.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_Byte">
            <summary>
              Looks up a localized string similar to byte.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_Case">
            <summary>
              Looks up a localized string similar to case.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_Char">
            <summary>
              Looks up a localized string similar to char.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_Else">
            <summary>
              Looks up a localized string similar to else.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_Enum">
            <summary>
              Looks up a localized string similar to enum.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_From">
            <summary>
              Looks up a localized string similar to from.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_Goto">
            <summary>
              Looks up a localized string similar to goto.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_Join">
            <summary>
              Looks up a localized string similar to join.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_Lock">
            <summary>
              Looks up a localized string similar to lock.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_Long">
            <summary>
              Looks up a localized string similar to long.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_Null">
            <summary>
              Looks up a localized string similar to null.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_This">
            <summary>
              Looks up a localized string similar to this.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_True">
            <summary>
              Looks up a localized string similar to true.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_Type">
            <summary>
              Looks up a localized string similar to type.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_Uint">
            <summary>
              Looks up a localized string similar to uint.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_04_Void">
            <summary>
              Looks up a localized string similar to void.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Async">
            <summary>
              Looks up a localized string similar to async.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Await">
            <summary>
              Looks up a localized string similar to await.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Break">
            <summary>
              Looks up a localized string similar to break.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Catch">
            <summary>
              Looks up a localized string similar to catch.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Class">
            <summary>
              Looks up a localized string similar to class.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Const">
            <summary>
              Looks up a localized string similar to const.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Event">
            <summary>
              Looks up a localized string similar to event.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_False">
            <summary>
              Looks up a localized string similar to false.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Field">
            <summary>
              Looks up a localized string similar to field.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Fixed">
            <summary>
              Looks up a localized string similar to fixed.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Float">
            <summary>
              Looks up a localized string similar to float.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Group">
            <summary>
              Looks up a localized string similar to group.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Param">
            <summary>
              Looks up a localized string similar to param.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Sbyte">
            <summary>
              Looks up a localized string similar to sbyte.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Short">
            <summary>
              Looks up a localized string similar to short.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Throw">
            <summary>
              Looks up a localized string similar to throw.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Ulong">
            <summary>
              Looks up a localized string similar to ulong.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Using">
            <summary>
              Looks up a localized string similar to using.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Where">
            <summary>
              Looks up a localized string similar to where.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_While">
            <summary>
              Looks up a localized string similar to while.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_05_Yield">
            <summary>
              Looks up a localized string similar to yield.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Double">
            <summary>
              Looks up a localized string similar to double.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Equals">
            <summary>
              Looks up a localized string similar to equals.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Extern">
            <summary>
              Looks up a localized string similar to extern.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Method">
            <summary>
              Looks up a localized string similar to method.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Module">
            <summary>
              Looks up a localized string similar to module.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Object">
            <summary>
              Looks up a localized string similar to object.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Params">
            <summary>
              Looks up a localized string similar to params.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Public">
            <summary>
              Looks up a localized string similar to public.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Return">
            <summary>
              Looks up a localized string similar to return.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Sealed">
            <summary>
              Looks up a localized string similar to sealed.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Select">
            <summary>
              Looks up a localized string similar to select.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Sizeof">
            <summary>
              Looks up a localized string similar to sizeof.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Static">
            <summary>
              Looks up a localized string similar to static.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_String">
            <summary>
              Looks up a localized string similar to string.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Struct">
            <summary>
              Looks up a localized string similar to struct.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Switch">
            <summary>
              Looks up a localized string similar to switch.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Typeof">
            <summary>
              Looks up a localized string similar to typeof.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Unsafe">
            <summary>
              Looks up a localized string similar to unsafe.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_06_Ushort">
            <summary>
              Looks up a localized string similar to ushort.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_07_Checked">
            <summary>
              Looks up a localized string similar to checked.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_07_Decimal">
            <summary>
              Looks up a localized string similar to decimal.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_07_Default">
            <summary>
              Looks up a localized string similar to default.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_07_Dynamic">
            <summary>
              Looks up a localized string similar to dynamic.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_07_Finally">
            <summary>
              Looks up a localized string similar to finally.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_07_Foreach">
            <summary>
              Looks up a localized string similar to foreach.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_07_OrderBy">
            <summary>
              Looks up a localized string similar to orderby.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_07_Partial">
            <summary>
              Looks up a localized string similar to partial.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_07_Private">
            <summary>
              Looks up a localized string similar to private.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_07_Virtual">
            <summary>
              Looks up a localized string similar to virtual.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_08_Abstract">
            <summary>
              Looks up a localized string similar to abstract.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_08_Assembly">
            <summary>
              Looks up a localized string similar to assembly.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_08_Continue">
            <summary>
              Looks up a localized string similar to continue.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_08_Delegate">
            <summary>
              Looks up a localized string similar to delegate.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_08_Explicit">
            <summary>
              Looks up a localized string similar to explicit.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_08_Implicit">
            <summary>
              Looks up a localized string similar to implicit.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_08_Internal">
            <summary>
              Looks up a localized string similar to internal.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_08_Operator">
            <summary>
              Looks up a localized string similar to operator.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_08_Override">
            <summary>
              Looks up a localized string similar to override.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_08_Property">
            <summary>
              Looks up a localized string similar to property.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_08_Readonly">
            <summary>
              Looks up a localized string similar to readonly.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_08_Volatile">
            <summary>
              Looks up a localized string similar to volatile.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_09___arglist">
            <summary>
              Looks up a localized string similar to __arglist.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_09___makeref">
            <summary>
              Looks up a localized string similar to __makeref.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_09___reftype">
            <summary>
              Looks up a localized string similar to __reftype.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_09_Ascending">
            <summary>
              Looks up a localized string similar to ascending.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_09_Interface">
            <summary>
              Looks up a localized string similar to interface.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_09_Namespace">
            <summary>
              Looks up a localized string similar to namespace.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_09_Protected">
            <summary>
              Looks up a localized string similar to protected.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_09_Unchecked">
            <summary>
              Looks up a localized string similar to unchecked.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_10___refvalue">
            <summary>
              Looks up a localized string similar to __refvalue.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_10_Descending">
            <summary>
              Looks up a localized string similar to descending.
            </summary>
        </member>
        <member name="P:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpCodeTranslator_Resources.CSharpKeyWord_10_Stackalloc">
            <summary>
              Looks up a localized string similar to stackalloc.
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.As">
             <summary>
             Represents a keyword for the CSharp Language, 2 characters long; expressed as "as".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Do">
             <summary>
             Represents a keyword for the CSharp Language, 2 characters long; expressed as "do".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.If">
             <summary>
             Represents a keyword for the CSharp Language, 2 characters long; expressed as "if".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.In">
             <summary>
             Represents a keyword for the CSharp Language, 2 characters long; expressed as "in".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Is">
             <summary>
             Represents a keyword for the CSharp Language, 2 characters long; expressed as "is".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.For">
             <summary>
             Represents a keyword for the CSharp Language, 3 characters long; expressed as "for".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Get">
             <summary>
             Represents a keyword for the CSharp Language, 3 characters long; expressed as "get".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Int">
             <summary>
             Represents a keyword for the CSharp Language, 3 characters long; expressed as "int".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Let">
             <summary>
             Represents a keyword for the CSharp Language, 3 characters long; expressed as "let".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.New">
             <summary>
             Represents a keyword for the CSharp Language, 3 characters long; expressed as "new".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Out">
             <summary>
             Represents a keyword for the CSharp Language, 3 characters long; expressed as "out".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Ref">
             <summary>
             Represents a keyword for the CSharp Language, 3 characters long; expressed as "ref".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Set">
             <summary>
             Represents a keyword for the CSharp Language, 3 characters long; expressed as "set".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Try">
             <summary>
             Represents a keyword for the CSharp Language, 3 characters long; expressed as "try".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Var">
             <summary>
             Represents a keyword for the CSharp Language, 3 characters long; expressed as "var".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Base">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "base".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Bool">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "bool".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Byte">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "byte".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Case">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "case".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Char">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "char".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Else">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "else".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Enum">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "enum".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.From">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "from".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Goto">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "goto".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Join">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "join".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Lock">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "lock".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Long">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "long".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Null">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "null".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.This">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "this".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.True">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "true".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Type">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "type".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Uint">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "uint".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Void">
             <summary>
             Represents a keyword for the CSharp Language, 4 characters long; expressed as "void".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Async">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "async".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Await">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "await".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Break">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "break".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Catch">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "catch".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Class">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "class".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Const">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "const".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Event">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "event".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.False">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "false".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Field">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "field".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Fixed">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "fixed".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Float">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "float".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Group">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "group".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Param">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "param".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Sbyte">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "sbyte".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Short">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "short".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Throw">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "throw".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Ulong">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "ulong".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Using">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "using".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Where">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "where".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.While">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "while".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Yield">
             <summary>
             Represents a keyword for the CSharp Language, 5 characters long; expressed as "yield".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Double">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "double".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Equals">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "equals".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Extern">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "extern".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Method">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "method".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Module">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "module".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Object">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "object".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Params">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "params".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Public">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "public".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Return">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "return".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Sealed">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "sealed".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Select">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "select".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Sizeof">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "sizeof".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Static">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "static".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.String">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "string".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Struct">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "struct".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Switch">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "switch".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Typeof">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "typeof".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Unsafe">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "unsafe".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Ushort">
             <summary>
             Represents a keyword for the CSharp Language, 6 characters long; expressed as "ushort".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Checked">
             <summary>
             Represents a keyword for the CSharp Language, 7 characters long; expressed as "checked".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Decimal">
             <summary>
             Represents a keyword for the CSharp Language, 7 characters long; expressed as "decimal".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Default">
             <summary>
             Represents a keyword for the CSharp Language, 7 characters long; expressed as "default".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Dynamic">
             <summary>
             Represents a keyword for the CSharp Language, 7 characters long; expressed as "dynamic"
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Finally">
             <summary>
             Represents a keyword for the CSharp Language, 7 characters long; expressed as "finally".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Foreach">
             <summary>
             Represents a keyword for the CSharp Language, 7 characters long; expressed as "foreach".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.OrderBy">
             <summary>
             Represents a keyword for the CSharp Language, 7 characters long; expressed as "orderby".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Partial">
             <summary>
             Represents a keyword for the CSharp Language, 7 characters long; expressed as "partial".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Private">
             <summary>
             Represents a keyword for the CSharp Language, 7 characters long; expressed as "private".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Virtual">
             <summary>
             Represents a keyword for the CSharp Language, 7 characters long; expressed as "virtual".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Abstract">
             <summary>
             Represents a keyword for the CSharp Language, 8 characters long; expressed as "abstract".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Assembly">
             <summary>
             Represents a keyword for the CSharp Language, 8 characters long; expressed as "assembly".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Continue">
             <summary>
             Represents a keyword for the CSharp Language, 8 characters long; expressed as "continue".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Delegate">
             <summary>
             Represents a keyword for the CSharp Language, 8 characters long; expressed as "delegate".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Explicit">
             <summary>
             Represents a keyword for the CSharp Language, 8 characters long; expressed as "explicit".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Implicit">
             <summary>
             Represents a keyword for the CSharp Language, 8 characters long; expressed as "implicit".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Internal">
             <summary>
             Represents a keyword for the CSharp Language, 8 characters long; expressed as "internal".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Operator">
             <summary>
             Represents a keyword for the CSharp Language, 8 characters long; expressed as "operator".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Override">
             <summary>
             Represents a keyword for the CSharp Language, 8 characters long; expressed as "override".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Property">
             <summary>
             Represents a keyword for the CSharp Language, 8 characters long; expressed as "property".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Readonly">
             <summary>
             Represents a keyword for the CSharp Language, 8 characters long; expressed as "readonly".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Volatile">
             <summary>
             Represents a keyword for the CSharp Language, 8 characters long; expressed as "volatile".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.__ArgList">
             <summary>
             Represents a keyword for the CSharp Language, 9 characters long; expressed as "__arglist".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.__MakeRef">
             <summary>
             Represents a keyword for the CSharp Language, 9 characters long; expressed as "__makeref".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.__RefType">
             <summary>
             Represents a keyword for the CSharp Language, 9 characters long; expressed as "__reftype".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Ascending">
             <summary>
             Represents a keyword for the CSharp Language, 9 characters long; expressed as "ascending".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Interface">
             <summary>
             Represents a keyword for the CSharp Language, 9 characters long; expressed as "interface".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Namespace">
             <summary>
             Represents a keyword for the CSharp Language, 9 characters long; expressed as "namespace".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Protected">
             <summary>
             Represents a keyword for the CSharp Language, 9 characters long; expressed as "protected".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Unchecked">
             <summary>
             Represents a keyword for the CSharp Language, 9 characters long; expressed as "unchecked".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.__RefValue">
             <summary>
             Represents a keyword for the CSharp Language, 10 characters long; expressed as "__refvalue".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Descending">
             <summary>
             Represents a keyword for the CSharp Language, 10 characters long; expressed as "descending".
            </summary>
        </member>
        <member name="F:AllenCopeland.Abstraction.Slf.Languages.CSharp.Translation.CSharpKeywords.Stackalloc">
             <summary>
             Represents a keyword for the CSharp Language, 10 characters long; expressed as "stackalloc".
            </summary>
        </member>
    </members>
</doc>
