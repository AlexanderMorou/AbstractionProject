 /* ----------------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.        |
 |  Version: 0.5.0.0                                                |
 |------------------------------------------------------------------|
 |  To ensure the code works properly,                              |
 |  please do not make any changes to the file.                     |
 |------------------------------------------------------------------|
 |  The specific language is C♯ (Runtime Version: 4.0.30319.42000)  |
 |  Sub-tool Name: C♯ Code Translator                               |
 |  Sub-tool Version: 1.0.0.0                                       |
 \---------------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Abstract;
using AllenCopeland.Abstraction.Slf.Abstract.Members;
using AllenCopeland.Abstraction.Slf.Ast;
using AllenCopeland.Abstraction.Slf.Ast.Expressions;
using AllenCopeland.Abstraction.Slf.Ast.Expressions.Lambda;
using AllenCopeland.Abstraction.Slf.Ast.Expressions.Linq;
using AllenCopeland.Abstraction.Slf.Ast.Members;
using AllenCopeland.Abstraction.Slf.Ast.Statements;
using System;
namespace AllenCopeland.Abstraction.Slf.Translation
{
  partial class IntermediateCodeTranslatorBase
  {
    public abstract void Translate(IAnonymousMethodExpression expression);
    public abstract void Translate(IAnonymousMethodWithParametersExpression expression);
    public abstract void Translate(IAssignmentExpression expression);
    public abstract void Translate(IAwaitExpression expression);
    public abstract void Translate(IAwaitStatementExpression expression);
    //public abstract void Translate<TLeft, TRight>(IBinaryOperationExpression<TLeft, TRight> expression)
    //  where TLeft :
    //    INaryOperandExpression
    //  where TRight :
    //    INaryOperandExpression;
    public abstract void Translate(IBlockExpression expression);
    public abstract void Translate(IBoundLocalReferenceExpression expression);
    public abstract void Translate(ICommaExpression expression);
    public abstract void Translate(ICommentExpression expression);
    public abstract void Translate(IConditionalExpression expression);
    public abstract void Translate(IConstructorInvokeExpression expression);
    public abstract void Translate(IConstructorPointerReferenceExpression expression);
    public abstract void Translate(ICreateArrayDetailExpression expression);
    public abstract void Translate(ICreateArrayExpression expression);
    public abstract void Translate(ICreateArrayNestedDetailExpression expression);
    public abstract void Translate(ICreateInstanceExpression expression);
    public abstract void Translate<TField, TFieldParent>(ICreateInstanceFieldAssignment<TField, TFieldParent> expression)
      where TField :
        IFieldMember<TField, TFieldParent>
      where TFieldParent :
        IFieldParent<TField, TFieldParent>;
    public abstract void Translate<TProperty, TPropertyParent>(ICreateInstancePropertyAssignment<TProperty, TPropertyParent> expression)
      where TProperty :
        IPropertySignatureMember<TProperty, TPropertyParent>
      where TPropertyParent :
        IPropertySignatureParent<TProperty, TPropertyParent>;
    public abstract void Translate(ICreateInstanceUnboundMemberAssignment expression);
    public abstract void Translate(IDecoratingExpression expression);
    public abstract void Translate(IDefaultValueExpression expression);
    public abstract void Translate(IDelegateHolderReferenceExpression expression);
    public abstract void Translate(IDelegateInvokeExpression expression);
    public abstract void Translate(IDelegateMethodPointerReferenceExpression expression);
    public abstract void Translate(IDelegateReferenceExpression expression);
    public abstract void Translate(IDirectionExpression expression);
    public abstract void Translate(IEventInvokeExpression expression);
    public abstract void Translate(IEventReferenceExpression expression);
    public abstract void Translate<TEvent, TEventParameter, TEventParent>(IEventReferenceExpression<TEvent, TEventParameter, TEventParent> expression)
      where TEvent :
        IEventSignatureMember<TEvent, TEventParameter, TEventParent>
      where TEventParameter :
        IEventSignatureParameterMember<TEvent, TEventParameter, TEventParent>
      where TEventParent :
        IEventSignatureParent<TEvent, TEventParameter, TEventParent>;
    public abstract void Translate(IExplicitStringLiteralDecorationExpression expression);
    public abstract void Translate(IExpressionFusionExpression expression);
    public abstract void Translate(IExpressionToCommaFusionExpression expression);
    public abstract void Translate(IExpressionToCommaTypeReferenceFusionExpression expression);
    public abstract void Translate(IFieldReferenceExpression expression);
    public abstract void Translate<TField, TFieldParent>(IFieldReferenceExpression<TField, TFieldParent> expression)
      where TField :
        IFieldMember<TField, TFieldParent>
      where TFieldParent :
        IFieldParent<TField, TFieldParent>;
    public abstract void Translate(IIndexerReferenceExpression expression);
    public abstract void Translate(ILambdaTypedSimpleExpression expression);
    public abstract void Translate(ILambdaTypedStatementExpression expression);
    public abstract void Translate(ILambdaTypeInferredSimpleExpression expression);
    public abstract void Translate(ILambdaTypeInferredStatementExpression expression);
    public abstract void Translate(ILinqExpression expression);
    public abstract void Translate(ILinqRangeVariableReference expression);
    public abstract void Translate(ILocalReferenceExpression expression);
    public abstract void Translate(IMetadatumDefinitionExpressionParameter expression);
    public abstract void Translate(IMethodInvokeExpression expression);
    public abstract void Translate(IMethodPointerReferenceExpression expression);
    public abstract void Translate(IMethodReferenceStub expression);
    public abstract void Translate<TSignatureParameter, TSignature, TParent>(IMethodReferenceStub<TSignatureParameter, TSignature, TParent> expression)
      where TSignatureParameter :
        IMethodSignatureParameterMember<TSignatureParameter, TSignature, TParent>
      where TSignature :
        IMethodSignatureMember<TSignatureParameter, TSignature, TParent>
      where TParent :
        ISignatureParent<IGeneralGenericSignatureMemberUniqueIdentifier, TSignature, TSignatureParameter, TParent>;
    public abstract void Translate(INamedParameterExpression expression);
    public abstract void Translate(INewLineExpression expression);
    public abstract void Translate(IParameterReferenceExpression expression);
    public abstract void Translate<TParameterParent, TIntermediateParameterParent, TParameter, TIntermediateParameter>(IParameterReferenceExpression<TParameterParent, TIntermediateParameterParent, TParameter, TIntermediateParameter> expression)
      where TParameterParent :
        IParameterParent<TParameterParent, TParameter>
      where TIntermediateParameterParent :
        TParameterParent,
        IIntermediateParameterParent<TParameterParent, TIntermediateParameterParent, TParameter, TIntermediateParameter>
      where TParameter :
        IParameterMember<TParameterParent>
      where TIntermediateParameter :
        TParameter,
        IIntermediateParameterMember<TParameterParent, TIntermediateParameterParent>;
    public abstract void Translate(IParenthesizedExpression expression);
    public abstract void Translate(IPropertyReferenceExpression expression);
    public abstract void Translate<TProperty, TPropertyParent>(IPropertyReferenceExpression<TProperty, TPropertyParent> expression)
      where TProperty :
        IPropertyMember<TProperty, TPropertyParent>
      where TPropertyParent :
        IPropertyParent<TProperty, TPropertyParent>;
    public abstract void Translate<TProperty, TPropertyParent>(IPropertySignatureReferenceExpression<TProperty, TPropertyParent> expression)
      where TProperty :
        IPropertySignatureMember<TProperty, TPropertyParent>
      where TPropertyParent :
        IPropertySignatureParent<TProperty, TPropertyParent>;
    public abstract void Translate(ISpecialReferenceExpression expression);
    public abstract void Translate(IStaticGetMemberHandleExpression expression);
    public abstract void Translate(ISymbolExpression expression);
    public abstract void Translate(ITypeCastExpression expression);
    public abstract void Translate(ITypeOfExpression expression);
    public abstract void Translate(ITypeReferenceExpression expression);
    public abstract void Translate(IUnaryOperationExpression expression);
    public abstract void Translate(IVariadicTypeCastExpression expression);
    public abstract void Translate(ILinqFusionGroupBody linqBody);
    public abstract void Translate(ILinqFusionSelectBody linqBody);
    public abstract void Translate(ILinqGroupBody linqBody);
    public abstract void Translate(ILinqSelectBody linqBody);
    public abstract void Translate(ILinqFromClause linqClause);
    public abstract void Translate(ILinqJoinClause linqClause);
    public abstract void Translate(ILinqLetClause linqClause);
    public abstract void Translate(ILinqOrderByClause linqClause);
    public abstract void Translate(ILinqTypedFromClause linqClause);
    public abstract void Translate(ILinqTypedJoinClause linqClause);
    public abstract void Translate(ILinqWhereClause linqClause);
    public abstract void Translate(IPrimitiveExpression<IType> primitive);
    public abstract void Translate(IPrimitiveExpression<bool> primitive);
    public abstract void Translate(IPrimitiveExpression<byte> primitive);
    public abstract void Translate(IPrimitiveExpression<char> primitive);
    public abstract void Translate(IPrimitiveExpression<decimal> primitive);
    public abstract void Translate(IPrimitiveExpression<double> primitive);
    public abstract void Translate(IPrimitiveExpression<short> primitive);
    public abstract void Translate(IPrimitiveExpression<int> primitive);
    public abstract void Translate(IPrimitiveExpression<long> primitive);
    public abstract void Translate(IPrimitiveExpression<sbyte> primitive);
    public abstract void Translate(IPrimitiveExpression<float> primitive);
    public abstract void Translate(IPrimitiveExpression<string> primitive);
    public abstract void Translate(IPrimitiveExpression<ushort> primitive);
    public abstract void Translate(IPrimitiveExpression<uint> primitive);
    public abstract void Translate(IPrimitiveExpression<ulong> primitive);
    public abstract void Translate(INamedInclusionRenameScopeCoercion inclusion);
    public abstract void Translate(INamedInclusionScopeCoercion inclusion);
    public abstract void Translate(INamespaceInclusionRenameScopeCoercion inclusion);
    public abstract void Translate(INamespaceInclusionScopeCoercion inclusion);
    public abstract void Translate(IStaticInclusionScopeCoercion inclusion);
    public abstract void Translate(ITypeInclusionRenameScopeCoercion inclusion);
    public abstract void Translate(ITypeInclusionScopeCoercion inclusion);
    public abstract void Translate(IBlockStatement statement);
    public abstract void Translate<TEvent, TEventParameter, TEventParent, TSignatureParameter, TSignature, TSignatureParent>(IBoundChangeEventSignatureHandlerStatement<TEvent, TEventParameter, TEventParent, TSignatureParameter, TSignature, TSignatureParent> statement)
      where TEvent :
        IEventSignatureMember<TEvent, TEventParameter, TEventParent>
      where TEventParameter :
        IEventSignatureParameterMember<TEvent, TEventParameter, TEventParent>
      where TEventParent :
        IEventSignatureParent<TEvent, TEventParameter, TEventParent>
      where TSignatureParameter :
        IMethodSignatureParameterMember<TSignatureParameter, TSignature, TSignatureParent>
      where TSignature :
        IMethodSignatureMember<TSignatureParameter, TSignature, TSignatureParent>
      where TSignatureParent :
        ISignatureParent<IGeneralGenericSignatureMemberUniqueIdentifier, TSignature, TSignatureParameter, TSignatureParent>;
    public abstract void Translate(IBreakStatement statement);
    public abstract void Translate(ICallFusionStatement statement);
    public abstract void Translate(ICallMethodStatement statement);
    public abstract void Translate(IChangeEventHandlerStatement statement);
    public abstract void Translate(ICommentStatement statement);
    public abstract void Translate(IConditionBlockStatement statement);
    public abstract void Translate(IConditionContinuationStatement statement);
    public abstract void Translate(IEnumerateSetBreakableBlockStatement statement);
    public abstract void Translate(IExplicitlyTypedLocalVariableDeclarationStatement statement);
    public abstract void Translate(IExplicitStringLiteralStatement statement);
    public abstract void Translate(IExpressionStatement statement);
    public abstract void Translate(IGoToCaseStatement statement);
    public abstract void Translate(IGoToStatement statement);
    public abstract void Translate(IIterationBlockStatement statement);
    public abstract void Translate(IIterationDeclarationBlockStatement statement);
    public abstract void Translate(IJumpStatement statement);
    public abstract void Translate(IJumpTarget statement);
    public abstract void Translate(ILabelStatement statement);
    public abstract void Translate(ILocalDeclarationsStatement statement);
    public abstract void Translate(ILockStatement statement);
    public abstract void Translate(IReturnStatement statement);
    public abstract void Translate(ISimpleIterationBlockStatement statement);
    public abstract void Translate(ISwitchCaseBlockStatement statement);
    public abstract void Translate(ISwitchStatement statement);
    public abstract void Translate(IThrowStatement statement);
    public abstract void Translate(ITryStatement statement);
    public abstract void Translate(IUsingBlockStatement statement);
    public abstract void Translate(IUsingExpressionBlockStatement statement);
    public abstract void Translate(IWhileStatement statement);
    public abstract void Translate(IYieldBreakStatement statement);
    public abstract void Translate(IYieldReturnStatement statement);
    public abstract void Translate(IIntermediateAssembly intermediateDeclaration);
    public abstract void Translate(IIntermediateNamespaceDeclaration intermediateDeclaration);
    public abstract void Translate<TCoercionParent, TIntermediateCoercionParent>(IIntermediateBinaryOperatorCoercionMember<TCoercionParent, TIntermediateCoercionParent> intermediateMember)
      where TCoercionParent :
        ICoercibleType<IBinaryOperatorUniqueIdentifier, IBinaryOperatorCoercionMember<TCoercionParent>, TCoercionParent>
      where TIntermediateCoercionParent :
        IIntermediateCoercibleType<IBinaryOperatorUniqueIdentifier, IBinaryOperatorCoercionMember<TCoercionParent>, IIntermediateBinaryOperatorCoercionMember<TCoercionParent, TIntermediateCoercionParent>, TCoercionParent, TIntermediateCoercionParent>,
        TCoercionParent;
    public abstract void Translate<TCtor, TIntermediateCtor, TType, TIntermediateType>(IIntermediateConstructorMember<TCtor, TIntermediateCtor, TType, TIntermediateType> intermediateMember)
      where TCtor :
        IConstructorMember<TCtor, TType>
      where TIntermediateCtor :
        TCtor,
        IIntermediateConstructorMember<TCtor, TIntermediateCtor, TType, TIntermediateType>
      where TType :
        ICreatableParent<TCtor, TType>
      where TIntermediateType :
        TType,
        IIntermediateCreatableParent<TCtor, TIntermediateCtor, TType, TIntermediateType>;
    public abstract void Translate<TCtor, TIntermediateCtor, TType, TIntermediateType>(IIntermediateConstructorSignatureMember<TCtor, TIntermediateCtor, TType, TIntermediateType> intermediateMember)
      where TCtor :
        IConstructorMember<TCtor, TType>
      where TIntermediateCtor :
        TCtor,
        IIntermediateConstructorSignatureMember<TCtor, TIntermediateCtor, TType, TIntermediateType>
      where TType :
        ICreatableParent<TCtor, TType>
      where TIntermediateType :
        TType,
        IIntermediateCreatableSignatureParent<TCtor, TIntermediateCtor, TType, TIntermediateType>;
    public abstract void Translate(IIntermediateEnumFieldMember intermediateMember);
    public abstract void Translate<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent>(IIntermediateEventMember<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent> intermediateMember)
      where TEvent :
        IEventMember<TEvent, TEventParent>
      where TIntermediateEvent :
        TEvent,
        IIntermediateEventMember<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent>
      where TEventParent :
        IEventParent<TEvent, TEventParent>
      where TIntermediateEventParent :
        TEventParent,
        IIntermediateEventParent<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent>;
    public abstract void Translate<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent>(IIntermediateEventSignatureMember<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent> intermediateMember)
      where TEvent :
        IEventSignatureMember<TEvent, TEventParent>
      where TIntermediateEvent :
        TEvent,
        IIntermediateEventSignatureMember<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent>
      where TEventParent :
        IEventSignatureParent<TEvent, TEventParent>
      where TIntermediateEventParent :
        TEventParent,
        IIntermediateEventSignatureParent<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent>;
    public abstract void Translate<TField, TIntermediateField, TFieldParent, TIntermediateFieldParent>(IIntermediateFieldMember<TField, TIntermediateField, TFieldParent, TIntermediateFieldParent> intermediateMember)
      where TField :
        IFieldMember<TField, TFieldParent>
      where TIntermediateField :
        TField,
        IIntermediateFieldMember<TField, TIntermediateField, TFieldParent, TIntermediateFieldParent>
      where TFieldParent :
        IFieldParent<TField, TFieldParent>
      where TIntermediateFieldParent :
        TFieldParent,
        IIntermediateFieldParent<TField, TIntermediateField, TFieldParent, TIntermediateFieldParent>;
    public abstract void Translate<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent>(IIntermediateIndexerMember<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent> intermediateMember)
      where TIndexer :
        IIndexerMember<TIndexer, TIndexerParent>
      where TIntermediateIndexer :
        TIndexer,
        IIntermediateIndexerMember<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent>
      where TIndexerParent :
        IIndexerParent<TIndexer, TIndexerParent>
      where TIntermediateIndexerParent :
        TIndexerParent,
        IIntermediateIndexerParent<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent>;
    public abstract void Translate<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent>(IIntermediateIndexerSignatureMember<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent> intermediateMember)
      where TIndexer :
        IIndexerSignatureMember<TIndexer, TIndexerParent>
      where TIntermediateIndexer :
        TIndexer,
        IIntermediateIndexerSignatureMember<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent>
      where TIndexerParent :
        IIndexerSignatureParent<TIndexer, TIndexerParent>
      where TIntermediateIndexerParent :
        TIndexerParent,
        IIntermediateIndexerSignatureParent<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent>;
    public abstract void Translate<TMethod, TIntermediateMethod, TMethodParent, TIntermediateMethodParent>(IIntermediateMethodMember<TMethod, TIntermediateMethod, TMethodParent, TIntermediateMethodParent> intermediateMember)
      where TMethod :
        IMethodMember<TMethod, TMethodParent>
      where TIntermediateMethod :
        IIntermediateMethodMember<TMethod, TIntermediateMethod, TMethodParent, TIntermediateMethodParent>,
        TMethod
      where TMethodParent :
        IMethodParent<TMethod, TMethodParent>
      where TIntermediateMethodParent :
        IIntermediateMethodParent<TMethod, TIntermediateMethod, TMethodParent, TIntermediateMethodParent>,
        TMethodParent;
    public abstract void Translate<TSignature, TIntermediateSignature, TParent, TIntermediateParent>(IIntermediateMethodSignatureMember<TSignature, TIntermediateSignature, TParent, TIntermediateParent> intermediateMember)
      where TSignature :
        IMethodSignatureMember<TSignature, TParent>
      where TIntermediateSignature :
        TSignature,
        IIntermediateMethodSignatureMember<TSignature, TIntermediateSignature, TParent, TIntermediateParent>
      where TParent :
        IMethodSignatureParent<TSignature, TParent>
      where TIntermediateParent :
        TParent,
        IIntermediateMethodSignatureParent<TSignature, TIntermediateSignature, TParent, TIntermediateParent>;
    public abstract void Translate<TParent, TIntermediateParent>(IIntermediateParameterMember<TParent, TIntermediateParent> intermediateMember)
      where TParent :
        IParameterParent
      where TIntermediateParent :
        TParent,
        IIntermediateParameterParent;
    public abstract void Translate<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent>(IIntermediatePropertyMember<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent> intermediateMember)
      where TProperty :
        IPropertyMember<TProperty, TPropertyParent>
      where TIntermediateProperty :
        TProperty,
        IIntermediatePropertyMember<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent>
      where TPropertyParent :
        IPropertyParent<TProperty, TPropertyParent>
      where TIntermediatePropertyParent :
        TPropertyParent,
        IIntermediatePropertyParent<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent>;
    public abstract void Translate<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent>(IIntermediatePropertySignatureMember<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent> intermediateMember)
      where TProperty :
        IPropertySignatureMember<TProperty, TPropertyParent>
      where TIntermediateProperty :
        TProperty,
        IIntermediatePropertySignatureMember<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent>
      where TPropertyParent :
        IPropertySignatureParent<TProperty, TPropertyParent>
      where TIntermediatePropertyParent :
        TPropertyParent,
        IIntermediatePropertySignatureParent<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent>;
    public abstract void Translate<TCoercionParent, TIntermediateCoercionParent>(IIntermediateTypeCoercionMember<TCoercionParent, TIntermediateCoercionParent> intermediateMember)
      where TCoercionParent :
        ICoercibleType<ITypeCoercionUniqueIdentifier, ITypeCoercionMember<TCoercionParent>, TCoercionParent>
      where TIntermediateCoercionParent :
        IIntermediateCoercibleType<ITypeCoercionUniqueIdentifier, ITypeCoercionMember<TCoercionParent>, IIntermediateTypeCoercionMember<TCoercionParent, TIntermediateCoercionParent>, TCoercionParent, TIntermediateCoercionParent>,
        TCoercionParent;
    public abstract void Translate<TCoercionParent, TInterCoercionParent>(IIntermediateUnaryOperatorCoercionMember<TCoercionParent, TInterCoercionParent> intermediateMember)
      where TCoercionParent :
        ICoercibleType<IUnaryOperatorUniqueIdentifier, IUnaryOperatorCoercionMember<TCoercionParent>, TCoercionParent>
      where TInterCoercionParent :
        IIntermediateCoercibleType<IUnaryOperatorUniqueIdentifier, IUnaryOperatorCoercionMember<TCoercionParent>, IIntermediateUnaryOperatorCoercionMember<TCoercionParent, TInterCoercionParent>, TCoercionParent, TInterCoercionParent>,
        TCoercionParent;
    public abstract void Translate(ILinqRangeVariable intermediateMember);
    public abstract void Translate(ILinqTypedRangeVariable intermediateMember);
    public abstract void Translate(ILocalMember intermediateMember);
    public abstract void Translate(IIntermediateClassType intermediateType);
    public abstract void Translate(IIntermediateDelegateType intermediateType);
    public abstract void Translate(IIntermediateEnumType intermediateType);
    public abstract void Translate<TGenericParameter, TIntermediateGenericParameter, TParent, TIntermediateParent>(IIntermediateGenericParameter<TGenericParameter, TIntermediateGenericParameter, TParent, TIntermediateParent> intermediateType)
      where TGenericParameter :
        IGenericParameter<TGenericParameter, TParent>
      where TIntermediateGenericParameter :
        TGenericParameter,
        IIntermediateGenericParameter<TGenericParameter, TIntermediateGenericParameter, TParent, TIntermediateParent>
      where TParent :
        IGenericParamParent<TGenericParameter, TParent>
      where TIntermediateParent :
        TParent,
        IIntermediateGenericParameterParent<TGenericParameter, TIntermediateGenericParameter, TParent, TIntermediateParent>;
    public abstract void Translate(IIntermediateInterfaceType intermediateType);
    public abstract void Translate(IIntermediateStructType intermediateType);
  };
};
