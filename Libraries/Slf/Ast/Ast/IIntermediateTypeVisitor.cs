 /* ----------------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.        |
 |  Version: 0.5.0.0                                                |
 |------------------------------------------------------------------|
 |  To ensure the code works properly,                              |
 |  please do not make any changes to the file.                     |
 |------------------------------------------------------------------|
 |  The specific language is C♯ (Runtime Version: 4.0.30319.42000)  |
 |  Sub-tool Name: C♯ Code Translator                               |
 |  Sub-tool Version: 1.0.0.0                                       |
 \---------------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Abstract;
using AllenCopeland.Abstraction.Slf.Ast.Members;
using System;
namespace AllenCopeland.Abstraction.Slf.Ast
{
  /// <summary>
  /// Represents a basic visitor for intermediate types.
  /// </summary>
  public interface IIntermediateTypeVisitor
  {
    /// <summary>
    /// Visits the <paramref name="intermediateType"/> provided.
    /// </summary>
    /// <param name="intermediateType">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.IIntermediateClassType"/> relevant
    /// to the visit.
    /// </param>
    void Visit(IIntermediateClassType intermediateType);
    /// <summary>
    /// Visits the <paramref name="intermediateType"/> provided.
    /// </summary>
    /// <param name="intermediateType">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.IIntermediateDelegateType"/> relevant
    /// to the visit.
    /// </param>
    void Visit(IIntermediateDelegateType intermediateType);
    /// <summary>
    /// Visits the <paramref name="intermediateType"/> provided.
    /// </summary>
    /// <param name="intermediateType">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.IIntermediateEnumType"/> relevant
    /// to the visit.
    /// </param>
    void Visit(IIntermediateEnumType intermediateType);
    /// <summary>
    /// Visits the <paramref name="intermediateType"/> provided.
    /// </summary>
    /// <param name="intermediateType">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.IIntermediateInterfaceType"/> relevant
    /// to the visit.
    /// </param>
    void Visit(IIntermediateInterfaceType intermediateType);
    /// <summary>
    /// Visits the <paramref name="intermediateType"/> provided.
    /// </summary>
    /// <param name="intermediateType">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.IIntermediateStructType"/> relevant
    /// to the visit.
    /// </param>
    void Visit(IIntermediateStructType intermediateType);
    /// <summary>
    /// Visits the <paramref name="intermediateType"/> provided.
    /// </summary>
    /// <param name="intermediateType">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Members.IIntermediateGenericParameter{TGenericParameter,TIntermediateGenericParameter,TParent,TIntermediateParent}"/>
    /// relevant to the visit.
    /// </param>
    void Visit<TGenericParameter, TIntermediateGenericParameter, TParent, TIntermediateParent>(IIntermediateGenericParameter<TGenericParameter, TIntermediateGenericParameter, TParent, TIntermediateParent> intermediateType)
      where TGenericParameter:
        IGenericParameter<TGenericParameter, TParent>
      where TIntermediateGenericParameter:
        TGenericParameter,
        IIntermediateGenericParameter<TGenericParameter, TIntermediateGenericParameter, TParent, TIntermediateParent>
      where TParent:
        IGenericParamParent<TGenericParameter, TParent>
      where TIntermediateParent:
        TParent,
        IIntermediateGenericParameterParent<TGenericParameter, TIntermediateGenericParameter, TParent, TIntermediateParent>;
  };
};
