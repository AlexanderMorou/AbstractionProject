 /* ----------------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.        |
 |  Version: 0.5.0.0                                                |
 |------------------------------------------------------------------|
 |  To ensure the code works properly,                              |
 |  please do not make any changes to the file.                     |
 |------------------------------------------------------------------|
 |  The specific language is C♯ (Runtime Version: 4.0.30319.42000)  |
 |  Sub-tool Name: C♯ Code Translator                               |
 |  Sub-tool Version: 1.0.0.0                                       |
 \---------------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Abstract;
using AllenCopeland.Abstraction.Slf.Abstract.Members;
using System;
namespace AllenCopeland.Abstraction.Slf.Ast.Statements
{
  /// <summary>
  /// Represents a basic visitor for statements which has a <typeparamref name="TContext"/>
  /// relevant to the visit.
  /// </summary>
  /// <typeparam name="TContext">
  /// Denotes the type of context the members of the <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IStatementContextualVisitor{TContext}"/>
  /// should receive along with the types that accept the visitor.
  /// </typeparam>
  public interface IStatementContextualVisitor<TContext>
  {
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IBlockStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IBoundChangeEventSignatureHandlerStatement{TEvent,TEventParameter,TEventParent,TSignatureParameter,TSignature,TSignatureParent}"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit<TEvent, TEventParameter, TEventParent, TSignatureParameter, TSignature, TSignatureParent>(IBoundChangeEventSignatureHandlerStatement<TEvent, TEventParameter, TEventParent, TSignatureParameter, TSignature, TSignatureParent> statement, TContext context)
      where TEvent:
        IEventSignatureMember<TEvent, TEventParameter, TEventParent>
      where TEventParameter:
        IEventSignatureParameterMember<TEvent, TEventParameter, TEventParent>
      where TEventParent:
        IEventSignatureParent<TEvent, TEventParameter, TEventParent>
      where TSignatureParameter:
        IMethodSignatureParameterMember<TSignatureParameter, TSignature, TSignatureParent>
      where TSignature:
        IMethodSignatureMember<TSignatureParameter, TSignature, TSignatureParent>
      where TSignatureParent:
        ISignatureParent<IGeneralGenericSignatureMemberUniqueIdentifier, TSignature, TSignatureParameter, TSignatureParent>;
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IBreakStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IBreakStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ICallFusionStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ICallFusionStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ICallMethodStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ICallMethodStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IChangeEventHandlerStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IChangeEventHandlerStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ICommentStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ICommentStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IConditionBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IConditionBlockStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IConditionContinuationStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IConditionContinuationStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IEnumerateSetBreakableBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IEnumerateSetBreakableBlockStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IExplicitlyTypedLocalVariableDeclarationStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IExplicitlyTypedLocalVariableDeclarationStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IExplicitStringLiteralStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IExplicitStringLiteralStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IExpressionStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IExpressionStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IGoToCaseStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IGoToCaseStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IGoToStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IGoToStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IIterationBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IIterationBlockStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IIterationDeclarationBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IIterationDeclarationBlockStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IJumpStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IJumpStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IJumpTarget"/> relevant
    /// to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IJumpTarget statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ILabelStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ILabelStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ILocalDeclarationsStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ILocalDeclarationsStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ILockStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ILockStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IReturnStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IReturnStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ISimpleIterationBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ISimpleIterationBlockStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ISwitchCaseBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ISwitchCaseBlockStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ISwitchStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ISwitchStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IThrowStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IThrowStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ITryStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ITryStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IUsingBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IUsingBlockStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IUsingExpressionBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IUsingExpressionBlockStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IWhileStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IWhileStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IYieldBreakStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IYieldBreakStatement statement, TContext context);
    /// <summary>
    /// Visits the <paramref name="statement"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IYieldReturnStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(IYieldReturnStatement statement, TContext context);
  };
};
