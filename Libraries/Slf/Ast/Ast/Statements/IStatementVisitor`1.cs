 /* ----------------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.        |
 |  Version: 0.5.0.0                                                |
 |------------------------------------------------------------------|
 |  To ensure the code works properly,                              |
 |  please do not make any changes to the file.                     |
 |------------------------------------------------------------------|
 |  The specific language is C♯ (Runtime Version: 4.0.30319.42000)  |
 |  Sub-tool Name: C♯ Code Translator                               |
 |  Sub-tool Version: 1.0.0.0                                       |
 \---------------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Abstract;
using AllenCopeland.Abstraction.Slf.Abstract.Members;
namespace AllenCopeland.Abstraction.Slf.Ast.Statements
{
  /// <summary>
  /// Represents a basic visitor for statements which yields a result of <typeparamref name="TResult"/>.
  /// </summary>
  /// <typeparam name="TResult">
  /// Denotes the type of result the members of the <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IStatementVisitor{TResult}"/>
  /// should yield.
  /// </typeparam>
  public interface IStatementVisitor<TResult>
  {
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IBlockStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IBlockStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IBoundChangeEventSignatureHandlerStatement{TEvent,TEventParameter,TEventParent,TSignatureParameter,TSignature,TSignatureParent}"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit<TEvent, TEventParameter, TEventParent, TSignatureParameter, TSignature, TSignatureParent>(IBoundChangeEventSignatureHandlerStatement<TEvent, TEventParameter, TEventParent, TSignatureParameter, TSignature, TSignatureParent> statement)
      where TEvent:
        IEventSignatureMember<TEvent, TEventParameter, TEventParent>
      where TEventParameter:
        IEventSignatureParameterMember<TEvent, TEventParameter, TEventParent>
      where TEventParent:
        IEventSignatureParent<TEvent, TEventParameter, TEventParent>
      where TSignatureParameter:
        IMethodSignatureParameterMember<TSignatureParameter, TSignature, TSignatureParent>
      where TSignature:
        IMethodSignatureMember<TSignatureParameter, TSignature, TSignatureParent>
      where TSignatureParent:
        ISignatureParent<IGeneralGenericSignatureMemberUniqueIdentifier, TSignature, TSignatureParameter, TSignatureParent>;
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IBreakStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IBreakStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ICallFusionStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(ICallFusionStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ICallMethodStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(ICallMethodStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IChangeEventHandlerStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IChangeEventHandlerStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ICommentStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(ICommentStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IConditionBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IConditionBlockStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IConditionContinuationStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IConditionContinuationStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IEnumerateSetBreakableBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IEnumerateSetBreakableBlockStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IExplicitlyTypedLocalVariableDeclarationStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IExplicitlyTypedLocalVariableDeclarationStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IExplicitStringLiteralStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IExplicitStringLiteralStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IExpressionStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IExpressionStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IGoToCaseStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IGoToCaseStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IGoToStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IGoToStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IIterationBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IIterationBlockStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IIterationDeclarationBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IIterationDeclarationBlockStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IJumpStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IJumpStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IJumpTarget"/> relevant
    /// to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IJumpTarget statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ILabelStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(ILabelStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ILocalDeclarationsStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(ILocalDeclarationsStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ILockStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(ILockStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IReturnStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IReturnStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ISimpleIterationBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(ISimpleIterationBlockStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ISwitchCaseBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(ISwitchCaseBlockStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ISwitchStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(ISwitchStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IThrowStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IThrowStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.ITryStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(ITryStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IUsingBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IUsingBlockStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IUsingExpressionBlockStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IUsingExpressionBlockStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IWhileStatement"/> relevant
    /// to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IWhileStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IYieldBreakStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IYieldBreakStatement statement);
    /// <summary>
    /// Returns a <typeparamref name="TResult"/> after it visits the <paramref name="statement"/>
    /// provided.
    /// </summary>
    /// <param name="statement">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Statements.IYieldReturnStatement"/>
    /// relevant to the visit.
    /// </param>
    /// <returns>
    /// Returns the value of <typeparamref name="TResult"/> relative to the implementation
    /// of the visitor.
    /// </returns>
    TResult Visit(IYieldReturnStatement statement);
  };
};
