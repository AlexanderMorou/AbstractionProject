 /* ----------------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.        |
 |  Version: 0.5.0.0                                                |
 |------------------------------------------------------------------|
 |  To ensure the code works properly,                              |
 |  please do not make any changes to the file.                     |
 |------------------------------------------------------------------|
 |  The specific language is C♯ (Runtime Version: 4.0.30319.42000)  |
 |  Sub-tool Name: C♯ Code Translator                               |
 |  Sub-tool Version: 1.0.0.0                                       |
 \---------------------------------------------------------------- */
using System;
namespace AllenCopeland.Abstraction.Slf.Ast.Expressions.Linq
{
  /// <summary>
  /// Represents a basic visitor for linq clauses which has a <typeparamref name="TContext"/>
  /// relevant to the visit.
  /// </summary>
  /// <typeparam name="TContext">
  /// Denotes the type of context the members of the <see cref="AllenCopeland.Abstraction.Slf.Ast.Expressions.Linq.ILinqClauseContextualVisitor{TContext}"/>
  /// should receive along with the types that accept the visitor.
  /// </typeparam>
  public interface ILinqClauseContextualVisitor<TContext>
  {
    /// <summary>
    /// Visits the <paramref name="linqClause"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="linqClause">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Expressions.Linq.ILinqFromClause"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ILinqFromClause linqClause, TContext context);
    /// <summary>
    /// Visits the <paramref name="linqClause"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="linqClause">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Expressions.Linq.ILinqJoinClause"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ILinqJoinClause linqClause, TContext context);
    /// <summary>
    /// Visits the <paramref name="linqClause"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="linqClause">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Expressions.Linq.ILinqLetClause"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ILinqLetClause linqClause, TContext context);
    /// <summary>
    /// Visits the <paramref name="linqClause"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="linqClause">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Expressions.Linq.ILinqOrderByClause"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ILinqOrderByClause linqClause, TContext context);
    /// <summary>
    /// Visits the <paramref name="linqClause"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="linqClause">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Expressions.Linq.ILinqTypedFromClause"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ILinqTypedFromClause linqClause, TContext context);
    /// <summary>
    /// Visits the <paramref name="linqClause"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="linqClause">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Expressions.Linq.ILinqTypedJoinClause"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ILinqTypedJoinClause linqClause, TContext context);
    /// <summary>
    /// Visits the <paramref name="linqClause"/> provided with the given <paramref name="context"/>.
    /// </summary>
    /// <param name="linqClause">
    /// The <see cref="AllenCopeland.Abstraction.Slf.Ast.Expressions.Linq.ILinqWhereClause"/>
    /// relevant to the visit.
    /// </param>
    /// <param name="context">
    /// The <typeparamref name="TContext"/> relevant to the visit.
    /// </param>
    void Visit(ILinqWhereClause linqClause, TContext context);
  };
};
