 /* ----------------------------------------------------------------\
 |  This code was generated by Allen Copeland's Abstraction.        |
 |  Version: 0.5.0.0                                                |
 |------------------------------------------------------------------|
 |  To ensure the code works properly,                              |
 |  please do not make any changes to the file.                     |
 |------------------------------------------------------------------|
 |  The specific language is C♯ (Runtime Version: 4.0.30319.42000)  |
 |  Sub-tool Name: C♯ Code Translator                               |
 |  Sub-tool Version: 1.0.0.0                                       |
 \---------------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf.Ast.Expressions.Linq;
namespace AllenCopeland.Abstraction.Slf.Ast.Expressions
{
  /// <summary>
  /// Represents a basic visitor for common expressions which yields a result of <typeparamref name="TResult"/>
  /// and also has a <typeparamref name="TContext"/> relevant to the visit.
  /// </summary>
  /// <typeparam name="TResult">
  /// Denotes the type of result the members of the <see cref="AllenCopeland.Abstraction.Slf.Ast.Expressions.ICommonExpressionVisitor{TResult,TContext}"/>
  /// should yield.
  /// </typeparam>
  /// <typeparam name="TContext">
  /// Denotes the type of context the members of the <see cref="AllenCopeland.Abstraction.Slf.Ast.Expressions.ICommonExpressionVisitor{TResult,TContext}"/>
  /// should receive along with the types that accept the visitor.
  /// </typeparam>
  public interface ICommonExpressionVisitor<TResult, TContext> :
    IExpressionVisitor<TResult, TContext>, 
    ILinqBodyVisitor<TResult, TContext>, 
    ILinqClauseVisitor<TResult, TContext>, 
    IPrimitiveVisitor<TResult, TContext>
  {
  };
};
