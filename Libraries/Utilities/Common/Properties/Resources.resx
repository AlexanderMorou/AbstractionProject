<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AE_ArgumentCannotBeEmpty" xml:space="preserve">
    <value>The argument {0} can't be String.Empty.</value>
    <comment>Relates to ArgumentExceptionMessage.ArgumentCannotBeEmpty.</comment>
  </data>
  <data name="AE_CannotTermBinaryOperation" xml:space="preserve">
    <value>Both operands of the binary operation are present; thus, an operation of 'Term' is invalid in this context.</value>
    <comment>Relates to ArgumentExceptionMessage.CannotTermBinaryOperation.</comment>
  </data>
  <data name="AE_CoercionDoesNotExist" xml:space="preserve">
    <value>No {0} coercion {1} target type.</value>
    <comment>Relates to ArgumentExceptionMessage.CoercionDoesNotExist.</comment>
  </data>
  <data name="AE_CompiledType_NotProperKind" xml:space="preserve">
    <value>Type is not a(n) {0}.</value>
    <comment>Relates to ArgumentExceptionMessage.CompiledType_NotProperKind.</comment>
  </data>
  <data name="AE_ConditionMustBeBreakable" xml:space="preserve">
    <value />
  </data>
  <data name="AE_DataCannotBeEmpty" xml:space="preserve">
    <value />
  </data>
  <data name="AE_DetachedExpressionNotValidFor" xml:space="preserve">
    <value />
  </data>
  <data name="AE_DuplicateKeyExists" xml:space="preserve">
    <value>An item with the key provided already exists.</value>
    <comment>Relates to ArgumentExceptionMessage.DuplicateKeyExists.</comment>
  </data>
  <data name="AE_ElementTypeMustBeGivenKind" xml:space="preserve">
    <value>The element type on '{0}' must be '{1}'.</value>
    <comment>Relates to ArgumentExceptionMessage.ElementTypeMustBeGivenKind.</comment>
  </data>
  <data name="AE_GenericClosureReplacementCount" xml:space="preserve">
    <value>There are '{0}' parameters within the generic closure, but {1} were provided.</value>
    <comment>Relates to ArgumentExceptionMessage.GenericClosureReplacementCount.</comment>
  </data>
  <data name="AE_GenericParameterRequiresName" xml:space="preserve">
    <value />
  </data>
  <data name="AE_InsufficientSpaceForCopy" xml:space="preserve">
    <value>{0} not large enough to hold elements.</value>
    <comment>Relates to ArgumentExceptionMessage.InsufficientSpaceForCopy.</comment>
  </data>
  <data name="AE_InvalidTCheckDerivation" xml:space="preserve">
    <value />
  </data>
  <data name="AE_JumpTargetMustBeLabel" xml:space="preserve">
    <value />
  </data>
  <data name="AE_ManifestModuleTarget" xml:space="preserve">
    <value>Target manifest module must belong to the current assembly.</value>
    <comment>Relates to ArgumentExceptionMessage.ManifestModuleTarget.</comment>
  </data>
  <data name="AE_MemberOfSeriesNull" xml:space="preserve">
    <value>A member of {0} was null.</value>
    <comment>Relates to ArgumentExceptionMessage.MemberOfSeriesNull.</comment>
  </data>
  <data name="AE_NamedGenericParameterExists" xml:space="preserve">
    <value />
  </data>
  <data name="AE_NamespacePathAlreadyPresent" xml:space="preserve">
    <value />
  </data>
  <data name="AE_NonNullableTypeProvided" xml:space="preserve">
    <value>Nullable types must be normal types, array, by-reference, nullable, and pointer types are not allowed.</value>
    <comment>Relates to ArgumentExceptionMessage.NonNullableTypeProvided.</comment>
  </data>
  <data name="AE_NumericControllerMismatch" xml:space="preserve">
    <value />
  </data>
  <data name="AE_NumericValueParseError" xml:space="preserve">
    <value>The character '{0}' was not found within the base entities for the current numeric controller.</value>
    <comment>Relates to ArgumentExceptionMessage.NumericValueParseError.</comment>
  </data>
  <data name="AE_OnlyNullableOnTerm" xml:space="preserve">
    <value />
  </data>
  <data name="AE_OperationMustBeTerm" xml:space="preserve">
    <value>Operand relative to associativity is 'null'; thus, operation of 'Term' is required in this context.</value>
    <comment>Relates to ArgumentExceptionMessage.OperationMustBeTerm.</comment>
  </data>
  <data name="AE_ParentMustBeEqual" xml:space="preserve">
    <value />
  </data>
  <data name="AE_Part_CannotBeRoot" xml:space="preserve">
    <value>Root {0} instance of the series is implicitly a part of the series, adding it to the {0} part collection is unnecessary.</value>
    <comment>Relates to ArgumentExceptionMessage.Part_CannotBeRoot.</comment>
  </data>
  <data name="AE_Part_MustReferenceRoot" xml:space="preserve">
    <value>Adding a part to the series of a(n) {0} requires that the new {0} part reference the root {0} of the series.</value>
    <comment>Relates to ArgumentExceptionMessage.Part_MustReferenceRoot.</comment>
  </data>
  <data name="AE_PathCannotBeDotsOnly" xml:space="preserve">
    <value />
  </data>
  <data name="AE_Primitive_Invalid" xml:space="preserve">
    <value>Cannot have primitive values of any other type than listed in the PrimitiveType enum.</value>
    <comment>Relates to ArgumentExceptionMessage.Primitive_Primitive_Invalid.</comment>
  </data>
  <data name="AE_Primitive_NonStringObject" xml:space="preserve">
    <value>Cannot have object primitives of anything other than string.</value>
    <comment>Relates to ArgumentExceptionMessage.Primitive_NonStringObject.</comment>
  </data>
  <data name="AE_ProvidedExpressionCannotBe" xml:space="preserve">
    <value>The provided expression '{0}' cannot be affixed into a(n) {1} expression.</value>
    <comment>Relates to ArgumentExceptionMessage.ProvidedExpressionCannotBe.</comment>
  </data>
  <data name="AE_RelationalInvalidOnExpression" xml:space="preserve">
    <value>Cannot relationally check a type against another expression.</value>
    <comment>Relates to ArgumentExceptionMessage.RelationalInvalidOnExpression.</comment>
  </data>
  <data name="AE_RemoveFailed_CustomAttributeNotFound" xml:space="preserve">
    <value />
  </data>
  <data name="AE_Remove_ValueNotFound" xml:space="preserve">
    <value>Cannot remove value in parameter '{0}', member not found.</value>
    <comment>Relates to ArgumentExceptionMessage.Remove_ValueNotFound.</comment>
  </data>
  <data name="AE_SourceStringInvalid" xml:space="preserve">
    <value>String {0} doesn't match the lengths provided.</value>
    <comment>Relates to ArgumentExceptionMessage.SourceStringInvalid.</comment>
  </data>
  <data name="AE_SubordinateCannotChange" xml:space="preserve">
    <value>The provided subordinate does not match the subordinate contained; thus, the change action cannot proceed.</value>
    <comment>Relates to ArgumentExceptionMessage.SubordinateCannotChange.</comment>
  </data>
  <data name="AE_SubordinateDoesNotExist" xml:space="preserve">
    <value>The provided subordinate does not exist within the current context.</value>
    <comment>Relates to ArgumentExceptionMessage.SubordinateDoesNotExist.</comment>
  </data>
  <data name="AE_SubordinateInvalid" xml:space="preserve">
    <value>The provided subordinate dictionary is not valid within the current context.</value>
    <comment>Relates to ArgumentExceptionMessage.SubordinateInvalid.</comment>
  </data>
  <data name="AE_SubordinateNull" xml:space="preserve">
    <value>The subordinate associated to the value provided is null, and thus cannot be entered.</value>
    <comment>Relates to ArgumentExceptionMessage.SubordinateNull.</comment>
  </data>
  <data name="AE_TransitionKeyCollision" xml:space="preserve">
    <value>The provided transitionary condition collides with an existing condition.  On a deterministic system this is invalid.</value>
    <comment>Relates to ArgumentExceptionMessage.TransitionKeyCollision.</comment>
  </data>
  <data name="AE_TypeAlreadyGenericClosure" xml:space="preserve">
    <value>The provided type '{0}' is already a generic closure, retrieve the generic definition prior to making a new closure.</value>
    <comment>Relates to ArgumentExceptionMessage.TypeAlreadyGenericClosure.</comment>
  </data>
  <data name="AE_TypedName_ImplicitConversion" xml:space="preserve">
    <value />
  </data>
  <data name="AE_TypedName_Invalid" xml:space="preserve">
    <value>The reference source of the TypedName within {0} is invalid.</value>
    <comment>Relates to ArgumentExceptionMessage.TypedName_Invalid.</comment>
  </data>
  <data name="AE_TypedName_InvalidElement" xml:space="preserve">
    <value>Invalid reference in a member of {0}</value>
    <comment>Relates to ArgumentExceptionMessage.TypedName_InvalidElement.</comment>
  </data>
  <data name="AE_TypedName_ReferenceKind" xml:space="preserve">
    <value>Invalid reference, {0} must be a {1}.</value>
    <comment>Relates to ArgumentExceptionMessage.TypedName_ReferenceKind.</comment>
  </data>
  <data name="AE_TypeNotGeneric" xml:space="preserve">
    <value>Type not generic.</value>
    <comment>Relates to ArgumentExceptionMessage.TypeNotGeneric.</comment>
  </data>
  <data name="AE_TypeNotGivenKind" xml:space="preserve">
    <value>The compiled type '{0}' cannot be wrapped into a '{1}'.</value>
    <comment>Relates to ArgumentExceptionMessage.TypeNotGivenKind.</comment>
  </data>
  <data name="AE_TypesAssemblyIsFixed" xml:space="preserve">
    <value />
  </data>
  <data name="AE_UnknownArgument" xml:space="preserve">
    <value>Unknown argument identifier provided.</value>
    <comment>Relates to ArgumentExceptionMessage.UnknownArgument.</comment>
  </data>
  <data name="AE_UnknownArgumentMessage" xml:space="preserve">
    <value>Unknown argument message identifier provided.</value>
    <comment>Relates to ArgumentExceptionMessage.UnknownArgumentMessage.</comment>
  </data>
  <data name="AE_ValueIsWrongType" xml:space="preserve">
    <value>{0}, of type '{1}', is of the wrong type; expected: '{2}'.</value>
    <comment>Relates to ArgumentExceptionMessage.ValueIsWrongType.</comment>
  </data>
  <data name="LockableChangeThrowMessage" xml:space="preserve">
    <value>Cannot alter a {0} while it is locked.</value>
    <comment>Used by the lockable collection, list and dictionary classes.</comment>
  </data>
  <data name="ObjectStateThrowMessage" xml:space="preserve">
    <value>Object not in a valid state.</value>
    <comment>Used by the lockable collection, list and dictionary classes when the object isn't in a valid state to continue.</comment>
  </data>
  <data name="AE_SourceStreamInvalidLength" xml:space="preserve">
    <value>Data length inappropriate for conversion into a unicode string.</value>
    <comment>Relates to ArgumentExceptionMessage.SourceStreamInvalidLength.</comment>
  </data>
  <data name="AE_SubordinateMismatch" xml:space="preserve">
    <value>The provided subordinate does not match the subordinate contained.</value>
    <comment>Relates to ArgumentExceptionMessage.SubordinateMismatch.</comment>
  </data>
  <data name="AE_SubordinateSubTypeDuplicate" xml:space="preserve">
    <value>The subordinate sub-type already exists within the current context.</value>
    <comment>Relates to ArgumentExceptionMessage.SubordinateSubTypeDuplicate.</comment>
  </data>
  <data name="AE_InterfaceNotImplemented" xml:space="preserve">
    <value>'{0}' does not implement '{1}'</value>
    <comment>Relates to ArgumentExceptionMessage.InterfaceNotImplemented.</comment>
  </data>
  <data name="AE_TypeInvalidElementType" xml:space="preserve">
    <value>Type is a {0} which is not valid on a(n) {1} type.</value>
    <comment>Relates to ArgumentExceptionMessage.TypeInvalidElementType.</comment>
  </data>
  <data name="AE_UnknownArgumentWord" xml:space="preserve">
    <value>Unknown argument word provided.</value>
    <comment>Relates to ArgumentExceptionMessage.UnknownArgumentWord.</comment>
  </data>
  <data name="AE_RankMustBeOneOrGreater" xml:space="preserve">
    <value>The rank '{0}' provided is invalid, it must be one (1) or greater.</value>
    <comment>Relates to ArgumentExceptionMessage.RankMustBeOneOrGreater.</comment>
  </data>
  <data name="AE_TypeRelationalCheckRequiresType" xml:space="preserve">
    <value>Type-relational checks require a type on the {0}.</value>
    <comment>Relates to ArgumentExceptionMessage.TypeRelationalCheckRequiresType.</comment>
  </data>
  <data name="AE_TypeRelationalTypeCannotBeNull" xml:space="preserve">
    <value>Type-relational check invalid.  Target type on the type reference expression cannot be null.</value>
    <comment>Relates to ArgumentExceptionMessage.TypeRelationalTypeCannotBeNull.</comment>
  </data>
  <data name="AE_TypeRelationalOrNullCastMustBeReference" xml:space="preserve">
    <value>Type-Cast (or null) expression requires a reference type to work.</value>
    <comment>Relates to ArgumentExceptionMessage.TypeRelationalOrNullCastMustBeReference.</comment>
  </data>
  <data name="AE_Part_RootOfASeparateSeries" xml:space="preserve">
    <value>The {0} part provided is the root of another {0} and cannot be added to this sequence.</value>
    <comment>Relates to ArgumentExceptionMessage.Part_RootOfASeparateSeries.</comment>
  </data>
  <data name="AE_TypeMustNotBeAReferenceType" xml:space="preserve">
    <value>The type provided is a reference type, only value types (structs) are allowed.</value>
    <comment>Relates to ExceptionMessage.TypeMustNotBeAReferenceType.</comment>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="RSAKeyPair" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\RandomRSAData.blob;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
</root>