using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AllenCopeland.Abstraction.Slf.Oil.Members;
using AllenCopeland.Abstraction.Slf.Abstract.Members;
using AllenCopeland.Abstraction.Slf.Abstract;
 /*---------------------------------------------------------------------\
 | Copyright © 2008-2011 Allen C. [Alexander Morou] Copeland Jr.        |
 |----------------------------------------------------------------------|
 | The Abstraction Project's code is provided under a contract-release  |
 | basis.  DO NOT DISTRIBUTE and do not use beyond the contract terms.  |
 \-------------------------------------------------------------------- */

namespace AllenCopeland.Abstraction.Slf.Oil
{
    partial class AnonymousType
    {
        protected class PropertyMembers :
            IntermediatePropertyMemberDictionary<IClassPropertyMember, IIntermediateClassPropertyMember, IClassType, IIntermediateClassType>
        {
            protected internal PropertyMembers(IntermediateFullMemberDictionary master, AnonymousType parent)
                : base(master, parent)
            {
            }

            protected override IIntermediateClassPropertyMember GetProperty(TypedName nameAndType)
            {
                throw new NotSupportedException("Anonymous types cannot have properties added in this manner.");
            }
        }

        public new class PropertyMember :
            IntermediateClassPropertyMember<AnonymousType>
        {
            AnonymousTypeMember member;

            /// <summary>
            /// Creates a new <see cref="PropertyMember"/>
            /// with the <paramref name="parent"/>, and
            /// anonymous type <paramref name="member"/> data provided.
            /// </summary>
            /// <param name="parent">The <see cref="AnonymousType"/> to which the
            /// <see cref="PropertyMember"/> belongs.</param>
            /// <param name="member">The <see cref="member"/> which provides the
            /// anonymous type member with its index and name data.</param>
            internal PropertyMember(AnonymousType parent, AnonymousTypeMember member)
                : base(parent)
            {
                this.member = member;
            }

            protected override string OnGetName()
            {
                return IntermediateGateway.PatternAid.GetAutoGeneratedProperty(this.member);
            }
        }
    }
}
