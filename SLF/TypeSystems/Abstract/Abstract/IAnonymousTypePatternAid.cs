using System;
/*---------------------------------------------------------------------\
 | Copyright Â© 2008-2011 Allen C. [Alexander Morou] Copeland Jr.        |
 |----------------------------------------------------------------------|
 | The Abstraction Project's code is provided under a contract-release  |
 | basis.  DO NOT DISTRIBUTE and do not use beyond the contract terms.  |
 \-------------------------------------------------------------------- */

namespace AllenCopeland.Abstraction.Slf.Abstract
{
    /// <summary>
    /// Defines properties and methods for working with an anonymous 
    /// type pattern aid.
    /// </summary>
    public interface IAnonymousTypePatternAid
    {
        /// <summary>
        /// Obtains the <see cref="String"/> that represents
        /// a given <see cref="IAnonymousType"/>'s name.
        /// </summary>
        /// <param name="target">The target <see cref="IAnonymousType"/>
        /// from which to generate the name.</param>
        /// <returns>A <see cref="String"/> which represents the name
        /// of the <see cref="IAnonymousType"/>.</returns>
        string GetTypeName(IAnonymousType target);
        /// <summary>
        /// Obtains a <see cref="String"/> that represents 
        /// a given <see cref="IAnonymousType"/>'s generic parameter's
        /// name.
        /// </summary>
        /// <param name="associatedMember">The <see cref="AnonymousTypeMember"/>
        /// to obtain the generic parameter name of.</param>
        /// <returns>A <see cref="System.String"/> instance
        /// representing the type-parameter's name.</returns>
        string GetTypeParameter(AnonymousTypeMember associatedMember);
        /// <summary>
        /// Obtains a <see cref="String"/> that represents
        /// a given <see cref="IAnonymousType"/>'s backing
        /// field name.
        /// </summary>
        /// <param name="associatedMember">The
        /// <see cref="AnonymousTypeMember"/> to obtain the
        /// field name of.</param>
        /// <returns>A <see cref="System.String"/> instance
        /// representing the field's name.</returns>
        string GetAnonymousField(AnonymousTypeMember associatedMember);
        /// <summary>
        /// Obtains a <see cref="String"/> that represents
        /// a given <see cref="IAnonymousType"/>'s property
        /// name.
        /// </summary>
        /// <param name="associatedMember">The
        /// <see cref="AnonymousTypeMember"/> to obtain the
        /// property name of.</param>
        /// <returns>A <see cref="System.String"/> instance
        /// representing the property's name.</returns>
        string GetAutoGeneratedProperty(AnonymousTypeMember associatedMember);
    }
}
