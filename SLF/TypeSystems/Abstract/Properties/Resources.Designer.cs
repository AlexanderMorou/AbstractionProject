//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AllenCopeland.Abstraction.Slf.Abstract.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AllenCopeland.Abstraction.Slf.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Item.
        /// </summary>
        internal static string DefaultIndexerName {
            get {
                return ResourceManager.GetString("DefaultIndexerName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot make an array of a by-reference type..
        /// </summary>
        internal static string MakeArrayError_ByReferenceType {
            get {
                return ResourceManager.GetString("MakeArrayError_ByReferenceType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Single dimensional, vector, arrays are innately zero-based; due to language interop, non-zero index single dimensional arrays are not supported at a type level..
        /// </summary>
        internal static string MakeArrayError_VectorLowerBounds {
            get {
                return ResourceManager.GetString("MakeArrayError_VectorLowerBounds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type is not a generic type definition; operation only valid on generic type definitions..
        /// </summary>
        internal static string MakeGenericTypeError_IsGenericTypeDefFalse {
            get {
                return ResourceManager.GetString("MakeGenericTypeError_IsGenericTypeDefFalse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot make a pointer of an array..
        /// </summary>
        internal static string MakePointerError_ArrayType {
            get {
                return ResourceManager.GetString("MakePointerError_ArrayType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type must be a generic type to perform this action..
        /// </summary>
        internal static string MustBeGenericType {
            get {
                return ResourceManager.GetString("MustBeGenericType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resources.
        /// </summary>
        internal static string ResourcesAutoClassName {
            get {
                return ResourceManager.GetString("ResourcesAutoClassName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}.Properties.
        /// </summary>
        internal static string ResourcesAutoNamespaceName {
            get {
                return ResourceManager.GetString("ResourcesAutoNamespaceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type {0} does not meet the constraints placed upon {1}.
        ///
        ///Reason: {2}.
        /// </summary>
        internal static string TypeConstraintFailure {
            get {
                return ResourceManager.GetString("TypeConstraintFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replacement type did not pass constraint {0} ({1})..
        /// </summary>
        internal static string TypeConstraintFailure_Constraint {
            get {
                return ResourceManager.GetString("TypeConstraintFailure_Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generic definitions don&apos;t require validation..
        /// </summary>
        internal static string TypeConstraintFailure_GenericTypeDefinition {
            get {
                return ResourceManager.GetString("TypeConstraintFailure_GenericTypeDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; not valid as a generic type parameter..
        /// </summary>
        internal static string TypeConstraintFailure_InvalidType {
            get {
                return ResourceManager.GetString("TypeConstraintFailure_InvalidType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; not valid as a generic type parameter, due to the type being both abstract and sealed..
        /// </summary>
        internal static string TypeConstraintFailure_InvalidType_AbstractSealed {
            get {
                return ResourceManager.GetString("TypeConstraintFailure_InvalidType_AbstractSealed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requires public empty-parameter constructor; none was found on the replacement type-parameter..
        /// </summary>
        internal static string TypeConstraintFailure_NewConstraint {
            get {
                return ResourceManager.GetString("TypeConstraintFailure_NewConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requires empty public constructor; interfaces, delegates and Other, non-creatable, types don&apos;t have constructors..
        /// </summary>
        internal static string TypeConstraintFailure_NewInterfaceDelegateOther {
            get {
                return ResourceManager.GetString("TypeConstraintFailure_NewInterfaceDelegateOther", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requires empty public constructor; none was found..
        /// </summary>
        internal static string TypeConstraintFailure_NewStandard {
            get {
                return ResourceManager.GetString("TypeConstraintFailure_NewStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replacement parameter did not pass constraint {0}..
        /// </summary>
        internal static string TypeConstraintFailure_ParamConstraint {
            get {
                return ResourceManager.GetString("TypeConstraintFailure_ParamConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requires a reference type..
        /// </summary>
        internal static string TypeConstraintFailure_ReferenceType {
            get {
                return ResourceManager.GetString("TypeConstraintFailure_ReferenceType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requires a value type..
        /// </summary>
        internal static string TypeConstraintFailure_ValueType {
            get {
                return ResourceManager.GetString("TypeConstraintFailure_ValueType", resourceCulture);
            }
        }
    }
}
