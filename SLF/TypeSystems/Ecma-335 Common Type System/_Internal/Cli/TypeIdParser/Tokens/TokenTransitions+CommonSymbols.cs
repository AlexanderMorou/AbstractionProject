 /* -----------------------------------------------------------\
 |  This code was generated by Oilexer.                        |
 |  Version: 1.0.0.0                                           |
 |-------------------------------------------------------------|
 |  To ensure the code works properly,                         |
 |  please do not make any changes to the file.                |
 |-------------------------------------------------------------|
 |  The specific language is C# (Runtime version: v4.0.30319)  |
 |  Sub-tool Name: Oilexer.CSharpCodeTranslator                |
 |  Sub-tool Version: 1.0.0.0                                  |
 \----------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf._Internal.Cli.TypeIdParser.Tokens;
using AllenCopeland.Abstraction.Slf._Internal.Cli.TypeIdParser;
using AllenCopeland.Abstraction.Slf._Internal.Cli.TypeIdParser.Tokens;

namespace AllenCopeland.Abstraction.Slf._Internal.Cli.TypeIdParser.Tokens
{
    // Module: RootModule
    partial class TokenTransitions
    {
        #region TokenTransitions nested types
        internal static class CommonSymbols
        {
            #region CommonSymbols data members
            private static TokenTransition? _Period;

            private static TokenTransition? _Comma;

            private static TokenTransition? _LeftSquareBracket;

            private static TokenTransition? _RightSquareBracket;

            private static TokenTransition? _Equals;

            private static TokenTransition? _NestingQualifier;

            private static TokenTransition? _GenericParameterSignal;

            private static TokenTransition? _PointerCallout;

            private static TokenTransition? _ByRefCallout;

            private static TokenTransition? _QuoteChar;
            #endregion // CommonSymbols data members
            #region CommonSymbols properties
            public static TokenTransition Period
            {
                get
                {
                    if (_Period == null)
                        _Period = CommonSymbolCases.Period;
                    return _Period.Value;
                }
            }

            public static TokenTransition Comma
            {
                get
                {
                    if (_Comma == null)
                        _Comma = CommonSymbolCases.Comma;
                    return _Comma.Value;
                }
            }

            public static TokenTransition LeftSquareBracket
            {
                get
                {
                    if (_LeftSquareBracket == null)
                        _LeftSquareBracket = CommonSymbolCases.LeftSquareBracket;
                    return _LeftSquareBracket.Value;
                }
            }

            public static TokenTransition RightSquareBracket
            {
                get
                {
                    if (_RightSquareBracket == null)
                        _RightSquareBracket = CommonSymbolCases.RightSquareBracket;
                    return _RightSquareBracket.Value;
                }
            }

            public static TokenTransition Equals
            {
                get
                {
                    if (_Equals == null)
                        _Equals = CommonSymbolCases.Equals;
                    return _Equals.Value;
                }
            }

            public static TokenTransition NestingQualifier
            {
                get
                {
                    if (_NestingQualifier == null)
                        _NestingQualifier = CommonSymbolCases.NestingQualifier;
                    return _NestingQualifier.Value;
                }
            }

            public static TokenTransition GenericParameterSignal
            {
                get
                {
                    if (_GenericParameterSignal == null)
                        _GenericParameterSignal = CommonSymbolCases.GenericParameterSignal;
                    return _GenericParameterSignal.Value;
                }
            }

            public static TokenTransition PointerCallout
            {
                get
                {
                    if (_PointerCallout == null)
                        _PointerCallout = CommonSymbolCases.PointerCallout;
                    return _PointerCallout.Value;
                }
            }

            public static TokenTransition ByRefCallout
            {
                get
                {
                    if (_ByRefCallout == null)
                        _ByRefCallout = CommonSymbolCases.ByRefCallout;
                    return _ByRefCallout.Value;
                }
            }

            public static TokenTransition QuoteChar
            {
                get
                {
                    if (_QuoteChar == null)
                        _QuoteChar = CommonSymbolCases.QuoteChar;
                    return _QuoteChar.Value;
                }
            }
            #endregion // CommonSymbols properties
        }
        #endregion // TokenTransitions nested types
    }
}
 /* --------------------------------------------------------------------\
 |  This file took 00:00:00.0004618 to generate.                        |
 |  Date generated: 4/8/2013 5:48:02 AM                                 |
 |  There were 3 types used by this file                                |
 |  TokenTransition, TokenTransitions+CommonSymbols, CommonSymbolCases  |
 \-------------------------------------------------------------------- */
