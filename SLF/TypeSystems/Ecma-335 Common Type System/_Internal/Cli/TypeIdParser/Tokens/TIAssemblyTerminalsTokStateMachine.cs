 /* -----------------------------------------------------------\
 |  This code was generated by Oilexer.                        |
 |  Version: 1.0.0.0                                           |
 |-------------------------------------------------------------|
 |  To ensure the code works properly,                         |
 |  please do not make any changes to the file.                |
 |-------------------------------------------------------------|
 |  The specific language is C# (Runtime version: v4.0.30319)  |
 |  Sub-tool Name: Oilexer.CSharpCodeTranslator                |
 |  Sub-tool Version: 1.0.0.0                                  |
 \----------------------------------------------------------- */
using System;
using AllenCopeland.Abstraction.Slf._Internal.Cli.TypeIdParser.Tokens;

namespace AllenCopeland.Abstraction.Slf._Internal.Cli.TypeIdParser.Tokens
{
    // Module: RootModule
    internal class TIAssemblyTerminalsTokStateMachine
    {
        #region TIAssemblyTerminalsTokStateMachine data members
        /// <summary>
        /// Data member which tracks the current execution path of the state machine.
        /// </summary>
        private int state;
        
        /// <summary>
        /// Data member which denotes the final execution point of the state machine.
        /// </summary>
        /// <remarks>
        /// Only set when an edge in the state machine is hit.
        /// </remarks>
        private ExitStates exitState;
        
        /// <summary>
        /// Defines the allowable range for the overall series
        /// </summary>
        private AssemblyTerminalCases AllowedAssemblyTerminals;
        #endregion // TIAssemblyTerminalsTokStateMachine data members
        #region TIAssemblyTerminalsTokStateMachine properties
        public int BytesConsumed
        {
            get
            {
                switch (this.exitState)
                {
                    case ExitStates.NullPublicKeyToken:
                        return 4;
                        break;
                    case ExitStates.Version:
                    case ExitStates.Culture:
                        return 7;
                        break;
                    case ExitStates.KeyToken:
                        return 14;
                        break;
                }
                return 0;
            }
        }
        
        public bool IsValidEndState
        {
            get
            {
                int _temp_exitState = ((int)(this.exitState));
                if ((_temp_exitState > 0) && (_temp_exitState <= 4))
                    return true;
                return false;
            }
        }
        #endregion // TIAssemblyTerminalsTokStateMachine properties
        #region TIAssemblyTerminalsTokStateMachine methods
        public bool Next(char @char)
        {
            switch (this.state)
            {
                case 0:
                    {
                    switch (@char)
                    {
                        case 'V':
                        case 'v':
                            // [Vv]
                            if ((this.AllowedAssemblyTerminals & AssemblyTerminalCases.Version) != AssemblyTerminalCases.None)
                            {
                                this.state = 1;
                                return true;
                            }
                            break;
                        case 'C':
                        case 'c':
                            // [Cc]
                            if ((this.AllowedAssemblyTerminals & AssemblyTerminalCases.Culture) != AssemblyTerminalCases.None)
                            {
                                this.state = 2;
                                return true;
                            }
                            break;
                        case 'P':
                        case 'p':
                            // [Pp]
                            if ((this.AllowedAssemblyTerminals & AssemblyTerminalCases.KeyToken) != AssemblyTerminalCases.None)
                            {
                                this.state = 3;
                                return true;
                            }
                            break;
                        case 'N':
                        case 'n':
                            // [Nn]
                            if ((this.AllowedAssemblyTerminals & AssemblyTerminalCases.NullPublicKeyToken) != AssemblyTerminalCases.None)
                            {
                                this.state = 4;
                                return true;
                            }
                            break;
                    }
                    }
                    break;
                case 1:
                    {
                    switch (@char)
                    {
                        case 'E':
                        case 'e':
                            // [Vv][Ee]
                            this.state = 5;
                            return true;
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    switch (@char)
                    {
                        case 'U':
                        case 'u':
                            // [Cc][Uu]
                            this.state = 10;
                            return true;
                            break;
                    }
                    }
                    break;
                case 3:
                    {
                    switch (@char)
                    {
                        case 'U':
                        case 'u':
                            // [Pp][Uu]
                            this.state = 15;
                            return true;
                            break;
                    }
                    }
                    break;
                case 4:
                    {
                    switch (@char)
                    {
                        case 'U':
                        case 'u':
                            // [Nn][Uu]
                            this.state = 27;
                            return true;
                            break;
                    }
                    }
                    break;
                case 5:
                    {
                    switch (@char)
                    {
                        case 'R':
                        case 'r':
                            // [Vv][Ee][Rr]
                            this.state = 6;
                            return true;
                            break;
                    }
                    }
                    break;
                case 6:
                    {
                    switch (@char)
                    {
                        case 'S':
                        case 's':
                            // [Vv][Ee][Rr][Ss]
                            this.state = 7;
                            return true;
                            break;
                    }
                    }
                    break;
                case 7:
                    {
                    switch (@char)
                    {
                        case 'I':
                        case 'i':
                            // [Vv][Ee][Rr][Ss][Ii]
                            this.state = 8;
                            return true;
                            break;
                    }
                    }
                    break;
                case 8:
                    {
                    switch (@char)
                    {
                        case 'O':
                        case 'o':
                            // [Vv][Ee][Rr][Ss][Ii][Oo]
                            this.state = 9;
                            return true;
                            break;
                    }
                    }
                    break;
                case 9:
                    {
                    switch (@char)
                    {
                        case 'N':
                        case 'n':
                            // [Vv][Ee][Rr][Ss][Ii][Oo][Nn]
                            this.exitState = ExitStates.Version;
                            this.state = -1;
                            break;
                    }
                    }
                    break;
                case 10:
                    {
                    switch (@char)
                    {
                        case 'L':
                        case 'l':
                            // [Cc][Uu][Ll]
                            this.state = 11;
                            return true;
                            break;
                    }
                    }
                    break;
                case 11:
                    {
                    switch (@char)
                    {
                        case 'T':
                        case 't':
                            // [Cc][Uu][Ll][Tt]
                            this.state = 12;
                            return true;
                            break;
                    }
                    }
                    break;
                case 12:
                    {
                    switch (@char)
                    {
                        case 'U':
                        case 'u':
                            // [Cc][Uu][Ll][Tt][Uu]
                            this.state = 13;
                            return true;
                            break;
                    }
                    }
                    break;
                case 13:
                    {
                    switch (@char)
                    {
                        case 'R':
                        case 'r':
                            // [Cc][Uu][Ll][Tt][Uu][Rr]
                            this.state = 14;
                            return true;
                            break;
                    }
                    }
                    break;
                case 14:
                    {
                    switch (@char)
                    {
                        case 'E':
                        case 'e':
                            // [Cc][Uu][Ll][Tt][Uu][Rr][Ee]
                            this.exitState = ExitStates.Culture;
                            this.state = -1;
                            break;
                    }
                    }
                    break;
                case 15:
                    {
                    switch (@char)
                    {
                        case 'B':
                        case 'b':
                            // [Pp][Uu][Bb]
                            this.state = 16;
                            return true;
                            break;
                    }
                    }
                    break;
                case 16:
                    {
                    switch (@char)
                    {
                        case 'L':
                        case 'l':
                            // [Pp][Uu][Bb][Ll]
                            this.state = 17;
                            return true;
                            break;
                    }
                    }
                    break;
                case 17:
                    {
                    switch (@char)
                    {
                        case 'I':
                        case 'i':
                            // [Pp][Uu][Bb][Ll][Ii]
                            this.state = 18;
                            return true;
                            break;
                    }
                    }
                    break;
                case 18:
                    {
                    switch (@char)
                    {
                        case 'C':
                        case 'c':
                            // [Pp][Uu][Bb][Ll][Ii][Cc]
                            this.state = 19;
                            return true;
                            break;
                    }
                    }
                    break;
                case 19:
                    {
                    switch (@char)
                    {
                        case 'K':
                        case 'k':
                            // [Pp][Uu][Bb][Ll][Ii][Cc][Kk]
                            this.state = 20;
                            return true;
                            break;
                    }
                    }
                    break;
                case 20:
                    {
                    switch (@char)
                    {
                        case 'E':
                        case 'e':
                            // [Pp][Uu][Bb][Ll][Ii][Cc][Kk][Ee]
                            this.state = 21;
                            return true;
                            break;
                    }
                    }
                    break;
                case 21:
                    {
                    switch (@char)
                    {
                        case 'Y':
                        case 'y':
                            // [Pp][Uu][Bb][Ll][Ii][Cc][Kk][Ee][Yy]
                            this.state = 22;
                            return true;
                            break;
                    }
                    }
                    break;
                case 22:
                    {
                    switch (@char)
                    {
                        case 'T':
                        case 't':
                            // [Pp][Uu][Bb][Ll][Ii][Cc][Kk][Ee][Yy][Tt]
                            this.state = 23;
                            return true;
                            break;
                    }
                    }
                    break;
                case 23:
                    {
                    switch (@char)
                    {
                        case 'O':
                        case 'o':
                            // [Pp][Uu][Bb][Ll][Ii][Cc][Kk][Ee][Yy][Tt][Oo]
                            this.state = 24;
                            return true;
                            break;
                    }
                    }
                    break;
                case 24:
                    {
                    switch (@char)
                    {
                        case 'K':
                        case 'k':
                            // [Pp][Uu][Bb][Ll][Ii][Cc][Kk][Ee][Yy][Tt][Oo][Kk]
                            this.state = 25;
                            return true;
                            break;
                    }
                    }
                    break;
                case 25:
                    {
                    switch (@char)
                    {
                        case 'E':
                        case 'e':
                            // [Pp][Uu][Bb][Ll][Ii][Cc][Kk][Ee][Yy][Tt][Oo][Kk][Ee]
                            this.state = 26;
                            return true;
                            break;
                    }
                    }
                    break;
                case 26:
                    {
                    switch (@char)
                    {
                        case 'N':
                        case 'n':
                            // [Pp][Uu][Bb][Ll][Ii][Cc][Kk][Ee][Yy][Tt][Oo][Kk][Ee][Nn]
                            this.exitState = ExitStates.KeyToken;
                            this.state = -1;
                            break;
                    }
                    }
                    break;
                case 27:
                    {
                    switch (@char)
                    {
                        case 'L':
                        case 'l':
                            // [Nn][Uu][Ll]
                            this.state = 28;
                            return true;
                            break;
                    }
                    }
                    break;
                case 28:
                    {
                    switch (@char)
                    {
                        case 'L':
                        case 'l':
                            // [Nn][Uu][Ll][Ll]
                            this.exitState = ExitStates.NullPublicKeyToken;
                            this.state = -1;
                            break;
                    }
                    }
                    break;
            }
            return false;
        }
        
        /// <summary>
        /// Resets the state machine to its default state.
        /// </summary>
        public void Reset(AssemblyTerminalCases allowedAssemblyTerminals)
        {
            this.AllowedAssemblyTerminals = allowedAssemblyTerminals;
            this.exitState = ExitStates.None;
            this.state = 0;
        }
        
        public void Reset()
        {
            this.Reset(AssemblyTerminalCases.All);
        }
        
        public void Inject(TypeIdParserScanData data)
        {
            if (this.IsValidEndState)
                switch (this.exitState)
                {
                    case ExitStates.Culture:
                        // Exit point for Culture.
                        if ((this.AllowedAssemblyTerminals & AssemblyTerminalCases.Culture) != AssemblyTerminalCases.None)
                            data.AddAssemblyTerminals(AssemblyTerminalCases.Culture);
                        break;
                    case ExitStates.KeyToken:
                        // Exit point for KeyToken.
                        if ((this.AllowedAssemblyTerminals & AssemblyTerminalCases.KeyToken) != AssemblyTerminalCases.None)
                            data.AddAssemblyTerminals(AssemblyTerminalCases.KeyToken);
                        break;
                    case ExitStates.NullPublicKeyToken:
                        // Exit point for NullPublicKeyToken.
                        if ((this.AllowedAssemblyTerminals & AssemblyTerminalCases.NullPublicKeyToken) != AssemblyTerminalCases.None)
                            data.AddAssemblyTerminals(AssemblyTerminalCases.NullPublicKeyToken);
                        break;
                    case ExitStates.Version:
                        // Exit point for Version.
                        if ((this.AllowedAssemblyTerminals & AssemblyTerminalCases.Version) != AssemblyTerminalCases.None)
                            data.AddAssemblyTerminals(AssemblyTerminalCases.Version);
                        break;
                }
        }
        #endregion // TIAssemblyTerminalsTokStateMachine methods
        
        #region TIAssemblyTerminalsTokStateMachine nested types
        
        private enum ExitStates
        {
            None, 
            
            /// <summary>
            /// Used to express the exit-state for the Version case.
            /// </summary>
            /// <remarks>
            /// Original definition: @"Version":Version;
            /// </remarks>
            Version = 2, 
            
            /// <summary>
            /// Used to express the exit-state for the Culture case.
            /// </summary>
            /// <remarks>
            /// Original definition: @"Culture":Culture;
            /// </remarks>
            Culture = 3, 
            
            /// <summary>
            /// Used to express the exit-state for the KeyToken case.
            /// </summary>
            /// <remarks>
            /// Original definition: @"PublicKeyToken":KeyToken;
            /// </remarks>
            KeyToken = 4, 
            
            /// <summary>
            /// Used to express the exit-state for the NullPublicKeyToken case.
            /// </summary>
            /// <remarks>
            /// Original definition: @"null":NullPublicKeyToken;
            /// </remarks>
            NullPublicKeyToken = 1
        }
        #endregion // TIAssemblyTerminalsTokStateMachine nested types
    }
}
 /* --------------------------------------------------------------------------------------\
 |  This file took 00:00:00.0015642 to generate.                                          |
 |  Date generated: 4/8/2013 7:25:03 PM                                                   |
 |  There were 7 types used by this file                                                  |
 |  System.Int32, TIAssemblyTerminalsTokStateMachine+ExitStates, AssemblyTerminalCases,   |
 |  System.Boolean, System.Char, System.Void,                                             |
 |  TypeIdParserScanData                                                                  |
 |----------------------------------------------------------------------------------------|
 |  There were 1 assemblies referenced:                                                   |
 |  mscorlib                                                                              |
 \-------------------------------------------------------------------------------------- */
