 /* -----------------------------------------------------------\
 |  This code was generated by Oilexer.                        |
 |  Version: 1.0.0.0                                           |
 |-------------------------------------------------------------|
 |  To ensure the code works properly,                         |
 |  please do not make any changes to the file.                |
 |-------------------------------------------------------------|
 |  The specific language is C# (Runtime version: v4.0.30319)  |
 |  Sub-tool Name: Oilexer.CSharpCodeTranslator                |
 |  Sub-tool Version: 1.0.0.0                                  |
 \----------------------------------------------------------- */
using System;

namespace AllenCopeland.Abstraction.Slf._Internal.Cli.TypeIdParser.Tokens
{
    // Module: RootModule
    internal class TIWhitespaceTokStateMachine :
        CharStream
    {
        #region TIWhitespaceTokStateMachine data members
        /// <summary>
        /// Data member which tracks the current execution path of the state machine.
        /// </summary>
        private int state;
        
        /// <summary>
        /// Data member which denotes the final execution point of the state machine.
        /// </summary>
        /// <remarks>
        /// Only set when an edge in the state machine is hit.
        /// </remarks>
        private bool exitState;
        
        private int exitlength;
        #endregion // TIWhitespaceTokStateMachine data members
        #region TIWhitespaceTokStateMachine properties
        public bool IsValidEndState
        {
            get
            {
                return this.exitState;
            }
        }
        
        public int BytesConsumed
        {
            get
            {
                return this.exitlength;
            }
        }
        #endregion // TIWhitespaceTokStateMachine properties
        #region TIWhitespaceTokStateMachine methods
        public bool Next(char @char)
        {
            switch (this.state)
            {
                case 0:
                    if (((('\t' <= @char) && (@char <= '\v')) || ('\r' == @char)) || (' ' == @char))
                        goto MOVETOSTATE1;
                    break;
                case 1:
                    if (((('\t' <= @char) && (@char <= '\v')) || ('\r' == @char)) || (' ' == @char))
                        goto NOMINAL_EXIT;
                    break;
            }
            return false;
        MOVETOSTATE1:
            this.state = 1;
            this.exitState = true;
            goto NOMINAL_EXIT;
        NOMINAL_EXIT:
            this.Push(@char);
            this.exitlength = this.actualSize;
            return true;
        }
        
        public string GetCapture()
        {
            char[] result = new char[this.exitlength];
            for(int i = 0; (i < this.exitlength); i++)
            {
                result[i] = this.buffer[i];
            }
            return new string(result);
        }
        
        public void Reset()
        {
            this.exitlength = 0;
            this.Purge();
            this.exitState = false;
            this.state = 0;
        }
        
        public void Inject(TypeIdParserScanData data)
        {
            if (this.IsValidEndState)
                data.AddCapture(this.GetCapture(), TypeIdParserTokens.Whitespace);
        }
        #endregion // TIWhitespaceTokStateMachine methods
    }
}
 /* ----------------------------------------------------\
 |  This file took 00:00:00.0004711 to generate.        |
 |  Date generated: 4/8/2013 7:25:03 PM                 |
 |  There were 8 types used by this file                |
 |  System.Int32, System.Boolean, System.Char,          |
 |  System.String, System.Void, TypeIdParserScanData,   |
 |  TypeIdParserTokens, CharStream                      |
 |------------------------------------------------------|
 |  There were 1 assemblies referenced:                 |
 |  mscorlib                                            |
 \---------------------------------------------------- */
