 /* -----------------------------------------------------------\
 |  This code was generated by Oilexer.                        |
 |  Version: 1.0.0.0                                           |
 |-------------------------------------------------------------|
 |  To ensure the code works properly,                         |
 |  please do not make any changes to the file.                |
 |-------------------------------------------------------------|
 |  The specific language is C# (Runtime version: v4.0.30319)  |
 |  Sub-tool Name: Oilexer.CSharpCodeTranslator                |
 |  Sub-tool Version: 1.0.0.0                                  |
 \----------------------------------------------------------- */
using AllenCopeland.Abstraction.Slf._Internal.Cli.TypeIdParser.Tokens;
using AllenCopeland.Abstraction.Slf._Internal.Cli.TypeIdParser;
using AllenCopeland.Abstraction.Slf._Internal.Cli.TypeIdParser.Tokens;

namespace AllenCopeland.Abstraction.Slf._Internal.Cli.TypeIdParser.Tokens
{
    // Module: RootModule
    partial class TokenTransitions
    {
        #region TokenTransitions nested types
        internal static class Captures
        {
            #region Captures data members
            private static TokenTransition? _CultureIdentifier;

            private static TokenTransition? _EndOFile;

            private static TokenTransition? _HexQWord;

            private static TokenTransition? _NestedQualifiedAssemblyIdentifier;

            private static TokenTransition? _Number;

            private static TokenTransition? _QualifiedAssemblyIdentifier;

            private static TokenTransition? _QualifiedIdentifier;

            private static TokenTransition? _Whitespace;
            #endregion // Captures data members
            #region Captures properties
            public static TokenTransition CultureIdentifier
            {
                get
                {
                    if (_CultureIdentifier == null)
                        _CultureIdentifier = TypeIdParserTokens.CultureIdentifier;
                    return _CultureIdentifier.Value;
                }
            }

            public static TokenTransition EndOFile
            {
                get
                {
                    if (_EndOFile == null)
                        _EndOFile = TypeIdParserTokens.EndOFile;
                    return _EndOFile.Value;
                }
            }

            public static TokenTransition HexQWord
            {
                get
                {
                    if (_HexQWord == null)
                        _HexQWord = TypeIdParserTokens.HexQWord;
                    return _HexQWord.Value;
                }
            }

            public static TokenTransition NestedQualifiedAssemblyIdentifier
            {
                get
                {
                    if (_NestedQualifiedAssemblyIdentifier == null)
                        _NestedQualifiedAssemblyIdentifier = TypeIdParserTokens.NestedQualifiedAssemblyIdentifier;
                    return _NestedQualifiedAssemblyIdentifier.Value;
                }
            }

            public static TokenTransition Number
            {
                get
                {
                    if (_Number == null)
                        _Number = TypeIdParserTokens.Number;
                    return _Number.Value;
                }
            }

            public static TokenTransition QualifiedAssemblyIdentifier
            {
                get
                {
                    if (_QualifiedAssemblyIdentifier == null)
                        _QualifiedAssemblyIdentifier = TypeIdParserTokens.QualifiedAssemblyIdentifier;
                    return _QualifiedAssemblyIdentifier.Value;
                }
            }

            public static TokenTransition QualifiedIdentifier
            {
                get
                {
                    if (_QualifiedIdentifier == null)
                        _QualifiedIdentifier = TypeIdParserTokens.QualifiedIdentifier;
                    return _QualifiedIdentifier.Value;
                }
            }

            public static TokenTransition Whitespace
            {
                get
                {
                    if (_Whitespace == null)
                        _Whitespace = TypeIdParserTokens.Whitespace;
                    return _Whitespace.Value;
                }
            }
            #endregion // Captures properties
        }
        #endregion // TokenTransitions nested types
    }
}
 /* ----------------------------------------------------------------\
 |  This file took 00:00:00.0005519 to generate.                    |
 |  Date generated: 4/8/2013 5:48:02 AM                             |
 |  There were 3 types used by this file                            |
 |  TokenTransition, TokenTransitions+Captures, TypeIdParserTokens  |
 \---------------------------------------------------------------- */
