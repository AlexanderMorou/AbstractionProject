using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AllenCopeland.Abstraction.Slf.Ast;
using AllenCopeland.Abstraction.Slf.Ast.Expressions;
using AllenCopeland.Abstraction.Slf.Ast.Expressions.Lambda;
using AllenCopeland.Abstraction.Slf.Ast.Expressions.Linq;
using AllenCopeland.Abstraction.Slf.Ast.Members;
using AllenCopeland.Abstraction.Slf.Ast.Statements;
using AllenCopeland.Abstraction.Slf.Abstract.Members;
using AllenCopeland.Abstraction.Slf.Abstract;
using System.CodeDom.Compiler;
using AllenCopeland.Abstraction.Utilities.Collections;
using System.Text.RegularExpressions;
/*---------------------------------------------------------------------\
| Copyright © 2008-2015 Allen C. [Alexander Morou] Copeland Jr.        |
|----------------------------------------------------------------------|
| The Abstraction Project's code is provided under a contract-release  |
| basis.  DO NOT DISTRIBUTE and do not use beyond the contract terms.  |
\-------------------------------------------------------------------- */

namespace AllenCopeland.Abstraction.Slf.Translation
{

    public abstract class IntermediateCodeTranslatorBase :
        IIntermediateCodeTranslator
    {
        private static Regex docCommentLookup = new Regex(@"@(?<refKind>[PpSsTt]):(?<targetName>[_A-Za-z](?:[A-Z_a-z0-9]|\\u[0-9A-F_a-f]{4})*(?:\{[0-9A-Z_a-z]+(?:,[ ]*[0-9_A-Za-z]+)*\})?(\.[A-Z_a-z](?:[A-Z_a-z0-9]|\\u[_0-9A-Fa-f]{4})*(?:\{[_0-9A-Za-z]+(?:,[ ]*[_0-9A-Za-z]+)*\})?)*);", RegexOptions.Compiled);
        private static Regex docCommentTableStart = new Regex(@"@table;(?<inner>(?:(?!@\/table\;).|\n)*)@/table;", RegexOptions.Multiline | RegexOptions.Compiled);
        private static Regex docCommentCode = new Regex(@"@code(?: language=(?<language>[^;]+))?;(?<inner>(?:(?!@\/code\;).|\n)*)@/code;", RegexOptions.Multiline | RegexOptions.Compiled);
        private static Regex docCommentParagraph = new Regex(@"@para;(?<inner>(?:(?!@\/para\;).|\n)*)@/para;", RegexOptions.Multiline | RegexOptions.Compiled);
        private static Regex docCommentTableListItem = new Regex(@"\|(?<IsHeader>\:)?-(?<left>(?:(?!-\|-).)*)-\|-(?<right>(?:(?!\|).)*)-\|", RegexOptions.Multiline | RegexOptions.Compiled);
        private static Regex docCommentWrapper = new Regex(@"(?<CurrentSpace>(?:[ \t])+)");
        private const string generatedMessageBase =
            "This code was generated by {0}.\r\n" +
            "Version: {1} \r\n" +
            "-\r\n" +
            "To ensure the code works properly,\r\n" +
            "please do not make any changes to the file.\r\n" +
            "-\r\n" +
            "The specific language is {2}\r\n" +
            "Sub-tool Name: {3}\r\n" +
            "Sub-tool Version: {4}";

        /// <summary>
        /// The <see cref="IndentedTextWriter"/> which is
        /// used to handle indentation.
        /// </summary>
        private IndentedTextWriter target = null;

        private IIntermediateCodeTranslatorOptions options;

        protected abstract IIntermediateCodeNameProvider InitializeNameProvider();
        protected abstract IIntermediateCodeTranslatorOptions InitializeOptions();
        private IControlledCollection<IIntermediateDeclaration> buildTrailReadOnly;
        private List<IIntermediateDeclaration> buildTrail = new List<IIntermediateDeclaration>();
        private IntermediateSpanTranslationClasses currentSpanClass = IntermediateSpanTranslationClasses.None;
        private IIntermediateCodeTranslatorFormatter formatter;
        private IIntermediateCodeNameProvider nameProvider;
        internal static readonly DeclarationTranslationOrder[] fullOrderSet = new DeclarationTranslationOrder[]
            {
                DeclarationTranslationOrder.BinaryOperatorCoercions,
                DeclarationTranslationOrder.Classes,
                DeclarationTranslationOrder.Constructors,
                DeclarationTranslationOrder.Delegates,
                DeclarationTranslationOrder.Enums,
                DeclarationTranslationOrder.Events,
                DeclarationTranslationOrder.Fields,
                DeclarationTranslationOrder.Indexers,
                DeclarationTranslationOrder.Interfaces,
                DeclarationTranslationOrder.Methods,
                DeclarationTranslationOrder.Properties,
                DeclarationTranslationOrder.Structs,
                DeclarationTranslationOrder.TypeCoercions,
                DeclarationTranslationOrder.UnaryOperatorCoercions,
                DeclarationTranslationOrder.Remaining,
            };
        private string toolVersion;

        #region IIntermediateCodeTranslator Members
        public IControlledCollection<IIntermediateDeclaration> BuildTrail
        {
            get
            {
                CheckBuildTrail();
                return this.buildTrailReadOnly;
            }
        }

        private void CheckBuildTrail()
        {
            if (buildTrailReadOnly == null)
                buildTrailReadOnly = this.InitializeReadOnlyBuildTrail();
        }

        private IControlledCollection<IIntermediateDeclaration> InitializeReadOnlyBuildTrail()
        {
            return new ControlledCollection<IIntermediateDeclaration>(buildTrail);
        }

        protected void BuildTrailPush(IIntermediateDeclaration declaration)
        {
            CheckBuildTrail();
            this.buildTrail.Add(declaration);
        }

        protected void BuildTrailPop()
        {
            CheckBuildTrail();
            this.buildTrail.RemoveAt(buildTrail.Count - 1);
        }

        protected void BuildTrailPop(IIntermediateDeclaration declaration)
        {
            CheckBuildTrail();
            if (this.buildTrail.Contains(declaration))
            {
                for (int i = buildTrail.Count - 1; i >= 0; i--)
                    if (buildTrail[i] == declaration)
                    {
                        buildTrail.RemoveAt(i);
                        break;
                    }
            }
        }

        public IIntermediateCodeTranslatorOptions Options
        {
            get
            {
                if (this.options == null)
                    this.options = this.InitializeOptions();
                return this.options;
            }
        }
        #endregion

        #region IExpressionVisitor Members

        /// <summary>
        /// Translates a property reference expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPropertyReferenceExpression{TProperty, TPropertyParent}"/> to translate.</param>
        public abstract void Translate<TProperty, TPropertyParent>(IPropertyReferenceExpression<TProperty, TPropertyParent> expression)
            where TProperty :
                IPropertyMember<TProperty, TPropertyParent>
            where TPropertyParent :
                IPropertyParent<TProperty, TPropertyParent>;

        /// <summary>
        /// Translates a property signature reference expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPropertySignatureReferenceExpression{TPropertySignature, TPropertySignatureParent}"/> to translate.</param>
        public abstract void Translate<TPropertySignature, TPropertySignatureParent>(IPropertySignatureReferenceExpression<TPropertySignature, TPropertySignatureParent> expression)
            where TPropertySignature :
                IPropertySignatureMember<TPropertySignature, TPropertySignatureParent>
            where TPropertySignatureParent :
                IPropertySignatureParent<TPropertySignature, TPropertySignatureParent>;
        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IFieldReferenceExpression{TField, TFieldParent}"/>
        /// to translate.</param>
        public abstract void Translate<TField, TFieldParent>(IFieldReferenceExpression<TField, TFieldParent> expression)
            where TField :
                IFieldMember<TField, TFieldParent>
            where TFieldParent :
                IFieldParent<TField, TFieldParent>;

        public virtual void Translate<TLeft, TRight>(IBinaryOperationExpression<TLeft, TRight> expression)
            where TLeft :
                INaryOperandExpression
            where TRight :
                INaryOperandExpression
        {
            switch (expression.Associativity)
            {
                case BinaryOperationAssociativity.Left:
                    if (expression.LeftSide != null)
                    {
                        expression.LeftSide.Visit(this);
                        Translate(expression.OperationKind);
                    }
                    expression.RightSide.Visit(this);
                    break;
                case BinaryOperationAssociativity.Right:
                    expression.LeftSide.Visit(this);
                    if (expression.RightSide != null)
                    {
                        Translate(expression.OperationKind);
                        expression.RightSide.Visit(this);
                    }
                    break;
                default:
                    break;
            }
        }

        public abstract void Translate(BinaryOperationKind kind);

        public abstract void Translate(IIndexerReferenceExpression expression);

        /// <summary>
        /// Translates a conditional expression.
        /// </summary>
        /// <param name="expression">The <see cref="IConditionalExpression"/> to translate.</param>
        public abstract void Translate(IConditionalExpression expression);

        public abstract void Translate(IType type);

        /// <summary>
        /// Visits a unary operation expression.
        /// </summary>
        /// <param name="expression">The <see cref="IUnaryOperationExpression"/> to translate.</param>
        public abstract void Translate(IUnaryOperationExpression expression);

        /// <summary>
        /// Translates a type cast expression.
        /// </summary>
        /// <param name="expression">The <see cref="ITypeCastExpression"/> to translate.</param>
        public abstract void Translate(ITypeCastExpression expression);

        /// <summary>
        /// Translates a type of expression
        /// </summary>
        /// <param name="expression">The <see cref="ITypeOfExpression"/> to translate.</param>
        public abstract void Translate(ITypeOfExpression expression);

        /// <summary>
        /// Translates a type reference expression.
        /// </summary>
        /// <param name="expression">The <see cref="ITypeReferenceExpression"/> to translate.</param>
        public abstract void Translate(ITypeReferenceExpression expression);

        /// <summary>
        /// Translates a variadic type cast expression.
        /// </summary>
        /// <param name="expression">The <see cref="IVariadicTypeCastExpression"/> to translate.</param>
        public abstract void Translate(IVariadicTypeCastExpression expression);

        /// <summary>
        /// Translates a symbol expression.
        /// </summary>
        /// <param name="expression">The <see cref="ISymbolExpression"/> to translate.</param>
        public abstract void Translate(ISymbolExpression expression);

        /// <summary>
        /// Visits an expression which obtains a member handle through a static
        /// reference.
        /// </summary>
        /// <param name="expression">The <see cref="IStaticGetMemberHandleExpression"/> to translate.</param>
        public abstract void Translate(IStaticGetMemberHandleExpression expression);

        /// <summary>
        /// Translates a special reference expression.
        /// </summary>
        /// <param name="expression">The <see cref="ISpecialReferenceExpression"/> to translate.</param>
        public abstract void Translate(ISpecialReferenceExpression expression);

        /// <summary>
        /// Translates a property reference expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPropertyReferenceExpression"/> to translate.</param>
        public abstract void Translate(IPropertyReferenceExpression expression);

        /// <summary>
        /// Translates a parenthesized expression.
        /// </summary>
        /// <param name="expression">The <see cref="IParenthesizedExpression"/> to translate.</param>
        public abstract void Translate(IParenthesizedExpression expression);

        /// <summary>
        /// Translates a named parameter expression.
        /// </summary>
        /// <param name="expression">The <see cref="INamedParameterExpression"/> which designates
        /// the name and value of a parameter to pass into a method/constructor/indexer.</param>
        public abstract void Translate(INamedParameterExpression expression);

        /// <summary>
        /// Translates a method pointer reference expression.
        /// </summary>
        /// <param name="expression">The <see cref="IMethodPointerReferenceExpression"/> to translate.</param>
        public abstract void Translate(IMethodPointerReferenceExpression expression);

        /// <summary>
        /// Translates a method invoke expression.
        /// </summary>
        /// <param name="expression">The <see cref="IMethodInvokeExpression"/> to translate.</param>
        public abstract void Translate(IMethodInvokeExpression expression);

        /// <summary>
        /// Translates a local reference expression.
        /// </summary>
        /// <param name="expression">The <see cref="ILocalReferenceExpression"/> to translate.</param>
        public abstract void Translate(ILocalReferenceExpression expression);

        /// <summary>
        /// Translates a bound local reference expression.
        /// </summary>
        /// <param name="expression">The <see cref="IBoundLocalReferenceExpression"/> to translate.</param>
        public abstract void Translate(IBoundLocalReferenceExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IFieldReferenceExpression"/>
        /// to translate.</param>
        public abstract void Translate(IFieldReferenceExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IExpressionToCommaTypeReferenceFusionExpression"/>
        /// to translate.</param>
        public abstract void Translate(IExpressionToCommaTypeReferenceFusionExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IExpressionToCommaFusionExpression"/>
        /// to translate.</param>
        public abstract void Translate(IExpressionToCommaFusionExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IExpressionFusionExpression"/>
        /// to translate.</param>
        public abstract void Translate(IExpressionFusionExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IEventInvokeExpression"/>
        /// to translate.</param>
        public abstract void Translate(IEventInvokeExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IDirectionExpression"/>
        /// to translate.</param>
        public abstract void Translate(IDirectionExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IDelegateReferenceExpression"/>
        /// to translate.</param>
        public abstract void Translate(IDelegateReferenceExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IDelegateMethodPointerReferenceExpression"/>
        /// to translate.</param>
        public abstract void Translate(IDelegateMethodPointerReferenceExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IDelegateInvokeExpression"/>
        /// to translate.</param>
        public abstract void Translate(IDelegateInvokeExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IDelegateHolderReferenceExpression"/>
        /// to translate.</param>
        public abstract void Translate(IDelegateHolderReferenceExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="ICreateInstanceMemberAssignment"/>
        /// to translate.</param>
        public abstract void Translate(ICreateInstanceUnboundMemberAssignment expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="ICreateInstancePropertyAssignment{TProperty, TPropertyParent}"/>
        /// to translate.</param>
        public abstract void Translate<TProperty, TPropertyParent>(ICreateInstancePropertyAssignment<TProperty, TPropertyParent> expression)
            where TProperty :
                IPropertySignatureMember<TProperty, TPropertyParent>
            where TPropertyParent :
                IPropertySignatureParent<TProperty, TPropertyParent>;
        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="ICreateInstanceFieldAssignment{TField, TFieldParent}"/>
        /// to translate.</param>
        public abstract void Translate<TField, TFieldParent>(ICreateInstanceFieldAssignment<TField, TFieldParent> expression)
            where TField :
                IFieldMember<TField, TFieldParent>
            where TFieldParent :
                IFieldParent<TField, TFieldParent>;
        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="ICreateInstanceExpression"/>
        /// to translate.</param>
        public abstract void Translate(ICreateInstanceExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="ICreateArrayExpression"/>
        /// to translate.</param>
        public abstract void Translate(ICreateArrayExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="ICreateArrayNestedDetailExpression"/>
        /// to translate.</param>
        public abstract void Translate(ICreateArrayNestedDetailExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="ICreateArrayDetailExpression"/>
        /// to translate.</param>
        public abstract void Translate(ICreateArrayDetailExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="ICommaExpression"/>
        /// to translate.</param>
        public abstract void Translate(ICommaExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IAnonymousMethodWithParametersExpression"/>
        /// to translate.</param>
        public abstract void Translate(IAnonymousMethodWithParametersExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IAnonymousMethodExpression"/>
        /// to translate.</param>
        public abstract void Translate(IAnonymousMethodExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="ILambdaTypedStatementExpression"/>
        /// to translate.</param>
        public abstract void Translate(ILambdaTypedStatementExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="ILambdaTypeInferredStatementExpression"/>
        /// to translate.</param>
        public abstract void Translate(ILambdaTypeInferredStatementExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="ILambdaTypedSimpleExpression"/>
        /// to translate.</param>
        public abstract void Translate(ILambdaTypedSimpleExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="ILambdaTypeInferredSimpleExpression"/>
        /// to translate.</param>
        public abstract void Translate(ILambdaTypeInferredSimpleExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IParameterReferenceExpression"/>
        /// to translate.</param>
        public abstract void Translate(IParameterReferenceExpression expression);

        public abstract void Translate<TParameterParent, TIntermediateParameterParent, TParameter, TIntermediateParameter>(IParameterReferenceExpression<TParameterParent, TIntermediateParameterParent, TParameter, TIntermediateParameter> expression)
            where TParameterParent :
                IParameterParent<TParameterParent, TParameter>
            where TIntermediateParameterParent :
                TParameterParent,
                IIntermediateParameterParent<TParameterParent, TIntermediateParameterParent, TParameter, TIntermediateParameter>
            where TParameter :
                IParameterMember<TParameterParent>
            where TIntermediateParameter :
                TParameter,
                IIntermediateParameterMember<TParameterParent, TIntermediateParameterParent>;

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IConstructorInvokeExpression"/>
        /// to translate.</param>
        public abstract void Translate(IConstructorInvokeExpression expression);

        /// <summary>
        /// Translates the <paramref name="ctorPointerReference"/> provided.
        /// </summary>
        /// <param name="ctorPointerReference">The <see cref="IConstructorPointerReferenceExpression"/>
        /// to translate.</param>
        public abstract void Translate(IConstructorPointerReferenceExpression ctorPointerReference);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="ILinqExpression"/>
        /// to translate.</param>
        public abstract void Translate(ILinqExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IAssignmentExpression"/>
        /// to translate.</param>
        public abstract void Translate(IAssignmentExpression expression);

        /// <summary>
        /// Translates the range variable of a language integrated query.
        /// </summary>
        /// <param name="expression">The <see cref="ILinqRangeVariableReference"/>
        /// to translate.</param>
        public abstract void Translate(ILinqRangeVariableReference expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IEventReferenceExpression"/> 
        /// to translate.</param>
        public abstract void Translate(IEventReferenceExpression expression);

        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IEventReferenceExpression{TEvent, TEventParameter, TEventParent}"/> 
        /// to visit.</param>
        public abstract void Translate<TEvent, TEventParameter, TEventParent>(IEventReferenceExpression<TEvent, TEventParameter, TEventParent> expression)
            where TEvent :
                IEventSignatureMember<TEvent, TEventParameter, TEventParent>
            where TEventParent :
                IEventSignatureParent<TEvent, TEventParameter, TEventParent>
            where TEventParameter :
                IEventSignatureParameterMember<TEvent, TEventParameter, TEventParent>;


        /// <summary>
        /// Translates the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IMetadatumDefinitionExpressionParameter"/>
        /// to visit.</param>
        public abstract void Translate(IMetadatumDefinitionExpressionParameter expression);
        #endregion

        #region ILinqVisitor Members

        public abstract void Translate(ILinqSelectBody expression);

        public abstract void Translate(ILinqGroupBody expression);

        public abstract void Translate(ILinqFusionSelectBody expression);

        public abstract void Translate(ILinqFusionGroupBody expression);

        public abstract void Translate(ILinqFromClause linqClause);

        public abstract void Translate(ILinqJoinClause linqClause);

        public abstract void Translate(ILinqLetClause linqClause);

        public abstract void Translate(ILinqOrderByClause linqClause);

        public abstract void Translate(ILinqTypedFromClause linqClause);

        public abstract void Translate(ILinqTypedJoinClause linqClause);

        public abstract void Translate(ILinqWhereClause linqClause);

        #endregion

        #region IPrimitiveVisitor Members

        /// <summary>
        /// Translates a boolean primitive expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPrimitiveExpression{T}"/> to translate.</param>
        public abstract void Translate(IPrimitiveExpression<bool> expression);

        /// <summary>
        /// Translates a character primitive expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPrimitiveExpression{T}"/> to translate.</param>
        public abstract void Translate(IPrimitiveExpression<char> expression);

        /// <summary>
        /// Translates a string primitive expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPrimitiveExpression{T}"/> to translate.</param>
        public abstract void Translate(IPrimitiveExpression<string> expression);

        /// <summary>
        /// Translates a byte primitive expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPrimitiveExpression{T}"/> to translate.</param>
        public abstract void Translate(IPrimitiveExpression<byte> expression);

        /// <summary>
        /// Translates a sbyte primitive expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPrimitiveExpression{T}"/> to translate.</param>
        public abstract void Translate(IPrimitiveExpression<sbyte> expression);

        /// <summary>
        /// Visits an unsigned 16-bit primitive expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPrimitiveExpression{T}"/> to translate.</param>
        public abstract void Translate(IPrimitiveExpression<ushort> expression);

        /// <summary>
        /// Translates a 16-bit primitive expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPrimitiveExpression{T}"/> to translate.</param>
        public abstract void Translate(IPrimitiveExpression<short> expression);

        /// <summary>
        /// Translates an unsigned 32-bit primitive expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPrimitiveExpression{T}"/> to translate.</param>
        public abstract void Translate(IPrimitiveExpression<uint> expression);

        /// <summary>
        /// Translates a 32-bit primitive expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPrimitiveExpression{T}"/> to translate.</param>
        public abstract void Translate(IPrimitiveExpression<int> expression);

        /// <summary>
        /// Visits an unsigned 64-bit primitive expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPrimitiveExpression{T}"/> to translate.</param>
        public abstract void Translate(IPrimitiveExpression<ulong> expression);

        /// <summary>
        /// Translates a 64-bit primitive expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPrimitiveExpression{T}"/> to translate.</param>
        public abstract void Translate(IPrimitiveExpression<long> expression);

        /// <summary>
        /// Translates a single precision floating point primitive expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPrimitiveExpression{T}"/> to translate.</param>
        public abstract void Translate(IPrimitiveExpression<float> expression);

        /// <summary>
        /// Translates a double precision floating point primitive expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPrimitiveExpression{T}"/> to translate.</param>
        public abstract void Translate(IPrimitiveExpression<double> expression);

        /// <summary>
        /// Translates a decimal primitive expression.
        /// </summary>
        /// <param name="expression">The <see cref="IPrimitiveExpression{T}"/> to translate.</param>
        public abstract void Translate(IPrimitiveExpression<decimal> expression);

        /// <summary>
        /// Translates a null primitive expression.
        /// </summary>
        public abstract void TranslateNull();

        #endregion

        #region IStatementVisitor Members

        void TranslateStatementSet(IEnumerable<IStatement> statementSet)
        {
            foreach (var statement in statementSet)
                statement.Visit(this);
        }

        public abstract void Translate(IBlockStatement statement);

        public abstract void Translate(IBreakStatement statement);

        public abstract void Translate(ICallMethodStatement statement);

        public abstract void Translate(IConditionBlockStatement statement);

        public abstract void Translate(IWhileStatement statement);

        public abstract void Translate(ICallFusionStatement statement);

        public abstract void Translate(IConditionContinuationStatement statement);

        public abstract void Translate(IEnumerateSetBreakableBlockStatement statement);

        public abstract void Translate(IExplicitlyTypedLocalVariableDeclarationStatement statement);

        public abstract void Translate(IExpressionStatement statement);

        public abstract void Translate(IGoToStatement statement);

        public abstract void Translate(IJumpTarget statement);

        /// <summary>
        /// Translates the iteration block <paramref name="statement"/> provided.
        /// </summary>
        /// <param name="statement">The <see cref="IIterationBlockStatement"/> to translate.</param>
        public abstract void Translate(IIterationBlockStatement statement);

        /// <summary>
        /// Translates the iteration block <paramref name="statement"/> provided.
        /// </summary>
        /// <param name="statement">The <see cref="IIterationDeclarationBlockStatement"/> to translate.</param>
        public abstract void Translate(IIterationDeclarationBlockStatement statement);

        /// <summary>
        /// Translates the jump <paramref name="statement"/> provided.
        /// </summary>
        /// <param name="statement">The <see cref="IJumpStatement"/> to translate.</param>
        public abstract void Translate(IJumpStatement statement);
        /// <summary>
        /// Translates the jump <paramref name="statement"/> provided.
        /// </summary>
        /// <param name="statement">The <see cref="IGoToCaseStatement"/> to translate.</param>
        public abstract void Translate(IGoToCaseStatement statement);

        /// <summary>
        /// Translates the label <paramref name="statement"/> provided.
        /// </summary>
        /// <param name="statement">The <see cref="ILabelStatement"/> to translate.</param>
        public abstract void Translate(ILabelStatement statement);

        /// <summary>
        /// Translates the return <paramref name="statement"/> provided.
        /// </summary>
        /// <param name="statement">The <see cref="IReturnStatement"/> to translate.</param>
        public abstract void Translate(IReturnStatement statement);

        /// <summary>
        /// Translates the simple iteration <paramref name="statement"/> provided.
        /// </summary>
        /// <param name="statement">The <see cref="ISimpleIterationBlockStatement"/> to translate.</param>
        public abstract void Translate(ISimpleIterationBlockStatement statement);

        /// <summary>
        /// Translates the switch case block <paramref name="statement"/> provided.
        /// </summary>
        /// <param name="statement">The <see cref="ISwitchCaseBlockStatement"/> to translate.</param>
        public abstract void Translate(ISwitchCaseBlockStatement statement);

        /// <summary>
        /// Translates the switch <paramref name="statement"/> provided.
        /// </summary>
        /// <param name="statement">The <see cref="ISwitchStatement"/> to translate.</param>
        public abstract void Translate(ISwitchStatement statement);

        /// <summary>
        /// Translates the try <paramref name="statement"/> provided.
        /// </summary>
        /// <param name="statement">The <see cref="ITryStatement"/> to translate.</param>
        public abstract void Translate(ITryStatement statement);

        /// <summary>
        /// Translates the <paramref name="statement"/> provided.
        /// </summary>
        /// <param name="statement">The <see cref="ILocalDeclarationsStatement"/> to translate.</param>
        public abstract void Translate(ILocalDeclarationsStatement statement);

        /// <summary>
        /// Translates the change event handler <paramref name="statement"/> provided.
        /// </summary>
        /// <param name="statement">The <see cref="IChangeEventHandlerStatement"/> 
        /// to translate.</param>
        public abstract void Translate(IChangeEventHandlerStatement statement);

        /// <summary>
        /// Translates the bound change event handler <paramref name="statement"/>
        /// provided.
        /// </summary>
        /// <typeparam name="TEvent">The type of event as it exists in the
        /// abstract type system.</typeparam>
        /// <typeparam name="TEventParameter">The type of parameter
        /// contained within the events.</typeparam>
        /// <typeparam name="TEventParent">The type which owns the properties
        /// in the abstract type system.</typeparam>
        /// <typeparam name="TSignatureParameter">The type of parameter used in the <typeparamref name="TSignature"/>.</typeparam>
        /// <typeparam name="TSignature">The type of signature used as a parent of <typeparamref name="TSignatureParameter"/> instances.</typeparam>
        /// <typeparam name="TSignatureParent">The parent that contains the <typeparamref name="TSignature"/> 
        /// instances.</typeparam>
        /// <param name="statement">The <see cref="IBoundChangeEventSignatureHandlerStatement{TEvent, TEventParameter, TEventParent, TSignatureParameter, TSignature, TSignatureParent}"/> to translate.</param>
        public abstract void Translate<TEvent, TEventParameter, TEventParent, TSignatureParameter, TSignature, TSignatureParent>(IBoundChangeEventSignatureHandlerStatement<TEvent, TEventParameter, TEventParent, TSignatureParameter, TSignature, TSignatureParent> statement)
            where TEvent :
                IEventSignatureMember<TEvent, TEventParameter, TEventParent>
            where TEventParent :
                IEventSignatureParent<TEvent, TEventParameter, TEventParent>
            where TEventParameter :
                IEventSignatureParameterMember<TEvent, TEventParameter, TEventParent>
            where TSignatureParameter :
                IMethodSignatureParameterMember<TSignatureParameter, TSignature, TSignatureParent>
            where TSignature :
                IMethodSignatureMember<TSignatureParameter, TSignature, TSignatureParent>
            where TSignatureParent :
                ISignatureParent<IGeneralGenericSignatureMemberUniqueIdentifier, TSignature, TSignatureParameter, TSignatureParent>;

        /// <summary>
        /// Visits the comment <paramref name="statement"/> provided.
        /// </summary>
        /// <param name="statement">The <see cref="ICommentStatement"/>
        /// to visit.</param>
        public abstract void Translate(ICommentStatement statement);
        #endregion

        #region IIntermediateDeclarationVisitor Members

        public abstract void Translate(IIntermediateAssembly assembly);

        public abstract void Translate(IIntermediateNamespaceDeclaration @namespace);

        #endregion

        #region IIntermediateTypeVisitor Members

        public abstract void Translate(IIntermediateClassType @class);

        public abstract void Translate(IIntermediateDelegateType @delegate);

        public abstract void Translate(IIntermediateEnumType @enum);

        public abstract void Translate(IIntermediateInterfaceType @interface);

        public abstract void Translate(IIntermediateStructType @struct);

        public abstract void Translate<TGenericParameter, TIntermediateGenericParameter, TParent, TIntermediateParent>(IIntermediateGenericParameter<TGenericParameter, TIntermediateGenericParameter, TParent, TIntermediateParent> parameter)
            where TGenericParameter :
                IGenericParameter<TGenericParameter, TParent>
            where TIntermediateGenericParameter :
                TGenericParameter,
                IIntermediateGenericParameter<TGenericParameter, TIntermediateGenericParameter, TParent, TIntermediateParent>
            where TParent :
                IGenericParamParent<TGenericParameter, TParent>
            where TIntermediateParent :
                TParent,
                IIntermediateGenericParameterParent<TGenericParameter, TIntermediateGenericParameter, TParent, TIntermediateParent>;

        #endregion

        #region IIntermediateMemberVisitor Members

        public abstract void Translate(ILocalMember local);

        public abstract void Translate<TCtor, TIntermediateCtor, TType, TIntermediateType>(IIntermediateConstructorSignatureMember<TCtor, TIntermediateCtor, TType, TIntermediateType> ctor)
            where TCtor :
                IConstructorMember<TCtor, TType>
            where TIntermediateCtor :
                TCtor,
                IIntermediateConstructorSignatureMember<TCtor, TIntermediateCtor, TType, TIntermediateType>
            where TType :
                ICreatableParent<TCtor, TType>
            where TIntermediateType :
                TType,
                IIntermediateCreatableSignatureParent<TCtor, TIntermediateCtor, TType, TIntermediateType>;

        public abstract void Translate<TCtor, TIntermediateCtor, TType, TIntermediateType>(IIntermediateConstructorMember<TCtor, TIntermediateCtor, TType, TIntermediateType> ctor)
            where TCtor :
                IConstructorMember<TCtor, TType>
            where TIntermediateCtor :
                TCtor,
                IIntermediateConstructorMember<TCtor, TIntermediateCtor, TType, TIntermediateType>
            where TType :
                ICreatableParent<TCtor, TType>
            where TIntermediateType :
                TType,
                IIntermediateCreatableParent<TCtor, TIntermediateCtor, TType, TIntermediateType>;

        public abstract void Translate<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent>(IIntermediateEventMember<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent> @event)
            where TEvent :
                IEventMember<TEvent, TEventParent>
            where TIntermediateEvent :
                TEvent,
                IIntermediateEventMember<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent>
            where TEventParent :
                IEventParent<TEvent, TEventParent>
            where TIntermediateEventParent :
                TEventParent,
                IIntermediateEventParent<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent>;

        public abstract void Translate<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent>(IIntermediateEventSignatureMember<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent> @event)
            where TEvent :
                IEventSignatureMember<TEvent, TEventParent>
            where TIntermediateEvent :
                TEvent,
                IIntermediateEventSignatureMember<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent>
            where TEventParent :
                IEventSignatureParent<TEvent, TEventParent>
            where TIntermediateEventParent :
                TEventParent,
                IIntermediateEventSignatureParent<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent>;

        public abstract void Translate<TCoercionParent, TIntermediateCoercionParent>(IIntermediateBinaryOperatorCoercionMember<TCoercionParent, TIntermediateCoercionParent> binaryCoercion)
            where TCoercionParent :
                ICoercibleType<IBinaryOperatorUniqueIdentifier, IBinaryOperatorCoercionMember<TCoercionParent>, TCoercionParent>
            where TIntermediateCoercionParent :
                IIntermediateCoercibleType<IBinaryOperatorUniqueIdentifier, IBinaryOperatorCoercionMember<TCoercionParent>, IIntermediateBinaryOperatorCoercionMember<TCoercionParent, TIntermediateCoercionParent>, TCoercionParent, TIntermediateCoercionParent>,
                TCoercionParent;

        public abstract void Translate<TCoercionParent, TIntermediateCoercionParent>(IIntermediateTypeCoercionMember<TCoercionParent, TIntermediateCoercionParent> typeCoercion)
            where TCoercionParent :
                ICoercibleType<ITypeCoercionUniqueIdentifier, ITypeCoercionMember<TCoercionParent>, TCoercionParent>
            where TIntermediateCoercionParent :
                IIntermediateCoercibleType<ITypeCoercionUniqueIdentifier, ITypeCoercionMember<TCoercionParent>, IIntermediateTypeCoercionMember<TCoercionParent, TIntermediateCoercionParent>, TCoercionParent, TIntermediateCoercionParent>,
                TCoercionParent;

        public abstract void Translate<TCoercionParent, TIntermediateCoercionParent>(IIntermediateUnaryOperatorCoercionMember<TCoercionParent, TIntermediateCoercionParent> unaryCoercion)
            where TCoercionParent :
                ICoercibleType<IUnaryOperatorUniqueIdentifier, IUnaryOperatorCoercionMember<TCoercionParent>, TCoercionParent>
            where TIntermediateCoercionParent :
                IIntermediateCoercibleType<IUnaryOperatorUniqueIdentifier, IUnaryOperatorCoercionMember<TCoercionParent>, IIntermediateUnaryOperatorCoercionMember<TCoercionParent, TIntermediateCoercionParent>, TCoercionParent, TIntermediateCoercionParent>,
                TCoercionParent;

        public abstract void Translate<TField, TIntermediateField, TFieldParent, TIntermediateFieldParent>(IIntermediateFieldMember<TField, TIntermediateField, TFieldParent, TIntermediateFieldParent> field)
            where TField :
                IFieldMember<TField, TFieldParent>
            where TIntermediateField :
                TField,
                IIntermediateFieldMember<TField, TIntermediateField, TFieldParent, TIntermediateFieldParent>
            where TFieldParent :
                IFieldParent<TField, TFieldParent>
            where TIntermediateFieldParent :
                TFieldParent,
                IIntermediateFieldParent<TField, TIntermediateField, TFieldParent, TIntermediateFieldParent>;

        public abstract void Translate(IIntermediateEnumFieldMember field);

        public abstract void Translate<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent>(IIntermediateIndexerMember<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent> indexer)
            where TIndexer :
                IIndexerMember<TIndexer, TIndexerParent>
            where TIntermediateIndexer :
                TIndexer,
                IIntermediateIndexerMember<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent>
            where TIndexerParent :
                IIndexerParent<TIndexer, TIndexerParent>
            where TIntermediateIndexerParent :
                TIndexerParent,
                IIntermediateIndexerParent<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent>;

        public abstract void Translate<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent>(IIntermediateIndexerSignatureMember<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent> indexerSignature)
            where TIndexer :
                IIndexerSignatureMember<TIndexer, TIndexerParent>
            where TIntermediateIndexer :
                TIndexer,
                IIntermediateIndexerSignatureMember<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent>
            where TIndexerParent :
                IIndexerSignatureParent<TIndexer, TIndexerParent>
            where TIntermediateIndexerParent :
                TIndexerParent,
                IIntermediateIndexerSignatureParent<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent>;

        public abstract void Translate<TMethod, TIntermediateMethod, TMethodParent, TIntermediateMethodParent>(IIntermediateMethodMember<TMethod, TIntermediateMethod, TMethodParent, TIntermediateMethodParent> method)
            where TMethod :
                IMethodMember<TMethod, TMethodParent>
            where TIntermediateMethod :
                IIntermediateMethodMember<TMethod, TIntermediateMethod, TMethodParent, TIntermediateMethodParent>,
                TMethod
            where TMethodParent :
                IMethodParent<TMethod, TMethodParent>
            where TIntermediateMethodParent :
                IIntermediateMethodParent<TMethod, TIntermediateMethod, TMethodParent, TIntermediateMethodParent>,
                TMethodParent;

        public abstract void Translate<TSignature, TIntermediateSignature, TParent, TIntermediateParent>(IIntermediateMethodSignatureMember<TSignature, TIntermediateSignature, TParent, TIntermediateParent> methodSignature)
            where TSignature :
                IMethodSignatureMember<TSignature, TParent>
            where TIntermediateSignature :
                TSignature,
                IIntermediateMethodSignatureMember<TSignature, TIntermediateSignature, TParent, TIntermediateParent>
            where TParent :
                IMethodSignatureParent<TSignature, TParent>
            where TIntermediateParent :
                TParent,
                IIntermediateMethodSignatureParent<TSignature, TIntermediateSignature, TParent, TIntermediateParent>;

        public abstract void Translate<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent>(IIntermediatePropertySignatureMember<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent> propertySignature)
            where TProperty :
                IPropertySignatureMember<TProperty, TPropertyParent>
            where TIntermediateProperty :
                TProperty,
                IIntermediatePropertySignatureMember<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent>
            where TPropertyParent :
                IPropertySignatureParent<TProperty, TPropertyParent>
            where TIntermediatePropertyParent :
                TPropertyParent,
                IIntermediatePropertySignatureParent<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent>;

        public abstract void Translate<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent>(IIntermediatePropertyMember<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent> property)
            where TProperty :
                IPropertyMember<TProperty, TPropertyParent>
            where TIntermediateProperty :
                TProperty,
                IIntermediatePropertyMember<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent>
            where TPropertyParent :
                IPropertyParent<TProperty, TPropertyParent>
            where TIntermediatePropertyParent :
                TPropertyParent,
                IIntermediatePropertyParent<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent>;

        public abstract void Translate<TParent, TIntermediateParent>(IIntermediateParameterMember<TParent, TIntermediateParent> parameter)
            where TParent :
                IParameterParent
            where TIntermediateParent :
                TParent,
                IIntermediateParameterParent;

        public abstract void Translate(ILinqRangeVariable rangeVariable);

        public abstract void Translate(ILinqTypedRangeVariable rangeVariable);

        #endregion

        #region IIntermediateInclusionVisitor Members

        public abstract void Translate(INamedInclusionScopeCoercion namedInclusion);

        public abstract void Translate(INamedInclusionRenameScopeCoercion renamedInclusion);

        public abstract void Translate(INamespaceInclusionScopeCoercion namespaceInclusion);

        public abstract void Translate(INamespaceInclusionRenameScopeCoercion renamedNamespaceInclusion);

        public abstract void Translate(ITypeInclusionScopeCoercion typeInclusion);

        public abstract void Translate(ITypeInclusionRenameScopeCoercion renamedTypeInclusion);

        public abstract void Translate(IStaticInclusionScopeCoercion staticInclusion);

        #endregion

        /// <summary>
        /// Increases the <see cref="Target"/> indent level.
        /// </summary>
        protected void IncreaseIndent()
        {
            if (this.Formatter.HandlesWrite)
                this.Formatter.Indent();
            else
                this.Target.Indent++;
        }

        /// <summary>
        /// Decreases the <see cref="Target"/> indent level.
        /// </summary>
        protected void DecreaseIndent()
        {
            if (this.Formatter.HandlesWrite)
                this.Formatter.Dedent();
            else
                this.Target.Indent--;
        }

        public IndentedTextWriter Target
        {
            get
            {
                return this.target;
            }
            set
            {
                this.target = value;
            }
        }

        protected void TranslateFieldParent<TField, TIntermediateField, TFieldParent, TIntermediateFieldParent>(TIntermediateFieldParent parent)
            where TField :
                IFieldMember<TField, TFieldParent>
            where TIntermediateField :
                TField,
                IIntermediateFieldMember<TField, TIntermediateField, TFieldParent, TIntermediateFieldParent>
            where TFieldParent :
                IFieldParent<TField, TFieldParent>
            where TIntermediateFieldParent :
                TFieldParent,
                IIntermediateFieldParent<TField, TIntermediateField, TFieldParent, TIntermediateFieldParent>
        {
            foreach (var item in parent.Fields.Values)
                item.Visit(this);
        }

        protected void TranslateMethodSignatures<TSignatureParameter, TIntermediateSignatureParameter, TSignature, TIntermediateSignature, TParent, TIntermediateParent>(IIntermediateMethodSignatureMemberDictionary<TSignatureParameter, TIntermediateSignatureParameter, TSignature, TIntermediateSignature, TParent, TIntermediateParent> signatures)
            where TSignatureParameter :
                IMethodSignatureParameterMember<TSignatureParameter, TSignature, TParent>
            where TIntermediateSignatureParameter :
                IIntermediateMethodSignatureParameterMember<TSignatureParameter, TIntermediateSignatureParameter, TSignature, TIntermediateSignature, TParent, TIntermediateParent>,
                TSignatureParameter
            where TSignature :
                IMethodSignatureMember<TSignatureParameter, TSignature, TParent>
            where TIntermediateSignature :
                IIntermediateMethodSignatureMember<TSignatureParameter, TIntermediateSignatureParameter, TSignature, TIntermediateSignature, TParent, TIntermediateParent>,
                TSignature
            where TParent :
                ISignatureParent<IGeneralGenericSignatureMemberUniqueIdentifier, TSignature, TSignatureParameter, TParent>
            where TIntermediateParent :
                IIntermediateSignatureParent<IGeneralGenericSignatureMemberUniqueIdentifier, TSignature, TIntermediateSignature, TSignatureParameter, TIntermediateSignatureParameter, TParent, TIntermediateParent>,
                TParent
        {
            foreach (var method in signatures.Values)
                method.Visit(this);
        }

        protected void TranslateTypes<TTypeIdentifier, TType, TIntermediateType>(IIntermediateTypeDictionary<TTypeIdentifier, TType, TIntermediateType> target)
            where TTypeIdentifier :
                ITypeUniqueIdentifier
            where TType :
                IType<TTypeIdentifier, TType>
            where TIntermediateType :
                IIntermediateType,
                TType
        {
            foreach (var type in target.Values)
                type.Visit(this);
        }

        protected void TranslateTypeParent(IIntermediateTypeParent parent)
        {
            this.TranslateTypes(parent.Classes);
            this.TranslateTypes(parent.Delegates);
            this.TranslateTypes(parent.Enums);
            this.TranslateTypes(parent.Interfaces);
            this.TranslateTypes(parent.Structs);
        }

        protected void TranslateNamespaceParent(IIntermediateNamespaceParent parent)
        {
            this.TranslateFieldParent<ITopLevelFieldMember, IIntermediateTopLevelFieldMember, INamespaceParent, IIntermediateNamespaceParent>(parent);
            this.TranslateMethodSignatures(parent.Methods);
            this.TranslateTypeParent(parent);
        }

        #region IExpressionVisitor Members

        void IExpressionVisitor.Visit<TLeft, TRight>(IBinaryOperationExpression<TLeft, TRight> expression)
        {
            if (expression == null)
                throw new ArgumentNullException("expression");
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IIndexerReferenceExpression expression)
        {
            if (expression == null)
                throw new ArgumentNullException("expression");
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IConditionalExpression expression)
        {
            if (expression == null)
                throw new ArgumentNullException("expression");
            if (expression.Type == ExpressionKind.ConditionalForwardTerm)
            {
                if (expression.CheckPart != null)
                    expression.CheckPart.Visit(this);
            }
            else
                this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IUnaryOperationExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ITypeCastExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ITypeOfExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ITypeReferenceExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IVariadicTypeCastExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ISymbolExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IStaticGetMemberHandleExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ISpecialReferenceExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IPropertyReferenceExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IParenthesizedExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(INamedParameterExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IMethodPointerReferenceExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IMethodInvokeExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ILocalReferenceExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IFieldReferenceExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IExpressionToCommaTypeReferenceFusionExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IExpressionToCommaFusionExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IExpressionFusionExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IEventInvokeExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IDirectionExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IDelegateReferenceExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IDelegateMethodPointerReferenceExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IDelegateInvokeExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IDelegateHolderReferenceExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ICreateInstanceUnboundMemberAssignment expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit<TProperty, TPropertyParent>(ICreateInstancePropertyAssignment<TProperty, TPropertyParent> expression)
        {
            this.Translate<TProperty, TPropertyParent>(expression);
        }

        void IExpressionVisitor.Visit<TField, TFieldParent>(ICreateInstanceFieldAssignment<TField, TFieldParent> expression)
        {
            this.Translate<TField, TFieldParent>(expression);
        }

        void IExpressionVisitor.Visit(ICreateInstanceExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ICreateArrayExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ICreateArrayNestedDetailExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ICreateArrayDetailExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ICommaExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IAnonymousMethodWithParametersExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IAnonymousMethodExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ILambdaTypedStatementExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ILambdaTypeInferredStatementExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ILambdaTypedSimpleExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ILambdaTypeInferredSimpleExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IParameterReferenceExpression expression)
        {
            this.Translate(expression);
        }


        void IExpressionVisitor.Visit<TParameterParent, TIntermediateParameterParent, TParameter, TIntermediateParameter>(IParameterReferenceExpression<TParameterParent, TIntermediateParameterParent, TParameter, TIntermediateParameter> expression)
        {
            this.Translate(expression);
        }


        void IExpressionVisitor.Visit(IConstructorInvokeExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IConstructorPointerReferenceExpression ctorPointerReference)
        {
            this.Translate(ctorPointerReference);
        }

        void IExpressionVisitor.Visit(ILinqExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IAssignmentExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(ILinqRangeVariableReference expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IEventReferenceExpression expression)
        {
            this.Translate(expression);
        }
        /// <summary>
        /// Visits the <paramref name="expression"/> provided.
        /// </summary>
        /// <param name="expression">The <see cref="IEventReferenceExpression{TEvent, TEventParameter, TEventParent}"/> 
        /// to visit.</param>
        void IExpressionVisitor.Visit<TEvent, TEventParameter, TEventParent>(IEventReferenceExpression<TEvent, TEventParameter, TEventParent> expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit<TProperty, TPropertyParent>(IPropertyReferenceExpression<TProperty, TPropertyParent> expression)
        {
            this.Translate<TProperty, TPropertyParent>(expression);
        }

        void IExpressionVisitor.Visit<TPropertySignature, TPropertySignatureParent>(IPropertySignatureReferenceExpression<TPropertySignature, TPropertySignatureParent> expression)
        {
            this.Translate<TPropertySignature, TPropertySignatureParent>(expression);
        }

        void IExpressionVisitor.Visit<TField, TFieldParent>(IFieldReferenceExpression<TField, TFieldParent> expression)
        {
            this.Translate<TField, TFieldParent>(expression);
        }

        void IExpressionVisitor.Visit(ICommentExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IDecoratingExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(INewLineExpression expression)
        {
            this.Translate(expression);
        }

        void IExpressionVisitor.Visit(IMetadatumDefinitionExpressionParameter expression)
        {
            this.Translate(expression);
        }

        #endregion

        #region ILinqVisitor Members

        void ILinqVisitor.Visit(ILinqSelectBody expression)
        {
            this.Translate(expression);
        }

        void ILinqVisitor.Visit(ILinqGroupBody expression)
        {
            this.Translate(expression);
        }

        void ILinqVisitor.Visit(ILinqFusionSelectBody expression)
        {
            this.Translate(expression);
        }

        void ILinqVisitor.Visit(ILinqFusionGroupBody expression)
        {
            this.Translate(expression);
        }

        void ILinqVisitor.Visit(ILinqFromClause linqClause)
        {
            this.Translate(linqClause);
        }

        void ILinqVisitor.Visit(ILinqJoinClause linqClause)
        {
            this.Translate(linqClause);
        }

        void ILinqVisitor.Visit(ILinqLetClause linqClause)
        {
            this.Translate(linqClause);
        }

        void ILinqVisitor.Visit(ILinqOrderByClause linqClause)
        {
            this.Translate(linqClause);
        }

        void ILinqVisitor.Visit(ILinqTypedFromClause linqClause)
        {
            this.Translate(linqClause);
        }

        void ILinqVisitor.Visit(ILinqTypedJoinClause linqClause)
        {
            this.Translate(linqClause);
        }

        void ILinqVisitor.Visit(ILinqWhereClause linqClause)
        {
            this.Translate(linqClause);
        }

        #endregion

        #region IPrimitiveVisitor Members

        void IPrimitiveVisitor.Visit(IPrimitiveExpression<bool> expression)
        {
            this.Translate(expression);
        }

        void IPrimitiveVisitor.Visit(IPrimitiveExpression<char> expression)
        {
            this.Translate(expression);
        }

        void IPrimitiveVisitor.Visit(IPrimitiveExpression<string> expression)
        {
            this.Translate(expression);
        }

        void IPrimitiveVisitor.Visit(IPrimitiveExpression<byte> expression)
        {
            this.Translate(expression);
        }

        void IPrimitiveVisitor.Visit(IPrimitiveExpression<sbyte> expression)
        {
            this.Translate(expression);
        }

        void IPrimitiveVisitor.Visit(IPrimitiveExpression<ushort> expression)
        {
            this.Translate(expression);
        }

        void IPrimitiveVisitor.Visit(IPrimitiveExpression<short> expression)
        {
            this.Translate(expression);
        }

        void IPrimitiveVisitor.Visit(IPrimitiveExpression<uint> expression)
        {
            this.Translate(expression);
        }

        void IPrimitiveVisitor.Visit(IPrimitiveExpression<int> expression)
        {
            this.Translate(expression);
        }

        void IPrimitiveVisitor.Visit(IPrimitiveExpression<ulong> expression)
        {
            this.Translate(expression);
        }

        void IPrimitiveVisitor.Visit(IPrimitiveExpression<long> expression)
        {
            this.Translate(expression);
        }

        void IPrimitiveVisitor.Visit(IPrimitiveExpression<float> expression)
        {
            this.Translate(expression);
        }

        void IPrimitiveVisitor.Visit(IPrimitiveExpression<double> expression)
        {
            this.Translate(expression);
        }

        void IPrimitiveVisitor.Visit(IPrimitiveExpression<decimal> expression)
        {
            this.Translate(expression);
        }

        void IPrimitiveVisitor.VisitNull()
        {
            this.TranslateNull();
        }

        #endregion

        #region IStatementVisitor Members

        void IStatementVisitor.Visit(IBlockStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IBreakStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(ICallMethodStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IConditionBlockStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(ICallFusionStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IConditionContinuationStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IEnumerateSetBreakableBlockStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IExplicitlyTypedLocalVariableDeclarationStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IExpressionStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IGoToStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IJumpTarget statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IIterationBlockStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IIterationDeclarationBlockStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IJumpStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(ILabelStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IReturnStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(ISimpleIterationBlockStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(ISwitchCaseBlockStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(ISwitchStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(ITryStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(ILocalDeclarationsStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IChangeEventHandlerStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit<TEvent, TEventParameter, TEventParent, TSignatureParameter, TSignature, TSignatureParent>(IBoundChangeEventSignatureHandlerStatement<TEvent, TEventParameter, TEventParent, TSignatureParameter, TSignature, TSignatureParent> statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(ICommentStatement statement)
        {
            this.Translate(statement);
        }

        #endregion

        #region IIntermediateDeclarationVisitor Members

        void IIntermediateDeclarationVisitor.Visit(IIntermediateAssembly assembly)
        {
            this.Translate(assembly);
        }

        void IIntermediateDeclarationVisitor.Visit(IIntermediateNamespaceDeclaration @namespace)
        {
            this.Translate(@namespace);
        }

        #endregion

        #region IIntermediateTypeVisitor Members

        void IIntermediateTypeVisitor.Visit(IIntermediateClassType @class)
        {
            this.Translate(@class);
        }

        void IIntermediateTypeVisitor.Visit(IIntermediateDelegateType @delegate)
        {
            this.Translate(@delegate);
        }

        void IIntermediateTypeVisitor.Visit(IIntermediateEnumType @enum)
        {
            this.Translate(@enum);
        }

        void IIntermediateTypeVisitor.Visit(IIntermediateInterfaceType @interface)
        {
            this.Translate(@interface);
        }

        void IIntermediateTypeVisitor.Visit(IIntermediateStructType @struct)
        {
            this.Translate(@struct);
        }

        void IIntermediateTypeVisitor.Visit<TGenericParameter, TIntermediateGenericParameter, TParent, TIntermediateParent>(IIntermediateGenericParameter<TGenericParameter, TIntermediateGenericParameter, TParent, TIntermediateParent> parameter)
        {
            this.Translate(parameter);
        }

        #endregion

        #region IIntermediateMemberVisitor Members

        void IIntermediateMemberVisitor.Visit(ILocalMember local)
        {
            this.Translate(local);
        }

        void IIntermediateMemberVisitor.Visit<TCtor, TIntermediateCtor, TType, TIntermediateType>(IIntermediateConstructorSignatureMember<TCtor, TIntermediateCtor, TType, TIntermediateType> ctor)
        {
            this.Translate(ctor);
        }

        void IIntermediateMemberVisitor.Visit<TCtor, TIntermediateCtor, TType, TIntermediateType>(IIntermediateConstructorMember<TCtor, TIntermediateCtor, TType, TIntermediateType> ctor)
        {
            this.Translate(ctor);
        }

        void IIntermediateMemberVisitor.Visit<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent>(IIntermediateEventMember<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent> @event)
        {
            this.Translate(@event);
        }

        void IIntermediateMemberVisitor.Visit<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent>(IIntermediateEventSignatureMember<TEvent, TIntermediateEvent, TEventParent, TIntermediateEventParent> @event)
        {
            this.Translate(@event);
        }

        void IIntermediateMemberVisitor.Visit<TCoercionParent, TIntermediateCoercionParent>(IIntermediateBinaryOperatorCoercionMember<TCoercionParent, TIntermediateCoercionParent> binaryCoercion)
        {
            this.Translate(binaryCoercion);
        }

        void IIntermediateMemberVisitor.Visit<TCoercionParent, TIntermediateCoercionParent>(IIntermediateTypeCoercionMember<TCoercionParent, TIntermediateCoercionParent> typeCoercion)
        {
            this.Translate(typeCoercion);
        }

        void IIntermediateMemberVisitor.Visit<TCoercionParent, TIntermediateCoercionParent>(IIntermediateUnaryOperatorCoercionMember<TCoercionParent, TIntermediateCoercionParent> unaryCoercion)
        {
            this.Translate(unaryCoercion);
        }

        void IIntermediateMemberVisitor.Visit<TField, TIntermediateField, TFieldParent, TIntermediateFieldParent>(IIntermediateFieldMember<TField, TIntermediateField, TFieldParent, TIntermediateFieldParent> field)
        {
            this.Translate(field);
        }

        void IIntermediateMemberVisitor.Visit(IIntermediateEnumFieldMember field)
        {
            this.Translate(field);
        }

        void IIntermediateMemberVisitor.Visit<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent>(IIntermediateIndexerMember<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent> indexer)
        {
            this.Translate(indexer);
        }

        void IIntermediateMemberVisitor.Visit<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent>(IIntermediateIndexerSignatureMember<TIndexer, TIntermediateIndexer, TIndexerParent, TIntermediateIndexerParent> indexerSignature)
        {
            this.Translate(indexerSignature);
        }

        void IIntermediateMemberVisitor.Visit<TMethod, TIntermediateMethod, TMethodParent, TIntermediateMethodParent>(IIntermediateMethodMember<TMethod, TIntermediateMethod, TMethodParent, TIntermediateMethodParent> method)
        {
            this.Translate(method);
        }

        void IIntermediateMemberVisitor.Visit<TSignature, TIntermediateSignature, TParent, TIntermediateParent>(IIntermediateMethodSignatureMember<TSignature, TIntermediateSignature, TParent, TIntermediateParent> methodSignature)
        {
            this.Translate(methodSignature);
        }

        void IIntermediateMemberVisitor.Visit<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent>(IIntermediatePropertySignatureMember<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent> propertySignature)
        {
            this.Translate(propertySignature);
        }

        void IIntermediateMemberVisitor.Visit<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent>(IIntermediatePropertyMember<TProperty, TIntermediateProperty, TPropertyParent, TIntermediatePropertyParent> property)
        {
            this.Translate(property);
        }

        void IIntermediateMemberVisitor.Visit<TParent, TIntermediateParent>(IIntermediateParameterMember<TParent, TIntermediateParent> parameter)
        {
            this.Translate(parameter);
        }

        void IIntermediateMemberVisitor.Visit(ILinqRangeVariable rangeVariable)
        {
            this.Translate(rangeVariable);
        }

        void IIntermediateMemberVisitor.Visit(ILinqTypedRangeVariable rangeVariable)
        {
            this.Translate(rangeVariable);
        }

        #endregion

        #region IIntermediateInclusionVisitor Members

        void IIntermediateInclusionVisitor.Visit(INamedInclusionScopeCoercion namedInclusion)
        {
            this.Translate(namedInclusion);
        }

        void IIntermediateInclusionVisitor.Visit(INamedInclusionRenameScopeCoercion renamedInclusion)
        {
            this.Translate(renamedInclusion);
        }

        void IIntermediateInclusionVisitor.Visit(INamespaceInclusionScopeCoercion namespaceInclusion)
        {
            this.Translate(namespaceInclusion);
        }

        void IIntermediateInclusionVisitor.Visit(INamespaceInclusionRenameScopeCoercion renamedNamespaceInclusion)
        {
            this.Translate(renamedNamespaceInclusion);
        }

        void IIntermediateInclusionVisitor.Visit(ITypeInclusionScopeCoercion typeInclusion)
        {
            this.Translate(typeInclusion);
        }

        void IIntermediateInclusionVisitor.Visit(ITypeInclusionRenameScopeCoercion renamedTypeInclusion)
        {
            this.Translate(renamedTypeInclusion);
        }

        void IIntermediateInclusionVisitor.Visit(IStaticInclusionScopeCoercion staticInclusion)
        {
            this.Translate(staticInclusion);
        }

        #endregion

        protected void WriteKeyword(string keyword)
        {
            this.Write(IntermediateSpanTranslationClasses.Keyword, keyword);
        }

        protected void WriteOperator(string op)
        {
            this.Write(IntermediateSpanTranslationClasses.Operator, op);
        }

        public virtual void Write(IntermediateSpanTranslationClasses spanClass, string text)
        {
            WriteSpanCheck(spanClass);
            this.Write(text);
        }

        internal void WriteSpanCheck(IntermediateSpanTranslationClasses spanClass)
        {
            if (this.CurrentSpanClass != spanClass)
                ChangeSpanClasses(spanClass);
        }

        private void ChangeSpanClasses(IntermediateSpanTranslationClasses spanClass)
        {
            if (this.Formatter != null)
            {
                if (CurrentSpanClass != IntermediateSpanTranslationClasses.None)
                    this.Formatter.EndSpan();
                this.Formatter.BeginSpan(spanClass);
            }
            else
                this.CurrentSpanClass = spanClass;
        }

        #region IIntermediateCodeTranslator Members

        public void Write(string text)
        {
            if (this.Formatter.HandlesWrite)
                this.Formatter.HandleWrite(text);
            else
                this.target.Write(text);
        }

        public void WriteLine()
        {
            if (this.Formatter.HandlesWrite)
                this.Formatter.HandleWriteLine();
            else
                this.target.WriteLine();
        }


        public IIntermediateCodeTranslatorFormatter Formatter
        {
            get
            {
                if (this.formatter == null)
                    this.formatter = this.Options.FormatProvider.GetFormatterFor(this);
                return this.formatter;
            }
        }

        #endregion

        public virtual void Translate(IMemberParentReferenceExpression expression)
        {
            expression.Visit(this);
        }

        public abstract void Translate<T>(IExpressionCollection<T> malleableExpressionCollection)
            where T :
                IExpression;

        public abstract void Translate(IControlledTypeCollection controlledTypeCollection);

        public abstract void Translate(ICommentExpression expression);

        public abstract void Translate(IDecoratingExpression expression);

        public abstract void Translate(INewLineExpression expression);

        internal static string GetCSharpCommentText(string commentBase, bool docComment, bool inline = false)
        {
            string result = "";
            if (docComment)
            {
                if (commentBase.Contains("\r\n"))
                {
                    StringBuilder sb = new StringBuilder();
                    string[] commentLines = commentBase.Split(new string[] { "\r\n" }, StringSplitOptions.None);
                    bool firstItem = true;
                    for (int i = 0; i < commentLines.Length; i++)
                    {
                        string s = commentLines[i];
                        if (firstItem)
                            firstItem = false;
                        else
                            sb.AppendLine();
                        sb.Append("/// ");
                        sb.Append(s);
                    }
                    result = sb.ToString();
                }
                else
                {
                    result = string.Format("/// {0}", commentBase);
                }
            }
            else if (commentBase.Contains("\r\n"))
                result = GetBoxedCommentText(commentBase);
            else if (!inline)
                result = string.Format("// {0}", commentBase);
            else
                result = string.Format("/* {0} */", commentBase);

            return result;
        }

        internal static string GetBoxedCommentText(string commentBase)
        {
            string[] commentLines = (from line in commentBase.Split(new string[] { "\r\n" }, StringSplitOptions.None)
                                     select string.Format(" |  {0}", line)).ToArray();

            int maximumLength = commentLines.Max(p => p.Length);
            StringBuilder sb = new StringBuilder();
            maximumLength += 4;
            sb.Append(" /* ");
            sb.Append('-', maximumLength - 6);
            sb.AppendLine("\\");
            foreach (string s in commentLines)
            {
                if (s == " |  -")
                {
                    sb.Append(" |");
                    sb.Append('-', maximumLength - 4);
                }
                else
                {
                    sb.Append(s);
                    sb.Append(' ', maximumLength - (s.Length + 2));
                }
                sb.AppendLine("|");
            }
            sb.Append(" \\");
            sb.Append('-', maximumLength - 6);
            sb.Append(" */");
            return sb.ToString();
        }

        protected void DenoteNewLine()
        {
            if (this.Formatter != null)
                this.Formatter.DenoteNewLine();
            else
                this.WriteLine();
        }

        protected abstract void Translate<TParent, TIntermediateParent, TParameter, TIntermediateParameter>(IIntermediateParameterMemberDictionary<TParent, TIntermediateParent, TParameter, TIntermediateParameter> parameters)
            where TParent :
                IParameterParent<TParent, TParameter>
            where TIntermediateParent :
                TParent,
                IIntermediateParameterParent<TParent, TIntermediateParent, TParameter, TIntermediateParameter>
            where TParameter :
                IParameterMember<TParent>
            where TIntermediateParameter :
                TParameter,
                IIntermediateParameterMember<TParent, TIntermediateParent>;

        protected virtual void Translate(IControlledCollection<IStatement> statementCollection)
        {
            foreach (var statement in statementCollection)
                statement.Visit(this);
        }


        #region IIntermediateCodeTranslator Members

        public void DefineDeclaration(IIntermediateClassType declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediateConstructorMember declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediateConstructorSignatureMember declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediateDelegateType declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediateEnumType declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediateEventMember declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediateEventSignatureMember declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediateFieldMember declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediateIndexerMember declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediateIndexerSignatureMember declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediateInterfaceType declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(ILambdaTypeInferredExpressionParameterMember declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }


        public void DefineDeclaration(ILinqRangeVariable declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(ILocalMember declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediateMethodMember declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediateMethodSignatureMember declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediateParameterMember declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediatePropertyMember declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediatePropertySignatureMember declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void DefineDeclaration(IIntermediateStructType declaration)
        {
            this.Formatter.DefineDeclaration(declaration);
        }

        public void EndDeclarationDefinition()
        {
            this.Formatter.EndDeclarationDefinition();
        }

        public void ReferenceDeclaration(IIntermediateClassType declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediateConstructorMember declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediateConstructorSignatureMember declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediateDelegateType declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediateEnumType declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediateEventMember declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediateEventSignatureMember declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediateFieldMember declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediateIndexerMember declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediateIndexerSignatureMember declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediateInterfaceType declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(ILambdaTypeInferredExpressionParameterMember declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(ILinqRangeVariable declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(ILocalMember declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediateMethodMember declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediateMethodSignatureMember declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediateParameterMember declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediatePropertyMember declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediatePropertySignatureMember declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIntermediateStructType declaration)
        {
            this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IClassType declaration)
        {
            if (declaration is IIntermediateClassType)
                this.ReferenceDeclaration((IIntermediateClassType)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IConstructorMember declaration)
        {
            if (declaration is IIntermediateConstructorMember)
                this.ReferenceDeclaration((IIntermediateConstructorMember)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IDelegateType declaration)
        {
            if (declaration is IIntermediateDelegateType)
                this.ReferenceDeclaration((IIntermediateDelegateType)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IEnumType declaration)
        {
            if (declaration is IIntermediateEnumType)
                this.ReferenceDeclaration((IIntermediateEnumType)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IEventMember declaration)
        {
            if (declaration is IIntermediateEventMember)
                this.ReferenceDeclaration((IIntermediateEventMember)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IEventSignatureMember declaration)
        {
            if (declaration is IIntermediateEventSignatureMember)
                this.ReferenceDeclaration((IIntermediateEventSignatureMember)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IFieldMember declaration)
        {
            if (declaration is IIntermediateFieldMember)
                this.ReferenceDeclaration((IIntermediateFieldMember)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIndexerMember declaration)
        {
            if (declaration is IIntermediateIndexerMember)
                this.ReferenceDeclaration((IIntermediateIndexerMember)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IIndexerSignatureMember declaration)
        {
            if (declaration is IIntermediateIndexerSignatureMember)
                this.ReferenceDeclaration((IIntermediateIndexerSignatureMember)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IInterfaceType declaration)
        {
            if (declaration is IIntermediateInterfaceType)
                this.ReferenceDeclaration((IIntermediateInterfaceType)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IMethodMember declaration)
        {
            if (declaration is IIntermediateMethodMember)
                this.ReferenceDeclaration((IIntermediateMethodMember)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IMethodSignatureMember declaration)
        {
            if (declaration is IIntermediateMethodMember)
                this.ReferenceDeclaration((IIntermediateMethodMember)declaration);
            else if (declaration is IIntermediateMethodSignatureMember)
                this.ReferenceDeclaration((IIntermediateMethodSignatureMember)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IParameterMember declaration)
        {
            if (declaration is IIntermediateParameterMember)
                this.ReferenceDeclaration((IIntermediateParameterMember)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IPropertyMember declaration)
        {
            if (declaration is IIntermediatePropertyMember)
                this.ReferenceDeclaration((IIntermediatePropertyMember)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IPropertySignatureMember declaration)
        {
            if (declaration is IIntermediatePropertySignatureMember)
                this.ReferenceDeclaration((IIntermediatePropertySignatureMember)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void ReferenceDeclaration(IStructType declaration)
        {
            if (declaration is IIntermediateStructType)
                this.ReferenceDeclaration((IIntermediateStructType)declaration);
            else
                this.Formatter.ReferenceDeclaration(declaration);
        }

        public void EndReferenceDeclaration()
        {
            this.Formatter.EndReferenceDeclaration();
        }

        #endregion


        public void BeginDocument(IIntermediateAssembly target)
        {
            this.Formatter.BeginDocument(target);
        }

        public void EndDocument()
        {
            this.Formatter.EndDocument();
        }

        public IIntermediateCodeNameProvider NameProvider
        {
            get { return this.nameProvider ?? (this.nameProvider = this.InitializeNameProvider()); }
        }

        void IExpressionVisitor.Visit<TSignatureParameter, TSignature, TParent>(IMethodReferenceStub<TSignatureParameter, TSignature, TParent> expression)
        {
            this.Translate(expression);
        }

        public abstract void Translate<TSignatureParameter, TSignature, TParent>(IMethodReferenceStub<TSignatureParameter, TSignature, TParent> expression)
            where TSignatureParameter :
                IMethodSignatureParameterMember<TSignatureParameter, TSignature, TParent>
            where TSignature :
                IMethodSignatureMember<TSignatureParameter, TSignature, TParent>
            where TParent :
                ISignatureParent<IGeneralGenericSignatureMemberUniqueIdentifier, TSignature, TSignatureParameter, TParent>;


        void IExpressionVisitor.Visit(IMethodReferenceStub expressionSegment)
        {
            this.Translate(expressionSegment);
        }

        public abstract void Translate(IMethodReferenceStub expressionSegment);

        /// <summary>
        /// Returns the string which denotes the sub-tool version.  
        /// Relates specifically to the individual language implementation.
        /// </summary>
        public abstract string SubToolVersion { get; }

        /// <summary>
        /// Returns the string which denotes the sub-tool's name.
        /// Relates specifically to the individual language implementation.
        /// </summary>
        public abstract string SubToolName { get; }

        /// <summary>
        /// Returns the name of the language implemented by the sub-tool.
        /// </summary>
        public abstract string Language { get; }

        /// <summary>
        /// Returns the version of the tool.
        /// </summary>
        public string ToolVersion
        {
            get
            {
                if (toolVersion == null)
                    toolVersion = typeof(IntermediateCodeTranslatorBase).Assembly.GetName().Version.ToString();
                return this.toolVersion;
            }
        }

        /// <summary>
        /// Returns the name of the intermediate foundation.
        /// </summary>
        public virtual string ToolName
        {
            get
            {
                return "Allen Copeland's Abstraction";
            }
        }

        /// <summary>
        /// Returns the 'generated by a tool' text for comments.
        /// </summary>
        public string GeneratedMessageText
        {
            get
            {
                return string.Format(generatedMessageBase, ToolName, ToolVersion, Language, SubToolName, SubToolVersion);
            }
        }

        void IExpressionVisitor.Visit(IBoundLocalReferenceExpression expression)
        {
            this.Translate(expression);
        }



        protected static string GetSelfTerminableDocumentComment(string tag, string attributeName, string attributeValue)
        {
            return string.Format("<{0}\xA0{1}=\"{2}\"/>", tag, attributeName, attributeValue);
        }

        protected static string BreakdownTables(string target)
        {
            StringBuilder result = new StringBuilder();

            int lastStartIndex = 0;
            foreach (var match in docCommentTableStart.MatchSet(target))
            {
                result.Append(target.Substring(lastStartIndex, match.Index - lastStartIndex));
                var inner = match.Groups["inner"].Value;
                result.Append("<list type=\"table\">");
                result.Append(BreakdownTableItems(inner));
                result.Append("</list>");
                lastStartIndex = match.Index + match.Length;
            }
            result.Append(target.Substring(lastStartIndex));
            return result.ToString();
        }

        private static string BreakdownCodeSections(string target)
        {
            StringBuilder result = new StringBuilder();
            int lastStartIndex = 0;
            bool first = true;
            foreach (var match in docCommentCode.MatchSet(target))
            {
                if (first)
                    first = false;
                else
                    result.AppendLine();
                result.Append(target.Substring(lastStartIndex, match.Index - lastStartIndex));
                bool language = match.Groups["language"].Success;
                if (language)
                {
                    result.AppendFormat("<code language=\"{0}\">", match.Groups["language"].Value);
                    result.AppendLine();
                }
                else
                    result.AppendLine("<code>");
                result.AppendLine(match.Groups["inner"].Value);
                result.Append("</code>");
                lastStartIndex = match.Index + match.Length;
            }
            result.Append(target.Substring(lastStartIndex));
            return result.ToString();
        }

        private static string BreakdownParagraphSections(string target)
        {
            bool first = true;
            StringBuilder result = new StringBuilder();
            int lastStartIndex = 0;
            foreach (var match in docCommentParagraph.MatchSet(target))
            {
                if (first)
                    first = false;
                else
                    result.AppendLine();
                result.Append(target.Substring(lastStartIndex, match.Index - lastStartIndex));
                result.AppendLine("<para>");
                result.AppendLine(match.Groups["inner"].Value);
                result.Append("</para>");
                lastStartIndex = match.Index + match.Length;
            }
            result.Append(target.Substring(lastStartIndex));
            return result.ToString();
        }

        private static string BreakdownTableItems(string target)
        {
            StringBuilder result = new StringBuilder();

            int lastStartIndex = 0;
            foreach (var match in docCommentTableListItem.MatchSet(target))
            {
                result.Append(target.Substring(lastStartIndex, match.Index - lastStartIndex));
                var left = match.Groups["left"].Value;
                var right = match.Groups["right"].Value;
                bool header = match.Groups["IsHeader"].Success;
                if (header)
                    result.Append("<listheader>");
                else
                    result.Append("<item>");
                result.Append("<term>");
                result.Append(left);
                result.Append("</term>");
                result.Append("<description>");
                result.Append(right);
                result.Append("</description>");
                if (header)
                    result.Append("</listheader>");
                else
                    result.Append("</item>");
                lastStartIndex = match.Index + match.Length;
            }
            result.Append(target.Substring(lastStartIndex));
            return result.ToString();
        }
        /// <summary>
        /// <list type=""
        /// </summary>
        /// <param name="target"></param>
        /// <returns></returns>
        protected static string ResolveDocumentationCommentLookups(string target)
        {
            /* *
             * A necessary evil.  Because documentation comments are derived
             * from HTML, it's necessary to encode the actual text from the
             * comments and strip any un-necessary characters, replacing them
             * with their unicode or html encoded variants.  Because of this,
             * type-parameter, parameter, and type/member references, must be
             * encoded in a different manner; else, users of the system be
             * required to encode all targets on their own, as well as remember
             * that characters like '<' and '>' are not valid.
             * */
            StringBuilder result = new StringBuilder();
            int lastStartIndex = 0;
            var sectionedAreas = BreakdownParagraphSections(BreakdownCodeSections(BreakdownTables(target)));

            foreach (var match in docCommentLookup.MatchSet(sectionedAreas))
            {
                result.Append(sectionedAreas.Substring(lastStartIndex, match.Index - lastStartIndex));
                switch (match.Groups["refKind"].Value[0])
                {
                    case 'S':
                    case 's':
                        result.Append(GetSelfTerminableDocumentComment("see", "cref", match.Groups["targetName"].Value));
                        break;
                    case 'T':
                    case 't':
                        result.Append(GetSelfTerminableDocumentComment("typeparamref", "name", match.Groups["targetName"].Value));
                        break;
                    case 'P':
                    case 'p':
                        result.Append(GetSelfTerminableDocumentComment("paramref", "name", match.Groups["targetName"].Value));
                        break;
                    default:
                        break;
                }
                lastStartIndex = match.Index + match.Length;
            }
            result.Append(sectionedAreas.Substring(lastStartIndex));
            return BreakdownWrap(result.ToString());
        }


        internal static string BreakdownWrap(string target, int maxWidth = 80)
        {
            const string tabSpace = "\xA0\xA0\xA0\xA0";
            StringBuilder result = new StringBuilder();
            bool first = true;
            foreach (var line in target.Split(new string[] { Environment.NewLine }, StringSplitOptions.None))
            {
                if (first)
                    first = false;
                else
                    result.AppendLine();
                int lastStartIndex = 0;
                int lastWrapIndex = 0;
                foreach (var match in docCommentWrapper.MatchSet(line))
                {
                    result.Append(line.Substring(lastStartIndex, match.Index - lastStartIndex));
                    var diff = match.Index - lastWrapIndex;
                    if (diff > maxWidth)
                    {
                        result.AppendLine();
                        lastWrapIndex = match.Index + match.Length;
                    }
                    else
                        result.Append(match.Groups["CurrentSpace"].Value);
                    lastStartIndex = match.Index + match.Length;
                }
                result.Append(line.Substring(lastStartIndex));
            }
            return result.ToString().Replace("\xA0", "\x20").Replace("\t", tabSpace);
        }

        protected static string GetTerminableDocumentComment(string comment, string tag, string attributeName = null, string attributeValue = null)
        {
            if (attributeName == null)
                return string.Format("<{0}>\r\n{1}\r\n</{0}>", tag, comment);
            else if (attributeValue == null)
                return string.Format("<{0} {1}>\r\n{2}\r\n</{0}", tag, attributeName, comment);
            else
                return string.Format("<{0} {1}=\"{2}\">{3}</{0}>", tag, attributeName, attributeValue, comment);
        }

        protected static string GetSummaryDocumentComment(string summary)
        {
            return GetTerminableDocumentComment(summary, "summary");
        }
        protected static string GetRemarksDocumentComment(string remarks)
        {
            return GetTerminableDocumentComment(remarks, "remarks");
        }
        protected static string GetReturnsDocumentComment(string returns)
        {
            return GetTerminableDocumentComment(returns, "returns");
        }

        public IntermediateSpanTranslationClasses CurrentSpanClass
        {
            get
            {
                if (this.Formatter == null)
                    return this.currentSpanClass;
                else
                    return this.Formatter.CurrentSpanClass;
            }
            set
            {
                this.currentSpanClass = value;
            }
        }

        void IStatementVisitor.Visit(IUsingBlockStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IUsingExpressionBlockStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IThrowStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(ILockStatement statement)
        {
            this.Translate(statement);
        }

        public abstract void Translate(IUsingBlockStatement statement);

        public abstract void Translate(IUsingExpressionBlockStatement statement);

        public abstract void Translate(IThrowStatement statement);

        public abstract void Translate(ILockStatement statement);

        public abstract void Translate(IDefaultValueExpression defaultValueExpression);

        void IExpressionVisitor.Visit(IDefaultValueExpression defaultValueExpression)
        {
            this.Translate(defaultValueExpression);
        }


        public abstract void Translate(IYieldReturnStatement statement);

        public abstract void Translate(IYieldBreakStatement statement);

        void IStatementVisitor.Visit(IYieldReturnStatement statement)
        {
            this.Translate(statement);
        }

        void IStatementVisitor.Visit(IYieldBreakStatement statement)
        {
            this.Translate(statement);
        }
        
        void IStatementVisitor.Visit(IWhileStatement whileStatement)
        {
            this.Translate(whileStatement);
        }

        void IStatementVisitor.Visit(IGoToCaseStatement statement)
        {
            this.Translate(statement);
        }
    }
}
