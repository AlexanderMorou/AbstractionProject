using System;
using System.Collections.Generic;
using System.Text;
using AllenCopeland.Abstraction.Slf.Oil;
using AllenCopeland.Abstraction.Slf.Abstract;
using AllenCopeland.Abstraction.Slf.Oil.Members;
 /*---------------------------------------------------------------------\
 | Copyright © 2009 Allen Copeland Jr.                                  |
 |----------------------------------------------------------------------|
 | The Abstraction Project's code is provided under a contract-release  |
 | basis.  DO NOT DISTRIBUTE and do not use beyond the contract terms.  |
 \-------------------------------------------------------------------- */

namespace AllenCopeland.Abstraction.Slf.Oil.Expressions
{
    public static class CSharpExpressionExtensions
    {

        public static ICSharpRelationalExpression As(this IExpression target, IReferenceType type)
        {
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)target.AffixTo(CSharpOperatorPrecedences.RelationalOperation)), CSharpRelationalOperation.TypeCastOrNull, (ICSharpShiftExpression)type.GetTypeExpression().AffixTo(CSharpOperatorPrecedences.ShiftOperation));
        }

        public static ICSharpRelationalExpression Is(this IExpression target, IType type)
        {
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)target.AffixTo(CSharpOperatorPrecedences.RelationalOperation)), CSharpRelationalOperation.TypeCheck, (ICSharpShiftExpression)type.GetTypeExpression().AffixTo(CSharpOperatorPrecedences.ShiftOperation));
        }

        internal static CSharpOperatorPrecedences GetPrecedence(this IExpression operation)
        {
            if (operation == null)
                throw new ArgumentNullException("operation");
            ExpressionKind kind = operation.Type;
            ExpressionKind.ActiveSectorFlags flags = kind.ActiveSectors;
            bool binaryOps = ((flags & ExpressionKind.ActiveSectorFlags.BinaryOperationExpression) == ExpressionKind.ActiveSectorFlags.BinaryOperationExpression),
                 unaryOps = ((flags & ExpressionKind.ActiveSectorFlags.UnaryOperationExpression) == ExpressionKind.ActiveSectorFlags.UnaryOperationExpression),
                 prims = (flags & ExpressionKind.ActiveSectorFlags.PrimitiveExpression) == ExpressionKind.ActiveSectorFlags.PrimitiveExpression,
                 refs = (flags & ExpressionKind.ActiveSectorFlags.ReferenceExpression) == ExpressionKind.ActiveSectorFlags.ReferenceExpression,
                 calls = (flags & ExpressionKind.ActiveSectorFlags.InvocationExpression) == ExpressionKind.ActiveSectorFlags.InvocationExpression,
                 expansions = (flags & ExpressionKind.ActiveSectorFlags.ExpansionRequiredExpression) == ExpressionKind.ActiveSectorFlags.ExpansionRequiredExpression,
                 specials = (flags & ExpressionKind.ActiveSectorFlags.SpecialFunctionExpression) == ExpressionKind.ActiveSectorFlags.SpecialFunctionExpression,
                 symbs = (flags & ExpressionKind.ActiveSectorFlags.SymbolExpression) == ExpressionKind.ActiveSectorFlags.SymbolExpression;
            if (binaryOps)
            {
                switch (kind.BinaryOperations)
                {
                    case ExpressionKind.BinaryOperationSector.BinaryForwardTerm:
                        if (operation is ICSharpAssignExpression)
                            return CSharpOperatorPrecedences.AssignmentOperation;
                        else if (operation is ICSharpAddSubtExpression)
                            return CSharpOperatorPrecedences.AddSubtOperation;
                        else if (operation is ICSharpMulDivExpression)
                            return CSharpOperatorPrecedences.MulDivOperation;
                        else if (operation is ICSharpLogicalOrExpression)
                            return CSharpOperatorPrecedences.LogicalOrOperation;
                        else if (operation is ICSharpLogicalAndExpression)
                            return CSharpOperatorPrecedences.LogicalAndOperation;
                        else if (operation is ICSharpBitwiseOrExpression)
                            return CSharpOperatorPrecedences.BitwiseOrOperation;
                        else if (operation is ICSharpBitwiseAndExpression)
                            return CSharpOperatorPrecedences.BitwiseAndOperation;
                        else if (operation is ICSharpBitwiseExclusiveOrExpression)
                            return CSharpOperatorPrecedences.BitwiseExclusiveOrOperation;
                        else if (operation is ICSharpInequalityExpression)
                            return CSharpOperatorPrecedences.InequalityOperation;
                        else if (operation is ICSharpRelationalExpression)
                            return CSharpOperatorPrecedences.RelationalOperation;
                        else if (operation is ICSharpShiftExpression)
                            return CSharpOperatorPrecedences.ShiftOperation;
                        else
                            return CSharpOperatorPrecedences.NoPrecedence;
                    case ExpressionKind.BinaryOperationSector.AssignExpression:
                    case ExpressionKind.BinaryOperationSector.AssignMultiplyOperation:
                    case ExpressionKind.BinaryOperationSector.AssignDivideOperation:
                    case ExpressionKind.BinaryOperationSector.AssignModulusOperation:
                    case ExpressionKind.BinaryOperationSector.AssignAddOperation:
                    case ExpressionKind.BinaryOperationSector.AssignSubtractOperation:
                    case ExpressionKind.BinaryOperationSector.AssignLeftShiftOperation:
                    case ExpressionKind.BinaryOperationSector.AssignRightShiftOperation:
                    case ExpressionKind.BinaryOperationSector.AssignBitwiseAndOperation:
                    case ExpressionKind.BinaryOperationSector.AssignBitwiseOrOperation:
                    case ExpressionKind.BinaryOperationSector.AssignBitwiseExclusiveOrOperation:
                        return CSharpOperatorPrecedences.AssignmentOperation;
                    case ExpressionKind.BinaryOperationSector.LogicalOrOperation:
                        return CSharpOperatorPrecedences.LogicalOrOperation;
                    case ExpressionKind.BinaryOperationSector.LogicalAndOperation:
                        return CSharpOperatorPrecedences.LogicalAndOperation;
                    case ExpressionKind.BinaryOperationSector.BitwiseOrOperation:
                        return CSharpOperatorPrecedences.BitwiseOrOperation;
                    case ExpressionKind.BinaryOperationSector.BitwiseExclusiveOrOperation:
                        return CSharpOperatorPrecedences.BitwiseExclusiveOrOperation;
                    case ExpressionKind.BinaryOperationSector.BitwiseAndOperation:
                        return CSharpOperatorPrecedences.BitwiseAndOperation;
                    case ExpressionKind.BinaryOperationSector.InequalityOperation:
                    case ExpressionKind.BinaryOperationSector.EqualityOperation:
                        return CSharpOperatorPrecedences.InequalityOperation;
                    case ExpressionKind.BinaryOperationSector.LessThanOperation:
                    case ExpressionKind.BinaryOperationSector.LessThanOrEqualToOperation:
                    case ExpressionKind.BinaryOperationSector.GreaterThanOperation:
                    case ExpressionKind.BinaryOperationSector.GreaterThanOrEqualToOperation:
                    case ExpressionKind.BinaryOperationSector.TypeCheckOperation:
                    case ExpressionKind.BinaryOperationSector.TypeCastOrNull:
                        return CSharpOperatorPrecedences.RelationalOperation;
                    case ExpressionKind.BinaryOperationSector.ShiftLeftOperation:
                    case ExpressionKind.BinaryOperationSector.ShiftRightOperation:
                        return CSharpOperatorPrecedences.ShiftOperation;
                    case ExpressionKind.BinaryOperationSector.AddOperation:
                    case ExpressionKind.BinaryOperationSector.SubtractOperation:
                        return CSharpOperatorPrecedences.AddSubtOperation;
                    case ExpressionKind.BinaryOperationSector.MultiplyOperation:
                    case ExpressionKind.BinaryOperationSector.StrictDivisionOperation:
                    case ExpressionKind.BinaryOperationSector.ModulusOperation:
                        return CSharpOperatorPrecedences.MulDivOperation;
                }
            }
            if (unaryOps)
            {
                switch (kind.UnaryOperators)
                {
                    case ExpressionKind.UnaryOperationSector.UnaryForwardTerm:
                    case ExpressionKind.UnaryOperationSector.UnaryPreincrement:
                    case ExpressionKind.UnaryOperationSector.UnaryPostincrement:
                    case ExpressionKind.UnaryOperationSector.UnaryPredecrement:
                    case ExpressionKind.UnaryOperationSector.UnaryPostdecrement:
                    case ExpressionKind.UnaryOperationSector.UnaryBooleanInversion:
                    case ExpressionKind.UnaryOperationSector.UnaryBitwiseInversion:
                    case ExpressionKind.UnaryOperationSector.UnarySignInversionOperation:
                        return CSharpOperatorPrecedences.UnaryOperation;
                }
            }
            if (prims)
            {
                switch (kind.PrimitiveInserts)
                {
                    case ExpressionKind.PrimitiveInsertSector.PrimitiveSByteInsert:
                    case ExpressionKind.PrimitiveInsertSector.PrimitiveByteInsert:
                    case ExpressionKind.PrimitiveInsertSector.PrimitiveBooleanInsert:
                    case ExpressionKind.PrimitiveInsertSector.PrimitiveCharInsert:
                    case ExpressionKind.PrimitiveInsertSector.PrimitiveUInt16Insert:
                    case ExpressionKind.PrimitiveInsertSector.PrimitiveInt16Insert:
                    case ExpressionKind.PrimitiveInsertSector.PrimitiveUInt32Insert:
                    case ExpressionKind.PrimitiveInsertSector.PrimitiveInt32Insert:
                    case ExpressionKind.PrimitiveInsertSector.PrimitiveUInt64Insert:
                    case ExpressionKind.PrimitiveInsertSector.PrimitiveInt64Insert:
                    case ExpressionKind.PrimitiveInsertSector.PrimitiveSingleInsert:
                    case ExpressionKind.PrimitiveInsertSector.PrimitiveDoubleInsert:
                    case ExpressionKind.PrimitiveInsertSector.PrimitiveDecimalInsert:
                    case ExpressionKind.PrimitiveInsertSector.PrimitiveStringInsert:
                    case ExpressionKind.PrimitiveInsertSector.PrimitiveNullInsert:
                        return CSharpOperatorPrecedences.UnaryTerm;
                }
            }
            else if (refs)
            {
                switch (kind.ReferenceKinds)
                {
                    case ExpressionKind.ReferenceSector.ParameterReference:
                    case ExpressionKind.ReferenceSector.LocalReference:
                    case ExpressionKind.ReferenceSector.EventReference:
                    case ExpressionKind.ReferenceSector.TypeReference:
                    case ExpressionKind.ReferenceSector.MethodReference:
                    case ExpressionKind.ReferenceSector.PropertyReference:
                    case ExpressionKind.ReferenceSector.ThisReference:
                    case ExpressionKind.ReferenceSector.BaseReference:
                    case ExpressionKind.ReferenceSector.SelfReference:
                    case ExpressionKind.ReferenceSector.FieldReference:
                    case ExpressionKind.ReferenceSector.IndexerReference:
                    case ExpressionKind.ReferenceSector.CurrentTypeReference:
                        return CSharpOperatorPrecedences.UnaryTerm;
                }
            }
            else if (calls)
                switch (kind.Invocations)
                {
                    case ExpressionKind.InvocationSector.EventFire:
                    case ExpressionKind.InvocationSector.MethodCall:
                    case ExpressionKind.InvocationSector.MultiCastDelegateCall:
                        return CSharpOperatorPrecedences.UnaryTerm;
                }
            else if (specials)
                switch (kind.SpecialFunctions)
                {
                    case ExpressionKind.SpecialFunctionSector.TypeCast:
                    case ExpressionKind.SpecialFunctionSector.CheckedExpression:
                    case ExpressionKind.SpecialFunctionSector.UncheckedExpression:
                    case ExpressionKind.SpecialFunctionSector.TypeOfExpression:
                        return CSharpOperatorPrecedences.UnaryTerm;
                }
            else if (symbs)
                switch (kind.Symbols)
                {
                    case ExpressionKind.SymbolSector.ExpressionFusion:
                    case ExpressionKind.SymbolSector.ExpressionToCommaFusion:
                    case ExpressionKind.SymbolSector.ExpressionToTypeCollectionFusion:
                    case ExpressionKind.SymbolSector.SymbolExpression:
                    case ExpressionKind.SymbolSector.ParenthesizedExpression:
                        return CSharpOperatorPrecedences.UnaryTerm;
                }
            return CSharpOperatorPrecedences.NoPrecedence;
        }

        /// <summary>
        /// Affixes the given <paramref name="target"/> <see cref="IExpression"/> 
        /// to the <paramref name="targetPrecedence"/>.
        /// </summary>
        /// <param name="target">The <see cref="IExpression"/> to affix to 
        /// <paramref name="targetPrecedence"/>.</param>
        /// <param name="targetPrecedence">The <see cref="CSharpOperatorPrecedences"/> 
        /// that the expression should yield upon return.</param>
        /// <returns>A new <see cref="IExpression"/> affixed to the 
        /// <paramref name="targetPrecedence"/> for use in a binary 
        /// operation.</returns>
        private static IExpression AffixTo(this IExpression target, CSharpOperatorPrecedences targetPrecedence)
        {
            CSharpOperatorPrecedences currentPrecedence = target.GetPrecedence();
            if (currentPrecedence == targetPrecedence)
                return target;
            if ((currentPrecedence.GetIndex() > targetPrecedence.GetIndex()) ||
                (target is IParenthesizedExpression))
                return WrapFull(target, targetPrecedence);
            return WrapFull(new ParenthesizedExpression(target), targetPrecedence);
        }

        internal static int GetIndex(this CSharpOperatorPrecedences target)
        {
            switch (target)
            {
                case CSharpOperatorPrecedences.AssignmentOperation:
                    return 1;
                case CSharpOperatorPrecedences.ConditionalOperation:
                    return 2;
                case CSharpOperatorPrecedences.LogicalOrOperation:
                    return 3;
                case CSharpOperatorPrecedences.LogicalAndOperation:
                    return 4;
                case CSharpOperatorPrecedences.BitwiseOrOperation:
                    return 4;
                case CSharpOperatorPrecedences.BitwiseExclusiveOrOperation:
                    return 5;
                case CSharpOperatorPrecedences.BitwiseAndOperation:
                    return 6;
                case CSharpOperatorPrecedences.InequalityOperation:
                    return 7;
                case CSharpOperatorPrecedences.RelationalOperation:
                    return 8;
                case CSharpOperatorPrecedences.ShiftOperation:
                    return 9;
                case CSharpOperatorPrecedences.AddSubtOperation:
                    return 10;
                case CSharpOperatorPrecedences.MulDivOperation:
                    return 11;
                case CSharpOperatorPrecedences.UnaryOperation:
                    return 12;
                case CSharpOperatorPrecedences.UnaryTerm:
                    return 13;
                case CSharpOperatorPrecedences.NoPrecedence:
                default:
                    return 0;
            }
        }

        /// <summary>
        /// Removes a previous <see cref="AffixTo(IExpression, CSharpOperatorPrecedences)"/> casing on 
        /// a given <paramref name="target"/>.
        /// </summary>
        /// <param name="target">The <see cref="IExpression"/> 
        /// which has had <see cref="AffixTo(IExpression, CSharpOperatorPrecedences)"/>
        /// called on it.</param>
        /// <returns>The <see cref="IExpression"/> instance as it was 
        /// before the <see cref="AffixTo"/> was called on it..</returns>
        internal static IExpression Disfix(this IExpression target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            ExpressionKind targetKind = target.Type;
            var activeSectors = targetKind.ActiveSectors;
            if (((activeSectors & ExpressionKind.ActiveSectorFlags.BinaryOperationExpression) == ExpressionKind.ActiveSectorFlags.BinaryOperationExpression) &&
                ((targetKind.BinaryOperations & ExpressionKind.BinaryOperationSector.BinaryForwardTerm) == ExpressionKind.BinaryOperationSector.BinaryForwardTerm))
            {
                if (target is ICSharpAssignExpression)
                    return ((ICSharpAssignExpression)(target)).LeftSide.Disfix();
                else if (target is ICSharpAddSubtExpression)
                    return ((ICSharpAddSubtExpression)(target)).RightSide.Disfix();
                else if (target is ICSharpMulDivExpression)
                    return ((ICSharpMulDivExpression)(target)).RightSide.Disfix();
                else if (target is ICSharpLogicalOrExpression)
                    return ((ICSharpLogicalOrExpression)(target)).RightSide.Disfix();
                else if (target is ICSharpLogicalAndExpression)
                    return ((ICSharpLogicalAndExpression)(target)).RightSide.Disfix();
                else if (target is ICSharpBitwiseOrExpression)
                    return ((ICSharpBitwiseOrExpression)(target)).RightSide.Disfix();
                else if (target is ICSharpBitwiseAndExpression)
                    return ((ICSharpBitwiseAndExpression)(target)).RightSide.Disfix();
                else if (target is ICSharpBitwiseExclusiveOrExpression)
                    return ((ICSharpBitwiseExclusiveOrExpression)(target)).RightSide.Disfix();
                else if (target is ICSharpInequalityExpression)
                    return ((ICSharpInequalityExpression)(target)).RightSide.Disfix();
                else if (target is ICSharpRelationalExpression)
                    return ((ICSharpRelationalExpression)(target)).RightSide.Disfix();
                else if (target is ICSharpShiftExpression)
                    return ((ICSharpShiftExpression)(target)).RightSide.Disfix();
            }
            else if ((((activeSectors & ExpressionKind.ActiveSectorFlags.UnaryOperationExpression) == ExpressionKind.ActiveSectorFlags.UnaryOperationExpression)) &&
                      ((targetKind.UnaryOperators & ExpressionKind.UnaryOperationSector.UnaryForwardTerm) == ExpressionKind.UnaryOperationSector.UnaryForwardTerm) &&
                       (target is IUnaryOperationExpression))
                return ((IUnaryOperationExpression)(target)).Term;
            return target;
        }

        private static IExpression WrapFull(IExpression exprB, CSharpOperatorPrecedences targetPrecedence)
        {
            CSharpOperatorPrecedences currentPrecedence = exprB.GetPrecedence();
            if (currentPrecedence == targetPrecedence)
                return exprB;
            switch (currentPrecedence)
            {
                case CSharpOperatorPrecedences.ConditionalOperation:
                    return new CSharpAssignExpression(((ICSharpConditionalExpression)(exprB)));
                case CSharpOperatorPrecedences.LogicalOrOperation:
                    return new CSharpConditionalExpression((ICSharpLogicalOrExpression)exprB);
                case CSharpOperatorPrecedences.LogicalAndOperation:
                    return WrapFull(new CSharpLogicalOrExpression(((ICSharpLogicalAndExpression)(exprB))), targetPrecedence);
                case CSharpOperatorPrecedences.BitwiseOrOperation:
                    return WrapFull(new CSharpLogicalAndExpression(((ICSharpBitwiseOrExpression)(exprB))), targetPrecedence);
                case CSharpOperatorPrecedences.BitwiseExclusiveOrOperation:
                    return WrapFull(new CSharpBitwiseOrExpression(((ICSharpBitwiseExclusiveOrExpression)(exprB))), targetPrecedence);
                case CSharpOperatorPrecedences.BitwiseAndOperation:
                    return WrapFull(new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseAndExpression)(exprB))), targetPrecedence);
                case CSharpOperatorPrecedences.InequalityOperation:
                    return WrapFull(new CSharpBitwiseAndExpression(((ICSharpInequalityExpression)(exprB))), targetPrecedence);
                case CSharpOperatorPrecedences.RelationalOperation:
                    return WrapFull(new CSharpInequalityExpression((ICSharpRelationalExpression)exprB), targetPrecedence);
                case CSharpOperatorPrecedences.ShiftOperation:
                    return WrapFull(new CSharpRelationalExpression((ICSharpShiftExpression)exprB), targetPrecedence);
                case CSharpOperatorPrecedences.AddSubtOperation:
                    return WrapFull(new CSharpShiftExpression((ICSharpAddSubtExpression)exprB), targetPrecedence);
                case CSharpOperatorPrecedences.MulDivOperation:
                    return WrapFull(new CSharpAddSubtExpression((ICSharpMulDivExpression)exprB), targetPrecedence);
                case CSharpOperatorPrecedences.UnaryOperation:
                    return WrapFull(new CSharpMulDivExpression((IUnaryOperationExpression)exprB), targetPrecedence);
                case CSharpOperatorPrecedences.UnaryTerm:
                    return WrapFull(new UnaryOperationExpression((IUnaryOperationPrimaryTerm)exprB), targetPrecedence);
                case CSharpOperatorPrecedences.AssignmentOperation:
                default:
                    throw new ArgumentException("Cannot have a precedence level below Assign.", "exprB");
            }
        }

        public static CSharpConditionalExpression IIf(this IExpression check, IExpression truePart, IExpression falsePart)
        {
            return new CSharpConditionalExpression((ICSharpLogicalOrExpression)check.AffixTo(CSharpOperatorPrecedences.LogicalOrOperation), (ICSharpConditionalExpression)truePart.AffixTo(CSharpOperatorPrecedences.ConditionalOperation), (ICSharpConditionalExpression)falsePart.AffixTo(CSharpOperatorPrecedences.ConditionalOperation));
        }

        #region LogicalAnd

        #region LogicalAnd for IExpression
        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IExpression"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IExpression target, IExpression logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IExpression target, IIntermediateFieldMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IExpression target, IIntermediateParameterMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IExpression target, IIntermediatePropertySignatureMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IExpression target, ILocalMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        #endregion

        #region LogicalAnd for IIntermediateFieldMember
        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IExpression"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IIntermediateFieldMember target, IExpression logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IIntermediateFieldMember target, IIntermediateFieldMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IIntermediateFieldMember target, IIntermediateParameterMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IIntermediateFieldMember target, ILocalMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        #endregion

        #region LogicalAnd for IIntermediateParameterMember
        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IExpression"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IIntermediateParameterMember target, IExpression logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IIntermediateParameterMember target, IIntermediateFieldMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IIntermediateParameterMember target, IIntermediateParameterMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IIntermediateParameterMember target, ILocalMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        #endregion

        #region LogicalAnd for IIntermediatePropertySignatureMember
        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IExpression"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IIntermediatePropertySignatureMember target, IExpression logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this IIntermediatePropertySignatureMember target, ILocalMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        #endregion

        #region LogicalAnd for ILocalMember
        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IExpression"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this ILocalMember target, IExpression logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this ILocalMember target, IIntermediateFieldMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this ILocalMember target, IIntermediateParameterMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this ILocalMember target, IIntermediatePropertySignatureMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the logical and operation occurs.
        /// </param>
        /// <param name="logicalPair">
        /// The logical pair <see cref="ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being true.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalPair"/> is null.
        /// </exception>
        public static ICSharpLogicalAndExpression LogicalAnd(this ILocalMember target, ILocalMember logicalPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalPair == null)
                throw new ArgumentNullException("logicalPair");
            return new CSharpLogicalAndExpression(((ICSharpLogicalAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))), ((ICSharpBitwiseOrExpression)(logicalPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))));
        }

        #endregion

        #endregion

        #region LogicalOr

        #region LogicalOr for IExpression
        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IExpression"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IExpression target, IExpression logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IExpression target, IIntermediateFieldMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IExpression target, IIntermediateParameterMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IExpression target, IIntermediatePropertySignatureMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IExpression target, ILocalMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        #endregion

        #region LogicalOr for IIntermediateFieldMember
        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IExpression"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IIntermediateFieldMember target, IExpression logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IIntermediateFieldMember target, IIntermediateFieldMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IIntermediateFieldMember target, IIntermediateParameterMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IIntermediateFieldMember target, ILocalMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        #endregion

        #region LogicalOr for IIntermediateParameterMember
        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IExpression"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IIntermediateParameterMember target, IExpression logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IIntermediateParameterMember target, IIntermediateFieldMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IIntermediateParameterMember target, IIntermediateParameterMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IIntermediateParameterMember target, ILocalMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        #endregion

        #region LogicalOr for IIntermediatePropertySignatureMember
        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IExpression"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IIntermediatePropertySignatureMember target, IExpression logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this IIntermediatePropertySignatureMember target, ILocalMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        #endregion

        #region LogicalOr for ILocalMember
        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IExpression"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this ILocalMember target, IExpression logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IIntermediateFieldMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this ILocalMember target, IIntermediateFieldMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IIntermediateParameterMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this ILocalMember target, IIntermediateParameterMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="IIntermediatePropertySignatureMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this ILocalMember target, IIntermediatePropertySignatureMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        /// <summary>
        /// Performs a logical comparison on <paramref name="target"/> and <paramref name="logicalAlternate"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the logical or operation occurs.
        /// </param>
        /// <param name="logicalAlternate">
        /// The logical alternate <see cref="ILocalMember"/> value which should be checked if <paramref name="target"/> ends up being false.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="logicalAlternate"/> is null.
        /// </exception>
        public static ICSharpLogicalOrExpression LogicalOr(this ILocalMember target, ILocalMember logicalAlternate)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (logicalAlternate == null)
                throw new ArgumentNullException("logicalAlternate");
            return new CSharpLogicalOrExpression(((ICSharpLogicalOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalOrOperation))), ((ICSharpLogicalAndExpression)(logicalAlternate.GetReference().AffixTo(CSharpOperatorPrecedences.LogicalAndOperation))));
        }

        #endregion

        #endregion

        #region BitwiseOr

        #region BitwiseOr for Boolean
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Boolean target, IExpression bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Boolean target, IIntermediateFieldMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Boolean target, IIntermediateParameterMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Boolean target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Boolean target, ILocalMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for Byte
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Byte target, IExpression bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Byte target, IIntermediateFieldMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Byte target, IIntermediateParameterMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Byte target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Byte target, ILocalMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for Char
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Char target, IExpression bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Char target, IIntermediateFieldMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Char target, IIntermediateParameterMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Char target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Char target, ILocalMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for Decimal
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Decimal target, IExpression bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Decimal target, IIntermediateFieldMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Decimal target, IIntermediateParameterMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Decimal target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Decimal target, ILocalMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for Double
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Double target, IExpression bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Double target, IIntermediateFieldMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Double target, IIntermediateParameterMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Double target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Double target, ILocalMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for IExpression
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Boolean"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, Boolean bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Byte"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, Byte bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Char"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, Char bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Decimal"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, Decimal bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Double"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, Double bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, IExpression bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, IIntermediateFieldMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, IIntermediateParameterMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, ILocalMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Int16"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, Int16 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Int32"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, Int32 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Int64"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, Int64 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="SByte"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, SByte bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Single"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, Single bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="UInt16"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, UInt16 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="UInt32"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, UInt32 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="UInt64"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IExpression target, UInt64 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for IIntermediateFieldMember
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Boolean"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, Boolean bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Byte"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, Byte bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Char"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, Char bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Decimal"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, Decimal bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Double"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, Double bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, IExpression bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, IIntermediateFieldMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, IIntermediateParameterMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, ILocalMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Int16"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, Int16 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Int32"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, Int32 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Int64"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, Int64 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="SByte"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, SByte bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Single"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, Single bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="UInt16"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, UInt16 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="UInt32"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, UInt32 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="UInt64"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateFieldMember target, UInt64 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for IIntermediateParameterMember
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Boolean"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, Boolean bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Byte"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, Byte bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Char"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, Char bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Decimal"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, Decimal bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Double"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, Double bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, IExpression bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, IIntermediateFieldMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, IIntermediateParameterMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, ILocalMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Int16"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, Int16 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Int32"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, Int32 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Int64"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, Int64 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="SByte"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, SByte bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Single"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, Single bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="UInt16"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, UInt16 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="UInt32"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, UInt32 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="UInt64"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediateParameterMember target, UInt64 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for IIntermediatePropertySignatureMember
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Boolean"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, Boolean bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Byte"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, Byte bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Char"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, Char bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Decimal"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, Decimal bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Double"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, Double bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, IExpression bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, ILocalMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Int16"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, Int16 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Int32"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, Int32 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Int64"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, Int64 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="SByte"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, SByte bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Single"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, Single bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="UInt16"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, UInt16 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="UInt32"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, UInt32 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="UInt64"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this IIntermediatePropertySignatureMember target, UInt64 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for ILocalMember
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Boolean"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, Boolean bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Byte"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, Byte bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Char"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, Char bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Decimal"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, Decimal bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Double"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, Double bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, IExpression bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, IIntermediateFieldMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, IIntermediateParameterMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, ILocalMember bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Int16"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, Int16 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Int32"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, Int32 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Int64"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, Int64 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="SByte"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, SByte bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="Single"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, Single bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="UInt16"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, UInt16 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="UInt32"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, UInt32 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="UInt64"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this ILocalMember target, UInt64 bitUnionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for Int16
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Int16 target, IExpression bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Int16 target, IIntermediateFieldMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Int16 target, IIntermediateParameterMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Int16 target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Int16 target, ILocalMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for Int32
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Int32 target, IExpression bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Int32 target, IIntermediateFieldMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Int32 target, IIntermediateParameterMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Int32 target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Int32 target, ILocalMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for Int64
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Int64 target, IExpression bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Int64 target, IIntermediateFieldMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Int64 target, IIntermediateParameterMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Int64 target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Int64 target, ILocalMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for SByte
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this SByte target, IExpression bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this SByte target, IIntermediateFieldMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this SByte target, IIntermediateParameterMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this SByte target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this SByte target, ILocalMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for Single
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Single target, IExpression bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Single target, IIntermediateFieldMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Single target, IIntermediateParameterMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Single target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this Single target, ILocalMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for UInt16
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this UInt16 target, IExpression bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this UInt16 target, IIntermediateFieldMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this UInt16 target, IIntermediateParameterMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this UInt16 target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this UInt16 target, ILocalMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for UInt32
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this UInt32 target, IExpression bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this UInt32 target, IIntermediateFieldMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this UInt32 target, IIntermediateParameterMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this UInt32 target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this UInt32 target, ILocalMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #region BitwiseOr for UInt64
        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IExpression"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this UInt64 target, IExpression bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this UInt64 target, IIntermediateFieldMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this UInt64 target, IIntermediateParameterMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this UInt64 target, IIntermediatePropertySignatureMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        /// <summary>
        /// Performs a bitwise union with <paramref name="target"/> and <paramref name="bitUnionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the union operation occurs.
        /// </param>
        /// <param name="bitUnionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a union with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="bitUnionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseOrExpression BitwiseOr(this UInt64 target, ILocalMember bitUnionPair)
        {
            if (bitUnionPair == null)
                throw new ArgumentNullException("bitUnionPair");
            return new CSharpBitwiseOrExpression(((ICSharpBitwiseOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseOrOperation))), ((ICSharpBitwiseExclusiveOrExpression)(bitUnionPair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))));
        }

        #endregion

        #endregion

        #region BitwiseXOr

        #region BitwiseXOr for Boolean
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Boolean target, IExpression symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Boolean target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Boolean target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Boolean target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Boolean target, ILocalMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for Byte
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Byte target, IExpression symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Byte target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Byte target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Byte target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Byte target, ILocalMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for Char
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Char target, IExpression symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Char target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Char target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Char target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Char target, ILocalMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for Decimal
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Decimal target, IExpression symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Decimal target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Decimal target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Decimal target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Decimal target, ILocalMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for Double
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Double target, IExpression symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Double target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Double target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Double target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Double target, ILocalMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for IExpression
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Boolean"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, Boolean symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Byte"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, Byte symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Char"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, Char symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Decimal"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, Decimal symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Double"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, Double symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, IExpression symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, ILocalMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Int16"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, Int16 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Int32"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, Int32 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Int64"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, Int64 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="SByte"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, SByte symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Single"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, Single symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="UInt16"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, UInt16 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="UInt32"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, UInt32 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="UInt64"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IExpression target, UInt64 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for IIntermediateFieldMember
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Boolean"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, Boolean symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Byte"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, Byte symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Char"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, Char symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Decimal"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, Decimal symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Double"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, Double symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, IExpression symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, ILocalMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Int16"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, Int16 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Int32"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, Int32 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Int64"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, Int64 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="SByte"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, SByte symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Single"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, Single symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="UInt16"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, UInt16 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="UInt32"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, UInt32 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="UInt64"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateFieldMember target, UInt64 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for IIntermediateParameterMember
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Boolean"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, Boolean symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Byte"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, Byte symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Char"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, Char symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Decimal"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, Decimal symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Double"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, Double symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, IExpression symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, ILocalMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Int16"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, Int16 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Int32"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, Int32 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Int64"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, Int64 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="SByte"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, SByte symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Single"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, Single symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="UInt16"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, UInt16 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="UInt32"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, UInt32 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="UInt64"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediateParameterMember target, UInt64 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for IIntermediatePropertySignatureMember
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Boolean"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, Boolean symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Byte"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, Byte symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Char"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, Char symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Decimal"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, Decimal symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Double"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, Double symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, IExpression symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, ILocalMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Int16"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, Int16 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Int32"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, Int32 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Int64"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, Int64 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="SByte"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, SByte symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Single"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, Single symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="UInt16"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, UInt16 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="UInt32"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, UInt32 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="UInt64"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this IIntermediatePropertySignatureMember target, UInt64 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for ILocalMember
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Boolean"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, Boolean symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Byte"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, Byte symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Char"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, Char symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Decimal"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, Decimal symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Double"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, Double symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, IExpression symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, ILocalMember symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Int16"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, Int16 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Int32"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, Int32 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Int64"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, Int64 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="SByte"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, SByte symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="Single"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, Single symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="UInt16"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, UInt16 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="UInt32"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, UInt32 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="UInt64"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this ILocalMember target, UInt64 symmetricDifferencePair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for Int16
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Int16 target, IExpression symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Int16 target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Int16 target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Int16 target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Int16 target, ILocalMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for Int32
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Int32 target, IExpression symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Int32 target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Int32 target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Int32 target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Int32 target, ILocalMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for Int64
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Int64 target, IExpression symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Int64 target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Int64 target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Int64 target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Int64 target, ILocalMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for SByte
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this SByte target, IExpression symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this SByte target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this SByte target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this SByte target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this SByte target, ILocalMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for Single
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Single target, IExpression symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Single target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Single target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Single target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this Single target, ILocalMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for UInt16
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this UInt16 target, IExpression symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this UInt16 target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this UInt16 target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this UInt16 target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this UInt16 target, ILocalMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for UInt32
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this UInt32 target, IExpression symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this UInt32 target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this UInt32 target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this UInt32 target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this UInt32 target, ILocalMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #region BitwiseXOr for UInt64
        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IExpression"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this UInt64 target, IExpression symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this UInt64 target, IIntermediateFieldMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this UInt64 target, IIntermediateParameterMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this UInt64 target, IIntermediatePropertySignatureMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        /// <summary>
        /// Performs a bitwise symmetric difference on <paramref name="target"/> and <paramref name="symmetricDifferencePair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the symmetric difference operation occurs.
        /// </param>
        /// <param name="symmetricDifferencePair">
        /// The bitwise <see cref="ILocalMember"/> value to perform a symmetric difference of <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="symmetricDifferencePair"/> is null.
        /// </exception>
        public static ICSharpBitwiseExclusiveOrExpression BitwiseXOr(this UInt64 target, ILocalMember symmetricDifferencePair)
        {
            if (symmetricDifferencePair == null)
                throw new ArgumentNullException("symmetricDifferencePair");
            return new CSharpBitwiseExclusiveOrExpression(((ICSharpBitwiseExclusiveOrExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseExclusiveOrOperation))), ((ICSharpBitwiseAndExpression)(symmetricDifferencePair.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))));
        }

        #endregion

        #endregion

        #region BitwiseAnd

        #region BitwiseAnd for Boolean
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Boolean target, IExpression intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Boolean target, IIntermediateFieldMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Boolean target, IIntermediateParameterMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Boolean target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Boolean target, ILocalMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for Byte
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Byte target, IExpression intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Byte target, IIntermediateFieldMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Byte target, IIntermediateParameterMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Byte target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Byte target, ILocalMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for Char
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Char target, IExpression intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Char target, IIntermediateFieldMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Char target, IIntermediateParameterMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Char target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Char target, ILocalMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for Decimal
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Decimal target, IExpression intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Decimal target, IIntermediateFieldMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Decimal target, IIntermediateParameterMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Decimal target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Decimal target, ILocalMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for Double
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Double target, IExpression intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Double target, IIntermediateFieldMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Double target, IIntermediateParameterMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Double target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Double target, ILocalMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for IExpression
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Boolean"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, Boolean intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Byte"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, Byte intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Char"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, Char intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Decimal"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, Decimal intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Double"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, Double intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, IExpression intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, IIntermediateFieldMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, IIntermediateParameterMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, ILocalMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Int16"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, Int16 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Int32"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, Int32 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Int64"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, Int64 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="SByte"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, SByte intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Single"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, Single intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="UInt16"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, UInt16 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="UInt32"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, UInt32 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="UInt64"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IExpression target, UInt64 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for IIntermediateFieldMember
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Boolean"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, Boolean intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Byte"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, Byte intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Char"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, Char intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Decimal"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, Decimal intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Double"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, Double intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, IExpression intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, IIntermediateFieldMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, IIntermediateParameterMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, ILocalMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Int16"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, Int16 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Int32"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, Int32 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Int64"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, Int64 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="SByte"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, SByte intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Single"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, Single intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="UInt16"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, UInt16 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="UInt32"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, UInt32 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="UInt64"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateFieldMember target, UInt64 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for IIntermediateParameterMember
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Boolean"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, Boolean intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Byte"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, Byte intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Char"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, Char intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Decimal"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, Decimal intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Double"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, Double intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, IExpression intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, IIntermediateFieldMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, IIntermediateParameterMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, ILocalMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Int16"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, Int16 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Int32"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, Int32 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Int64"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, Int64 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="SByte"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, SByte intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Single"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, Single intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="UInt16"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, UInt16 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="UInt32"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, UInt32 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="UInt64"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediateParameterMember target, UInt64 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for IIntermediatePropertySignatureMember
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Boolean"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, Boolean intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Byte"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, Byte intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Char"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, Char intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Decimal"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, Decimal intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Double"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, Double intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, IExpression intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, ILocalMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Int16"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, Int16 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Int32"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, Int32 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Int64"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, Int64 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="SByte"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, SByte intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Single"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, Single intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="UInt16"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, UInt16 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="UInt32"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, UInt32 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="UInt64"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this IIntermediatePropertySignatureMember target, UInt64 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for ILocalMember
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Boolean"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, Boolean intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Byte"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, Byte intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Char"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, Char intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Decimal"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, Decimal intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Double"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, Double intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, IExpression intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, IIntermediateFieldMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, IIntermediateParameterMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, ILocalMember intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Int16"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, Int16 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Int32"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, Int32 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Int64"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, Int64 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="SByte"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, SByte intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="Single"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, Single intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="UInt16"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, UInt16 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="UInt32"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, UInt32 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="UInt64"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this ILocalMember target, UInt64 intersectionPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for Int16
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Int16 target, IExpression intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Int16 target, IIntermediateFieldMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Int16 target, IIntermediateParameterMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Int16 target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Int16 target, ILocalMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for Int32
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Int32 target, IExpression intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Int32 target, IIntermediateFieldMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Int32 target, IIntermediateParameterMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Int32 target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Int32 target, ILocalMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for Int64
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Int64 target, IExpression intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Int64 target, IIntermediateFieldMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Int64 target, IIntermediateParameterMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Int64 target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Int64 target, ILocalMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for SByte
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this SByte target, IExpression intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this SByte target, IIntermediateFieldMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this SByte target, IIntermediateParameterMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this SByte target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this SByte target, ILocalMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for Single
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Single target, IExpression intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Single target, IIntermediateFieldMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Single target, IIntermediateParameterMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Single target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this Single target, ILocalMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for UInt16
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this UInt16 target, IExpression intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this UInt16 target, IIntermediateFieldMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this UInt16 target, IIntermediateParameterMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this UInt16 target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this UInt16 target, ILocalMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for UInt32
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this UInt32 target, IExpression intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this UInt32 target, IIntermediateFieldMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this UInt32 target, IIntermediateParameterMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this UInt32 target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this UInt32 target, ILocalMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #region BitwiseAnd for UInt64
        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IExpression"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this UInt64 target, IExpression intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateFieldMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this UInt64 target, IIntermediateFieldMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediateParameterMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this UInt64 target, IIntermediateParameterMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="IIntermediatePropertySignatureMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this UInt64 target, IIntermediatePropertySignatureMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        /// <summary>
        /// Performs a bitwise intersection on <paramref name="target"/> and <paramref name="intersectionPair"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the intersection operation occurs.
        /// </param>
        /// <param name="intersectionPair">
        /// The bitwise <see cref="ILocalMember"/> value to perform an intersection with <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="intersectionPair"/> is null.
        /// </exception>
        public static ICSharpBitwiseAndExpression BitwiseAnd(this UInt64 target, ILocalMember intersectionPair)
        {
            if (intersectionPair == null)
                throw new ArgumentNullException("intersectionPair");
            return new CSharpBitwiseAndExpression(((ICSharpBitwiseAndExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.BitwiseAndOperation))), ((ICSharpInequalityExpression)(intersectionPair.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))));
        }

        #endregion

        #endregion

        #region EqualTo

        #region EqualTo for Boolean
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Boolean target, IExpression potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Boolean target, IIntermediateFieldMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Boolean target, IIntermediateParameterMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Boolean target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Boolean target, ILocalMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for Byte
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Byte target, IExpression potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Byte target, IIntermediateFieldMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Byte target, IIntermediateParameterMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Byte target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Byte target, ILocalMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for Char
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Char target, IExpression potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Char target, IIntermediateFieldMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Char target, IIntermediateParameterMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Char target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Char target, ILocalMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for Decimal
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Decimal target, IExpression potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Decimal target, IIntermediateFieldMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Decimal target, IIntermediateParameterMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Decimal target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Decimal target, ILocalMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for Double
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Double target, IExpression potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Double target, IIntermediateFieldMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Double target, IIntermediateParameterMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Double target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Double target, ILocalMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for IExpression
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Boolean"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, Boolean potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Byte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, Byte potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Char"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, Char potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Decimal"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, Decimal potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Double"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, Double potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, IExpression potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, IIntermediateFieldMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, IIntermediateParameterMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, ILocalMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Int16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, Int16 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Int32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, Int32 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Int64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, Int64 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="SByte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, SByte potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Single"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, Single potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="String"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, String potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="UInt16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, UInt16 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="UInt32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, UInt32 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="UInt64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IExpression target, UInt64 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for IIntermediateFieldMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Boolean"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, Boolean potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Byte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, Byte potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Char"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, Char potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Decimal"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, Decimal potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Double"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, Double potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, IExpression potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, IIntermediateFieldMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, IIntermediateParameterMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, ILocalMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Int16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, Int16 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Int32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, Int32 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Int64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, Int64 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="SByte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, SByte potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Single"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, Single potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="String"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, String potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="UInt16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, UInt16 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="UInt32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, UInt32 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="UInt64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateFieldMember target, UInt64 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for IIntermediateParameterMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Boolean"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, Boolean potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Byte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, Byte potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Char"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, Char potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Decimal"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, Decimal potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Double"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, Double potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, IExpression potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, IIntermediateFieldMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, IIntermediateParameterMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, ILocalMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Int16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, Int16 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Int32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, Int32 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Int64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, Int64 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="SByte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, SByte potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Single"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, Single potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="String"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, String potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="UInt16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, UInt16 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="UInt32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, UInt32 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="UInt64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediateParameterMember target, UInt64 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for IIntermediatePropertySignatureMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Boolean"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, Boolean potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Byte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, Byte potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Char"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, Char potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Decimal"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, Decimal potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Double"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, Double potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, IExpression potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, ILocalMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Int16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, Int16 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Int32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, Int32 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Int64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, Int64 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="SByte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, SByte potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Single"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, Single potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="String"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, String potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="UInt16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, UInt16 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="UInt32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, UInt32 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="UInt64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this IIntermediatePropertySignatureMember target, UInt64 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for ILocalMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Boolean"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, Boolean potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Byte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, Byte potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Char"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, Char potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Decimal"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, Decimal potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Double"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, Double potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, IExpression potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, IIntermediateFieldMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, IIntermediateParameterMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, ILocalMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Int16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, Int16 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Int32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, Int32 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Int64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, Int64 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="SByte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, SByte potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="Single"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, Single potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="String"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, String potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="UInt16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, UInt16 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="UInt32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, UInt32 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="UInt64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this ILocalMember target, UInt64 potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for Int16
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Int16 target, IExpression potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Int16 target, IIntermediateFieldMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Int16 target, IIntermediateParameterMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Int16 target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Int16 target, ILocalMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for Int32
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Int32 target, IExpression potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Int32 target, IIntermediateFieldMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Int32 target, IIntermediateParameterMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Int32 target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Int32 target, ILocalMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for Int64
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Int64 target, IExpression potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Int64 target, IIntermediateFieldMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Int64 target, IIntermediateParameterMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Int64 target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Int64 target, ILocalMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for SByte
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this SByte target, IExpression potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this SByte target, IIntermediateFieldMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this SByte target, IIntermediateParameterMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this SByte target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this SByte target, ILocalMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for Single
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Single target, IExpression potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Single target, IIntermediateFieldMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Single target, IIntermediateParameterMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Single target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this Single target, ILocalMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for String
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="String"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this String target, IExpression potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="String"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this String target, IIntermediateFieldMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="String"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this String target, IIntermediateParameterMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="String"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this String target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="String"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this String target, ILocalMember potentialEquivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for UInt16
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this UInt16 target, IExpression potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this UInt16 target, IIntermediateFieldMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this UInt16 target, IIntermediateParameterMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this UInt16 target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this UInt16 target, ILocalMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for UInt32
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this UInt32 target, IExpression potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this UInt32 target, IIntermediateFieldMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this UInt32 target, IIntermediateParameterMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this UInt32 target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this UInt32 target, ILocalMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region EqualTo for UInt64
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this UInt64 target, IExpression potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this UInt64 target, IIntermediateFieldMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this UInt64 target, IIntermediateParameterMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this UInt64 target, IIntermediatePropertySignatureMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialEquivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the equality operation occurs.
        /// </param>
        /// <param name="potentialEquivalent">
        /// The potentially equivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialEquivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression EqualTo(this UInt64 target, ILocalMember potentialEquivalent)
        {
            if (potentialEquivalent == null)
                throw new ArgumentNullException("potentialEquivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), true, ((ICSharpRelationalExpression)(potentialEquivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #endregion

        #region InequalTo

        #region InequalTo for Boolean
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Boolean target, IExpression potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Boolean target, IIntermediateFieldMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Boolean target, IIntermediateParameterMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Boolean target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Boolean target, ILocalMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for Byte
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Byte target, IExpression potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Byte target, IIntermediateFieldMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Byte target, IIntermediateParameterMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Byte target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Byte target, ILocalMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for Char
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Char target, IExpression potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Char target, IIntermediateFieldMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Char target, IIntermediateParameterMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Char target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Char target, ILocalMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for Decimal
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Decimal target, IExpression potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Decimal target, IIntermediateFieldMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Decimal target, IIntermediateParameterMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Decimal target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Decimal target, ILocalMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for Double
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Double target, IExpression potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Double target, IIntermediateFieldMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Double target, IIntermediateParameterMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Double target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Double target, ILocalMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for IExpression
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Boolean"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, Boolean potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Byte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, Byte potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Char"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, Char potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Decimal"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, Decimal potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Double"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, Double potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, IExpression potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, IIntermediateFieldMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, IIntermediateParameterMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, ILocalMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Int16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, Int16 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Int32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, Int32 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Int64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, Int64 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="SByte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, SByte potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Single"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, Single potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="String"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, String potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="UInt16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, UInt16 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="UInt32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, UInt32 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="UInt64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IExpression target, UInt64 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for IIntermediateFieldMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Boolean"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, Boolean potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Byte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, Byte potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Char"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, Char potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Decimal"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, Decimal potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Double"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, Double potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, IExpression potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, IIntermediateFieldMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, IIntermediateParameterMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, ILocalMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Int16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, Int16 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Int32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, Int32 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Int64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, Int64 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="SByte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, SByte potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Single"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, Single potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="String"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, String potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="UInt16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, UInt16 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="UInt32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, UInt32 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="UInt64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateFieldMember target, UInt64 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for IIntermediateParameterMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Boolean"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, Boolean potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Byte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, Byte potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Char"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, Char potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Decimal"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, Decimal potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Double"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, Double potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, IExpression potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, IIntermediateFieldMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, IIntermediateParameterMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, ILocalMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Int16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, Int16 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Int32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, Int32 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Int64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, Int64 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="SByte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, SByte potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Single"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, Single potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="String"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, String potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="UInt16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, UInt16 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="UInt32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, UInt32 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="UInt64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediateParameterMember target, UInt64 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for IIntermediatePropertySignatureMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Boolean"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, Boolean potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Byte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, Byte potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Char"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, Char potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Decimal"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, Decimal potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Double"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, Double potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, IExpression potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, ILocalMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Int16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, Int16 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Int32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, Int32 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Int64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, Int64 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="SByte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, SByte potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Single"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, Single potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="String"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, String potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="UInt16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, UInt16 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="UInt32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, UInt32 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="UInt64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this IIntermediatePropertySignatureMember target, UInt64 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for ILocalMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Boolean"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, Boolean potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Byte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, Byte potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Char"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, Char potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Decimal"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, Decimal potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Double"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, Double potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, IExpression potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, IIntermediateFieldMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, IIntermediateParameterMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, ILocalMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Int16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, Int16 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Int32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, Int32 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Int64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, Int64 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="SByte"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, SByte potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="Single"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, Single potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="String"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, String potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="UInt16"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, UInt16 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="UInt32"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, UInt32 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="UInt64"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this ILocalMember target, UInt64 potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for Int16
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Int16 target, IExpression potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Int16 target, IIntermediateFieldMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Int16 target, IIntermediateParameterMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Int16 target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Int16 target, ILocalMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for Int32
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Int32 target, IExpression potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Int32 target, IIntermediateFieldMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Int32 target, IIntermediateParameterMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Int32 target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Int32 target, ILocalMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for Int64
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Int64 target, IExpression potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Int64 target, IIntermediateFieldMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Int64 target, IIntermediateParameterMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Int64 target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Int64 target, ILocalMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for SByte
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this SByte target, IExpression potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this SByte target, IIntermediateFieldMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this SByte target, IIntermediateParameterMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this SByte target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this SByte target, ILocalMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for Single
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Single target, IExpression potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Single target, IIntermediateFieldMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Single target, IIntermediateParameterMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Single target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this Single target, ILocalMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for String
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="String"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this String target, IExpression potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="String"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this String target, IIntermediateFieldMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="String"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this String target, IIntermediateParameterMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="String"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this String target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="String"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this String target, ILocalMember potentialInequivalent)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for UInt16
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this UInt16 target, IExpression potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this UInt16 target, IIntermediateFieldMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this UInt16 target, IIntermediateParameterMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this UInt16 target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this UInt16 target, ILocalMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for UInt32
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this UInt32 target, IExpression potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this UInt32 target, IIntermediateFieldMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this UInt32 target, IIntermediateParameterMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this UInt32 target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this UInt32 target, ILocalMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #region InequalTo for UInt64
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IExpression"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this UInt64 target, IExpression potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateFieldMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this UInt64 target, IIntermediateFieldMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediateParameterMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this UInt64 target, IIntermediateParameterMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="IIntermediatePropertySignatureMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this UInt64 target, IIntermediatePropertySignatureMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="potentialInequivalent"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the inequality operation occurs.
        /// </param>
        /// <param name="potentialInequivalent">
        /// The potentially inequivalent <see cref="ILocalMember"/> value to compare to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="potentialInequivalent"/> is null.
        /// </exception>
        public static ICSharpInequalityExpression InequalTo(this UInt64 target, ILocalMember potentialInequivalent)
        {
            if (potentialInequivalent == null)
                throw new ArgumentNullException("potentialInequivalent");
            return new CSharpInequalityExpression(((ICSharpInequalityExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.InequalityOperation))), false, ((ICSharpRelationalExpression)(potentialInequivalent.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))));
        }

        #endregion

        #endregion

        #region GreaterThanOrEqualTo

        #region GreaterThanOrEqualTo for Boolean
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Boolean target, IExpression lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Boolean target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Boolean target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Boolean target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Boolean target, ILocalMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for Byte
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Byte target, IExpression lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Byte target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Byte target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Byte target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Byte target, ILocalMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for Char
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Char target, IExpression lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Char target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Char target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Char target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Char target, ILocalMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for Decimal
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Decimal target, IExpression lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Decimal target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Decimal target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Decimal target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Decimal target, ILocalMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for Double
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Double target, IExpression lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Double target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Double target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Double target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Double target, ILocalMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for IExpression
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, Boolean lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, Byte lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, Char lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, Decimal lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, Double lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, IExpression lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, ILocalMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, Int16 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, Int32 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, Int64 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, SByte lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, Single lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, UInt16 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, UInt32 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IExpression target, UInt64 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for IIntermediateFieldMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, Boolean lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, Byte lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, Char lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, Decimal lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, Double lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, IExpression lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, ILocalMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, Int16 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, Int32 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, Int64 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, SByte lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, Single lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, UInt16 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, UInt32 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateFieldMember target, UInt64 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for IIntermediateParameterMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, Boolean lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, Byte lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, Char lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, Decimal lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, Double lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, IExpression lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, ILocalMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, Int16 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, Int32 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, Int64 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, SByte lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, Single lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, UInt16 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, UInt32 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediateParameterMember target, UInt64 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for IIntermediatePropertySignatureMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, Boolean lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, Byte lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, Char lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, Decimal lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, Double lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, IExpression lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, ILocalMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, Int16 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, Int32 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, Int64 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, SByte lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, Single lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, UInt16 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, UInt32 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this IIntermediatePropertySignatureMember target, UInt64 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for ILocalMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, Boolean lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, Byte lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, Char lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, Decimal lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, Double lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, IExpression lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, ILocalMember lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, Int16 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, Int32 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, Int64 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, SByte lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, Single lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, UInt16 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, UInt32 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this ILocalMember target, UInt64 lesserOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for Int16
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Int16 target, IExpression lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Int16 target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Int16 target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Int16 target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Int16 target, ILocalMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for Int32
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Int32 target, IExpression lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Int32 target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Int32 target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Int32 target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Int32 target, ILocalMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for Int64
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Int64 target, IExpression lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Int64 target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Int64 target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Int64 target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Int64 target, ILocalMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for SByte
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this SByte target, IExpression lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this SByte target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this SByte target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this SByte target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this SByte target, ILocalMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for Single
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Single target, IExpression lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Single target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Single target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Single target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this Single target, ILocalMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for UInt16
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this UInt16 target, IExpression lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this UInt16 target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this UInt16 target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this UInt16 target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this UInt16 target, ILocalMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for UInt32
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this UInt32 target, IExpression lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this UInt32 target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this UInt32 target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this UInt32 target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this UInt32 target, ILocalMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThanOrEqualTo for UInt64
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this UInt64 target, IExpression lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this UInt64 target, IIntermediateFieldMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this UInt64 target, IIntermediateParameterMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this UInt64 target, IIntermediatePropertySignatureMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational greater or equal to operation occurs.
        /// </param>
        /// <param name="lesserOrEqualSide">
        /// The lesser or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThanOrEqualTo(this UInt64 target, ILocalMember lesserOrEqualSide)
        {
            if (lesserOrEqualSide == null)
                throw new ArgumentNullException("lesserOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThanOrEqualTo, ((ICSharpShiftExpression)(lesserOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #endregion

        #region LessThanOrEqualTo

        #region LessThanOrEqualTo for Boolean
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Boolean target, IExpression greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Boolean target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Boolean target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Boolean target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Boolean target, ILocalMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for Byte
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Byte target, IExpression greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Byte target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Byte target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Byte target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Byte target, ILocalMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for Char
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Char target, IExpression greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Char target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Char target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Char target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Char target, ILocalMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for Decimal
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Decimal target, IExpression greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Decimal target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Decimal target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Decimal target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Decimal target, ILocalMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for Double
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Double target, IExpression greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Double target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Double target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Double target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Double target, ILocalMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for IExpression
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, Boolean greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, Byte greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, Char greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, Decimal greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, Double greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, IExpression greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, ILocalMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, Int16 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, Int32 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, Int64 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, SByte greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, Single greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, UInt16 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, UInt32 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IExpression target, UInt64 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for IIntermediateFieldMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, Boolean greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, Byte greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, Char greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, Decimal greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, Double greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, IExpression greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, ILocalMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, Int16 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, Int32 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, Int64 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, SByte greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, Single greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, UInt16 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, UInt32 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateFieldMember target, UInt64 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for IIntermediateParameterMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, Boolean greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, Byte greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, Char greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, Decimal greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, Double greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, IExpression greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, ILocalMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, Int16 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, Int32 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, Int64 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, SByte greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, Single greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, UInt16 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, UInt32 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediateParameterMember target, UInt64 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for IIntermediatePropertySignatureMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, Boolean greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, Byte greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, Char greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, Decimal greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, Double greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, IExpression greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, ILocalMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, Int16 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, Int32 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, Int64 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, SByte greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, Single greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, UInt16 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, UInt32 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this IIntermediatePropertySignatureMember target, UInt64 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for ILocalMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, Boolean greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, Byte greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, Char greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, Decimal greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, Double greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, IExpression greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, ILocalMember greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, Int16 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, Int32 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, Int64 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, SByte greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, Single greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, UInt16 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, UInt32 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this ILocalMember target, UInt64 greaterOrEqualSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for Int16
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Int16 target, IExpression greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Int16 target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Int16 target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Int16 target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Int16 target, ILocalMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for Int32
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Int32 target, IExpression greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Int32 target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Int32 target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Int32 target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Int32 target, ILocalMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for Int64
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Int64 target, IExpression greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Int64 target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Int64 target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Int64 target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Int64 target, ILocalMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for SByte
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this SByte target, IExpression greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this SByte target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this SByte target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this SByte target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this SByte target, ILocalMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for Single
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Single target, IExpression greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Single target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Single target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Single target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this Single target, ILocalMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for UInt16
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this UInt16 target, IExpression greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this UInt16 target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this UInt16 target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this UInt16 target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this UInt16 target, ILocalMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for UInt32
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this UInt32 target, IExpression greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this UInt32 target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this UInt32 target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this UInt32 target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this UInt32 target, ILocalMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThanOrEqualTo for UInt64
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this UInt64 target, IExpression greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this UInt64 target, IIntermediateFieldMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this UInt64 target, IIntermediateParameterMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this UInt64 target, IIntermediatePropertySignatureMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterOrEqualSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational lesser or equal to operation occurs.
        /// </param>
        /// <param name="greaterOrEqualSide">
        /// The greater or equal <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterOrEqualSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThanOrEqualTo(this UInt64 target, ILocalMember greaterOrEqualSide)
        {
            if (greaterOrEqualSide == null)
                throw new ArgumentNullException("greaterOrEqualSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThanOrEqualTo, ((ICSharpShiftExpression)(greaterOrEqualSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #endregion

        #region LessThan

        #region LessThan for Boolean
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Boolean target, IExpression greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Boolean target, IIntermediateFieldMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Boolean target, IIntermediateParameterMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Boolean target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Boolean target, ILocalMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for Byte
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Byte target, IExpression greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Byte target, IIntermediateFieldMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Byte target, IIntermediateParameterMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Byte target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Byte target, ILocalMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for Char
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Char target, IExpression greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Char target, IIntermediateFieldMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Char target, IIntermediateParameterMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Char target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Char target, ILocalMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for Decimal
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Decimal target, IExpression greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Decimal target, IIntermediateFieldMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Decimal target, IIntermediateParameterMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Decimal target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Decimal target, ILocalMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for Double
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Double target, IExpression greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Double target, IIntermediateFieldMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Double target, IIntermediateParameterMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Double target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Double target, ILocalMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for IExpression
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, Boolean greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, Byte greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, Char greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, Decimal greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, Double greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, IExpression greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, IIntermediateFieldMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, IIntermediateParameterMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, ILocalMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, Int16 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, Int32 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, Int64 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, SByte greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, Single greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, UInt16 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, UInt32 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IExpression target, UInt64 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for IIntermediateFieldMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, Boolean greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, Byte greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, Char greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, Decimal greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, Double greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, IExpression greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, IIntermediateFieldMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, IIntermediateParameterMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, ILocalMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, Int16 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, Int32 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, Int64 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, SByte greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, Single greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, UInt16 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, UInt32 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateFieldMember target, UInt64 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for IIntermediateParameterMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, Boolean greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, Byte greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, Char greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, Decimal greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, Double greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, IExpression greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, IIntermediateFieldMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, IIntermediateParameterMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, ILocalMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, Int16 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, Int32 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, Int64 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, SByte greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, Single greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, UInt16 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, UInt32 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediateParameterMember target, UInt64 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for IIntermediatePropertySignatureMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, Boolean greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, Byte greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, Char greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, Decimal greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, Double greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, IExpression greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, ILocalMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, Int16 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, Int32 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, Int64 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, SByte greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, Single greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, UInt16 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, UInt32 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this IIntermediatePropertySignatureMember target, UInt64 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for ILocalMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, Boolean greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, Byte greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, Char greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, Decimal greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, Double greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, IExpression greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, IIntermediateFieldMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, IIntermediateParameterMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, ILocalMember greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, Int16 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, Int32 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, Int64 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, SByte greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, Single greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, UInt16 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, UInt32 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this ILocalMember target, UInt64 greaterSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for Int16
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Int16 target, IExpression greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Int16 target, IIntermediateFieldMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Int16 target, IIntermediateParameterMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Int16 target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Int16 target, ILocalMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for Int32
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Int32 target, IExpression greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Int32 target, IIntermediateFieldMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Int32 target, IIntermediateParameterMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Int32 target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Int32 target, ILocalMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for Int64
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Int64 target, IExpression greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Int64 target, IIntermediateFieldMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Int64 target, IIntermediateParameterMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Int64 target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Int64 target, ILocalMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for SByte
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this SByte target, IExpression greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this SByte target, IIntermediateFieldMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this SByte target, IIntermediateParameterMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this SByte target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this SByte target, ILocalMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for Single
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Single target, IExpression greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Single target, IIntermediateFieldMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Single target, IIntermediateParameterMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Single target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this Single target, ILocalMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for UInt16
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this UInt16 target, IExpression greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this UInt16 target, IIntermediateFieldMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this UInt16 target, IIntermediateParameterMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this UInt16 target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this UInt16 target, ILocalMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for UInt32
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this UInt32 target, IExpression greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this UInt32 target, IIntermediateFieldMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this UInt32 target, IIntermediateParameterMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this UInt32 target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this UInt32 target, ILocalMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region LessThan for UInt64
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this UInt64 target, IExpression greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this UInt64 target, IIntermediateFieldMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this UInt64 target, IIntermediateParameterMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this UInt64 target, IIntermediatePropertySignatureMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="greaterSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational less-than operation occurs.
        /// </param>
        /// <param name="greaterSide">
        /// The greater <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="greaterSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression LessThan(this UInt64 target, ILocalMember greaterSide)
        {
            if (greaterSide == null)
                throw new ArgumentNullException("greaterSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.LessThan, ((ICSharpShiftExpression)(greaterSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #endregion

        #region GreaterThan

        #region GreaterThan for Boolean
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Boolean target, IExpression lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Boolean target, IIntermediateFieldMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Boolean target, IIntermediateParameterMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Boolean target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Boolean"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Boolean target, ILocalMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for Byte
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Byte target, IExpression lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Byte target, IIntermediateFieldMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Byte target, IIntermediateParameterMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Byte target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Byte target, ILocalMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for Char
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Char target, IExpression lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Char target, IIntermediateFieldMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Char target, IIntermediateParameterMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Char target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Char"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Char target, ILocalMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for Decimal
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Decimal target, IExpression lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Decimal target, IIntermediateFieldMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Decimal target, IIntermediateParameterMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Decimal target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Decimal target, ILocalMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for Double
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Double target, IExpression lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Double target, IIntermediateFieldMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Double target, IIntermediateParameterMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Double target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Double target, ILocalMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for IExpression
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, Boolean lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, Byte lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, Char lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, Decimal lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, Double lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, IExpression lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, IIntermediateFieldMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, IIntermediateParameterMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, ILocalMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, Int16 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, Int32 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, Int64 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, SByte lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, Single lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, UInt16 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, UInt32 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IExpression target, UInt64 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for IIntermediateFieldMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, Boolean lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, Byte lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, Char lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, Decimal lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, Double lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, IExpression lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, IIntermediateFieldMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, IIntermediateParameterMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, ILocalMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, Int16 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, Int32 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, Int64 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, SByte lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, Single lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, UInt16 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, UInt32 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateFieldMember target, UInt64 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for IIntermediateParameterMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, Boolean lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, Byte lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, Char lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, Decimal lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, Double lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, IExpression lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, IIntermediateFieldMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, IIntermediateParameterMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, ILocalMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, Int16 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, Int32 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, Int64 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, SByte lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, Single lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, UInt16 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, UInt32 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediateParameterMember target, UInt64 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for IIntermediatePropertySignatureMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, Boolean lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, Byte lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, Char lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, Decimal lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, Double lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, IExpression lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, ILocalMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, Int16 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, Int32 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, Int64 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, SByte lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, Single lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, UInt16 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, UInt32 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this IIntermediatePropertySignatureMember target, UInt64 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for ILocalMember
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Boolean"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, Boolean lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Byte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, Byte lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Char"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, Char lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Decimal"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, Decimal lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Double"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, Double lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, IExpression lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, IIntermediateFieldMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, IIntermediateParameterMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, ILocalMember lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Int16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, Int16 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Int32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, Int32 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Int64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, Int64 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="SByte"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, SByte lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="Single"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, Single lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="UInt16"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, UInt16 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="UInt32"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, UInt32 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="UInt64"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this ILocalMember target, UInt64 lesserSide)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.ToPrimitive().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for Int16
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Int16 target, IExpression lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Int16 target, IIntermediateFieldMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Int16 target, IIntermediateParameterMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Int16 target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Int16 target, ILocalMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for Int32
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Int32 target, IExpression lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Int32 target, IIntermediateFieldMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Int32 target, IIntermediateParameterMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Int32 target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Int32 target, ILocalMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for Int64
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Int64 target, IExpression lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Int64 target, IIntermediateFieldMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Int64 target, IIntermediateParameterMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Int64 target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Int64 target, ILocalMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for SByte
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this SByte target, IExpression lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this SByte target, IIntermediateFieldMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this SByte target, IIntermediateParameterMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this SByte target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this SByte target, ILocalMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for Single
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Single target, IExpression lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Single target, IIntermediateFieldMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Single target, IIntermediateParameterMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Single target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this Single target, ILocalMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for UInt16
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this UInt16 target, IExpression lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this UInt16 target, IIntermediateFieldMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this UInt16 target, IIntermediateParameterMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this UInt16 target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this UInt16 target, ILocalMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for UInt32
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this UInt32 target, IExpression lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this UInt32 target, IIntermediateFieldMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this UInt32 target, IIntermediateParameterMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this UInt32 target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this UInt32 target, ILocalMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #region GreaterThan for UInt64
        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IExpression"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this UInt64 target, IExpression lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateFieldMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this UInt64 target, IIntermediateFieldMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediateParameterMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this UInt64 target, IIntermediateParameterMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="IIntermediatePropertySignatureMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this UInt64 target, IIntermediatePropertySignatureMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        /// <summary>
        /// Compares the <paramref name="target"/> to the <paramref name="lesserSide"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the relational greater-than operation occurs.
        /// </param>
        /// <param name="lesserSide">
        /// The lower <see cref="ILocalMember"/> value to relate to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="lesserSide"/> is null.
        /// </exception>
        public static ICSharpRelationalExpression GreaterThan(this UInt64 target, ILocalMember lesserSide)
        {
            if (lesserSide == null)
                throw new ArgumentNullException("lesserSide");
            return new CSharpRelationalExpression(((ICSharpRelationalExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.RelationalOperation))), CSharpRelationalOperation.GreaterThan, ((ICSharpShiftExpression)(lesserSide.GetReference().AffixTo(CSharpOperatorPrecedences.ShiftOperation))));
        }

        #endregion

        #endregion

        #region Add

        #region Add for Byte
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Byte target, IExpression supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Byte target, IIntermediateFieldMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Byte target, IIntermediateParameterMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Byte target, IIntermediatePropertySignatureMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Byte target, ILocalMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Add for Decimal
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Decimal target, IExpression supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Decimal target, IIntermediateFieldMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Decimal target, IIntermediateParameterMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Decimal target, IIntermediatePropertySignatureMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Decimal target, ILocalMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Add for Double
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Double target, IExpression supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Double target, IIntermediateFieldMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Double target, IIntermediateParameterMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Double target, IIntermediatePropertySignatureMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Double target, ILocalMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Add for IExpression
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Byte"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, Byte supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Decimal"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, Decimal supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Double"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, Double supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, IExpression supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, IIntermediateFieldMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, IIntermediateParameterMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, IIntermediatePropertySignatureMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, ILocalMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Int16"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, Int16 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Int32"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, Int32 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Int64"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, Int64 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="SByte"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, SByte supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Single"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, Single supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="UInt16"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, UInt16 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="UInt32"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, UInt32 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="UInt64"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IExpression target, UInt64 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Add for IIntermediateFieldMember
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Byte"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, Byte supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Decimal"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, Decimal supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Double"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, Double supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, IExpression supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, IIntermediateFieldMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, IIntermediateParameterMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, ILocalMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Int16"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, Int16 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Int32"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, Int32 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Int64"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, Int64 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="SByte"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, SByte supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Single"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, Single supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="UInt16"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, UInt16 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="UInt32"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, UInt32 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="UInt64"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateFieldMember target, UInt64 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Add for IIntermediateParameterMember
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Byte"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, Byte supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Decimal"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, Decimal supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Double"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, Double supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, IExpression supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, IIntermediateFieldMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, IIntermediateParameterMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, ILocalMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Int16"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, Int16 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Int32"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, Int32 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Int64"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, Int64 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="SByte"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, SByte supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Single"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, Single supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="UInt16"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, UInt16 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="UInt32"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, UInt32 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="UInt64"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediateParameterMember target, UInt64 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Add for IIntermediatePropertySignatureMember
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Byte"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, Byte supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Decimal"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, Decimal supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Double"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, Double supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, IExpression supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, ILocalMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Int16"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, Int16 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Int32"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, Int32 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Int64"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, Int64 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="SByte"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, SByte supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Single"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, Single supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="UInt16"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, UInt16 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="UInt32"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, UInt32 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="UInt64"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this IIntermediatePropertySignatureMember target, UInt64 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Add for ILocalMember
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Byte"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, Byte supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Decimal"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, Decimal supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Double"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, Double supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, IExpression supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, IIntermediateFieldMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, IIntermediateParameterMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, IIntermediatePropertySignatureMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, ILocalMember supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Int16"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, Int16 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Int32"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, Int32 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Int64"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, Int64 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="SByte"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, SByte supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="Single"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, Single supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="UInt16"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, UInt16 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="UInt32"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, UInt32 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="UInt64"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this ILocalMember target, UInt64 supplement)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Add for Int16
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Int16 target, IExpression supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Int16 target, IIntermediateFieldMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Int16 target, IIntermediateParameterMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Int16 target, IIntermediatePropertySignatureMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Int16 target, ILocalMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Add for Int32
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Int32 target, IExpression supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Int32 target, IIntermediateFieldMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Int32 target, IIntermediateParameterMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Int32 target, IIntermediatePropertySignatureMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Int32 target, ILocalMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Add for Int64
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Int64 target, IExpression supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Int64 target, IIntermediateFieldMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Int64 target, IIntermediateParameterMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Int64 target, IIntermediatePropertySignatureMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Int64 target, ILocalMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Add for SByte
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this SByte target, IExpression supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this SByte target, IIntermediateFieldMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this SByte target, IIntermediateParameterMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this SByte target, IIntermediatePropertySignatureMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this SByte target, ILocalMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Add for Single
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Single target, IExpression supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Single target, IIntermediateFieldMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Single target, IIntermediateParameterMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Single target, IIntermediatePropertySignatureMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this Single target, ILocalMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Add for UInt16
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this UInt16 target, IExpression supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this UInt16 target, IIntermediateFieldMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this UInt16 target, IIntermediateParameterMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this UInt16 target, IIntermediatePropertySignatureMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this UInt16 target, ILocalMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Add for UInt32
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this UInt32 target, IExpression supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this UInt32 target, IIntermediateFieldMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this UInt32 target, IIntermediateParameterMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this UInt32 target, IIntermediatePropertySignatureMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this UInt32 target, ILocalMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Add for UInt64
        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IExpression"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this UInt64 target, IExpression supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateFieldMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this UInt64 target, IIntermediateFieldMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediateParameterMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this UInt64 target, IIntermediateParameterMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="IIntermediatePropertySignatureMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this UInt64 target, IIntermediatePropertySignatureMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Adds <paramref name="target"/> to <paramref name="supplement"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the addition operation occurs.
        /// </param>
        /// <param name="supplement">
        /// The <see cref="ILocalMember"/> value which is added to <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="supplement"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Add(this UInt64 target, ILocalMember supplement)
        {
            if (supplement == null)
                throw new ArgumentNullException("supplement");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Addition, ((ICSharpMulDivExpression)(supplement.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #endregion

        #region Subtract

        #region Subtract for Byte
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Byte target, IExpression diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Byte target, IIntermediateFieldMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Byte target, IIntermediateParameterMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Byte target, IIntermediatePropertySignatureMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Byte target, ILocalMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Subtract for Decimal
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Decimal target, IExpression diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Decimal target, IIntermediateFieldMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Decimal target, IIntermediateParameterMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Decimal target, IIntermediatePropertySignatureMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Decimal target, ILocalMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Subtract for Double
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Double target, IExpression diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Double target, IIntermediateFieldMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Double target, IIntermediateParameterMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Double target, IIntermediatePropertySignatureMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Double target, ILocalMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Subtract for IExpression
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Byte"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, Byte diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Decimal"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, Decimal diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Double"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, Double diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, IExpression diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, IIntermediateFieldMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, IIntermediateParameterMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, IIntermediatePropertySignatureMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, ILocalMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Int16"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, Int16 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Int32"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, Int32 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Int64"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, Int64 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="SByte"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, SByte diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Single"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, Single diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="UInt16"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, UInt16 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="UInt32"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, UInt32 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="UInt64"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IExpression target, UInt64 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Subtract for IIntermediateFieldMember
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Byte"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, Byte diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Decimal"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, Decimal diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Double"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, Double diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, IExpression diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, IIntermediateFieldMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, IIntermediateParameterMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, ILocalMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Int16"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, Int16 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Int32"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, Int32 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Int64"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, Int64 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="SByte"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, SByte diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Single"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, Single diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="UInt16"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, UInt16 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="UInt32"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, UInt32 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="UInt64"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateFieldMember target, UInt64 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Subtract for IIntermediateParameterMember
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Byte"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, Byte diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Decimal"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, Decimal diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Double"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, Double diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, IExpression diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, IIntermediateFieldMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, IIntermediateParameterMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, ILocalMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Int16"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, Int16 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Int32"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, Int32 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Int64"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, Int64 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="SByte"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, SByte diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Single"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, Single diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="UInt16"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, UInt16 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="UInt32"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, UInt32 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="UInt64"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediateParameterMember target, UInt64 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Subtract for IIntermediatePropertySignatureMember
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Byte"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, Byte diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Decimal"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, Decimal diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Double"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, Double diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, IExpression diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, ILocalMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Int16"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, Int16 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Int32"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, Int32 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Int64"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, Int64 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="SByte"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, SByte diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Single"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, Single diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="UInt16"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, UInt16 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="UInt32"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, UInt32 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="UInt64"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this IIntermediatePropertySignatureMember target, UInt64 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Subtract for ILocalMember
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Byte"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, Byte diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Decimal"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, Decimal diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Double"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, Double diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, IExpression diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, IIntermediateFieldMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, IIntermediateParameterMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, IIntermediatePropertySignatureMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, ILocalMember diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Int16"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, Int16 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Int32"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, Int32 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Int64"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, Int64 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="SByte"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, SByte diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="Single"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, Single diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="UInt16"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, UInt16 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="UInt32"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, UInt32 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="UInt64"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this ILocalMember target, UInt64 diminishment)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Subtract for Int16
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Int16 target, IExpression diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Int16 target, IIntermediateFieldMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Int16 target, IIntermediateParameterMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Int16 target, IIntermediatePropertySignatureMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Int16 target, ILocalMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Subtract for Int32
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Int32 target, IExpression diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Int32 target, IIntermediateFieldMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Int32 target, IIntermediateParameterMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Int32 target, IIntermediatePropertySignatureMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Int32 target, ILocalMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Subtract for Int64
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Int64 target, IExpression diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Int64 target, IIntermediateFieldMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Int64 target, IIntermediateParameterMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Int64 target, IIntermediatePropertySignatureMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Int64 target, ILocalMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Subtract for SByte
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this SByte target, IExpression diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this SByte target, IIntermediateFieldMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this SByte target, IIntermediateParameterMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this SByte target, IIntermediatePropertySignatureMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this SByte target, ILocalMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Subtract for Single
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Single target, IExpression diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Single target, IIntermediateFieldMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Single target, IIntermediateParameterMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Single target, IIntermediatePropertySignatureMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this Single target, ILocalMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Subtract for UInt16
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this UInt16 target, IExpression diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this UInt16 target, IIntermediateFieldMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this UInt16 target, IIntermediateParameterMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this UInt16 target, IIntermediatePropertySignatureMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this UInt16 target, ILocalMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Subtract for UInt32
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this UInt32 target, IExpression diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this UInt32 target, IIntermediateFieldMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this UInt32 target, IIntermediateParameterMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this UInt32 target, IIntermediatePropertySignatureMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this UInt32 target, ILocalMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #region Subtract for UInt64
        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IExpression"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this UInt64 target, IExpression diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateFieldMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this UInt64 target, IIntermediateFieldMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediateParameterMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this UInt64 target, IIntermediateParameterMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="IIntermediatePropertySignatureMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this UInt64 target, IIntermediatePropertySignatureMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        /// <summary>
        /// Subtracts <paramref name="target"/> from <paramref name="diminishment"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the subtraction operation occurs.
        /// </param>
        /// <param name="diminishment">
        /// The <see cref="ILocalMember"/> whose value is removed from <paramref name="target"/>.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="diminishment"/> is null.
        /// </exception>
        public static ICSharpAddSubtExpression Subtract(this UInt64 target, ILocalMember diminishment)
        {
            if (diminishment == null)
                throw new ArgumentNullException("diminishment");
            return new CSharpAddSubtExpression(((ICSharpAddSubtExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.AddSubtOperation))), CSharpAddSubtOperation.Subtraction, ((ICSharpMulDivExpression)(diminishment.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))));
        }

        #endregion

        #endregion

        #region Division

        #region Division for Byte
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Byte"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Byte target, IExpression denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Byte"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Byte target, IIntermediateFieldMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Byte"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Byte target, IIntermediateParameterMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Byte"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Byte target, IIntermediatePropertySignatureMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Byte"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Byte target, ILocalMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Division for Decimal
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Decimal"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Decimal target, IExpression denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Decimal"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Decimal target, IIntermediateFieldMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Decimal"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Decimal target, IIntermediateParameterMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Decimal"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Decimal target, IIntermediatePropertySignatureMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Decimal"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Decimal target, ILocalMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Division for Double
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Double"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Double target, IExpression denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Double"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Double target, IIntermediateFieldMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Double"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Double target, IIntermediateParameterMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Double"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Double target, IIntermediatePropertySignatureMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Double"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Double target, ILocalMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Division for IExpression
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Byte"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, Byte denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Decimal"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, Decimal denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Double"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, Double denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, IExpression denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, IIntermediateFieldMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, IIntermediateParameterMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, IIntermediatePropertySignatureMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, ILocalMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Int16"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, Int16 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Int32"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, Int32 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Int64"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, Int64 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="SByte"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, SByte denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Single"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, Single denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="UInt16"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, UInt16 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="UInt32"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, UInt32 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IExpression"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="UInt64"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IExpression target, UInt64 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Division for IIntermediateFieldMember
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Byte"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, Byte denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Decimal"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, Decimal denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Double"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, Double denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, IExpression denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, IIntermediateFieldMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, IIntermediateParameterMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, ILocalMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Int16"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, Int16 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Int32"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, Int32 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Int64"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, Int64 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="SByte"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, SByte denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Single"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, Single denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="UInt16"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, UInt16 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="UInt32"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, UInt32 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateFieldMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="UInt64"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateFieldMember target, UInt64 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Division for IIntermediateParameterMember
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Byte"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, Byte denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Decimal"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, Decimal denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Double"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, Double denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, IExpression denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, IIntermediateFieldMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, IIntermediateParameterMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, ILocalMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Int16"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, Int16 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Int32"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, Int32 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Int64"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, Int64 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="SByte"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, SByte denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Single"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, Single denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="UInt16"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, UInt16 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="UInt32"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, UInt32 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediateParameterMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="UInt64"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediateParameterMember target, UInt64 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Division for IIntermediatePropertySignatureMember
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Byte"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, Byte denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Decimal"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, Decimal denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Double"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, Double denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, IExpression denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, ILocalMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Int16"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, Int16 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Int32"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, Int32 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Int64"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, Int64 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="SByte"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, SByte denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Single"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, Single denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="UInt16"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, UInt16 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="UInt32"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, UInt32 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="IIntermediatePropertySignatureMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="UInt64"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this IIntermediatePropertySignatureMember target, UInt64 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Division for ILocalMember
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Byte"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, Byte denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Decimal"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, Decimal denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Double"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, Double denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, IExpression denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, IIntermediateFieldMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, IIntermediateParameterMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, IIntermediatePropertySignatureMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, ILocalMember denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Int16"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, Int16 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Int32"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, Int32 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Int64"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, Int64 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="SByte"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, SByte denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="Single"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, Single denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="UInt16"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, UInt16 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="UInt32"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, UInt32 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="ILocalMember"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="UInt64"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this ILocalMember target, UInt64 denominator)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Division for Int16
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Int16"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Int16 target, IExpression denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Int16"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Int16 target, IIntermediateFieldMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Int16"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Int16 target, IIntermediateParameterMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Int16"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Int16 target, IIntermediatePropertySignatureMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Int16"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Int16 target, ILocalMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Division for Int32
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Int32"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Int32 target, IExpression denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Int32"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Int32 target, IIntermediateFieldMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Int32"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Int32 target, IIntermediateParameterMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Int32"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Int32 target, IIntermediatePropertySignatureMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Int32"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Int32 target, ILocalMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Division for Int64
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Int64"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Int64 target, IExpression denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Int64"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Int64 target, IIntermediateFieldMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Int64"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Int64 target, IIntermediateParameterMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Int64"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Int64 target, IIntermediatePropertySignatureMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Int64"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Int64 target, ILocalMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Division for SByte
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="SByte"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this SByte target, IExpression denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="SByte"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this SByte target, IIntermediateFieldMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="SByte"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this SByte target, IIntermediateParameterMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="SByte"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this SByte target, IIntermediatePropertySignatureMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="SByte"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this SByte target, ILocalMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Division for Single
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Single"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Single target, IExpression denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Single"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Single target, IIntermediateFieldMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Single"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Single target, IIntermediateParameterMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Single"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Single target, IIntermediatePropertySignatureMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="Single"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this Single target, ILocalMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Division for UInt16
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="UInt16"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this UInt16 target, IExpression denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="UInt16"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this UInt16 target, IIntermediateFieldMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="UInt16"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this UInt16 target, IIntermediateParameterMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="UInt16"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this UInt16 target, IIntermediatePropertySignatureMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="UInt16"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this UInt16 target, ILocalMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Division for UInt32
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="UInt32"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this UInt32 target, IExpression denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="UInt32"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this UInt32 target, IIntermediateFieldMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="UInt32"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this UInt32 target, IIntermediateParameterMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="UInt32"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this UInt32 target, IIntermediatePropertySignatureMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="UInt32"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this UInt32 target, ILocalMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Division for UInt64
        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="UInt64"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IExpression"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this UInt64 target, IExpression denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="UInt64"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateFieldMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this UInt64 target, IIntermediateFieldMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="UInt64"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediateParameterMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this UInt64 target, IIntermediateParameterMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="UInt64"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="IIntermediatePropertySignatureMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this UInt64 target, IIntermediatePropertySignatureMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Divides <paramref name="target"/> by the provided <paramref name="denominator"/> as an expression.
        /// </summary>
        /// <param name="target">
        /// The <see cref="UInt64"/> numerator on which the division operation occurs.
        /// </param>
        /// <param name="denominator">
        /// The <see cref="ILocalMember"/> denominator upon which <paramref name="target"/> is divided by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="denominator"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Division(this UInt64 target, ILocalMember denominator)
        {
            if (denominator == null)
                throw new ArgumentNullException("denominator");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Division, ((IUnaryOperationExpression)(denominator.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #endregion

        #region Multiply

        #region Multiply for Byte
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Byte target, IExpression multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Byte target, IIntermediateFieldMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Byte target, IIntermediateParameterMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Byte target, IIntermediatePropertySignatureMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Byte target, ILocalMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Multiply for Decimal
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Decimal target, IExpression multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Decimal target, IIntermediateFieldMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Decimal target, IIntermediateParameterMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Decimal target, IIntermediatePropertySignatureMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Decimal target, ILocalMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Multiply for Double
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Double target, IExpression multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Double target, IIntermediateFieldMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Double target, IIntermediateParameterMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Double target, IIntermediatePropertySignatureMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Double target, ILocalMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Multiply for IExpression
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Byte"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, Byte multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Decimal"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, Decimal multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Double"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, Double multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, IExpression multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, IIntermediateFieldMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, IIntermediateParameterMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, IIntermediatePropertySignatureMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, ILocalMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Int16"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, Int16 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Int32"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, Int32 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Int64"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, Int64 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="SByte"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, SByte multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Single"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, Single multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="UInt16"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, UInt16 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="UInt32"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, UInt32 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="UInt64"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IExpression target, UInt64 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Multiply for IIntermediateFieldMember
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Byte"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, Byte multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Decimal"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, Decimal multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Double"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, Double multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, IExpression multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, IIntermediateFieldMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, IIntermediateParameterMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, ILocalMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Int16"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, Int16 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Int32"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, Int32 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Int64"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, Int64 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="SByte"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, SByte multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Single"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, Single multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="UInt16"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, UInt16 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="UInt32"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, UInt32 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="UInt64"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateFieldMember target, UInt64 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Multiply for IIntermediateParameterMember
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Byte"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, Byte multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Decimal"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, Decimal multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Double"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, Double multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, IExpression multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, IIntermediateFieldMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, IIntermediateParameterMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, ILocalMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Int16"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, Int16 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Int32"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, Int32 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Int64"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, Int64 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="SByte"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, SByte multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Single"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, Single multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="UInt16"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, UInt16 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="UInt32"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, UInt32 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="UInt64"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediateParameterMember target, UInt64 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Multiply for IIntermediatePropertySignatureMember
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Byte"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, Byte multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Decimal"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, Decimal multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Double"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, Double multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, IExpression multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, ILocalMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Int16"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, Int16 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Int32"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, Int32 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Int64"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, Int64 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="SByte"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, SByte multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Single"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, Single multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="UInt16"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, UInt16 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="UInt32"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, UInt32 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="UInt64"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this IIntermediatePropertySignatureMember target, UInt64 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Multiply for ILocalMember
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Byte"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, Byte multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Decimal"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, Decimal multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Double"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, Double multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, IExpression multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, IIntermediateFieldMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, IIntermediateParameterMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, IIntermediatePropertySignatureMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, ILocalMember multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Int16"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, Int16 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Int32"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, Int32 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Int64"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, Int64 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="SByte"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, SByte multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="Single"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, Single multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="UInt16"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, UInt16 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="UInt32"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, UInt32 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="UInt64"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this ILocalMember target, UInt64 multiplier)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Multiply for Int16
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Int16 target, IExpression multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Int16 target, IIntermediateFieldMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Int16 target, IIntermediateParameterMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Int16 target, IIntermediatePropertySignatureMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Int16 target, ILocalMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Multiply for Int32
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Int32 target, IExpression multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Int32 target, IIntermediateFieldMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Int32 target, IIntermediateParameterMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Int32 target, IIntermediatePropertySignatureMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Int32 target, ILocalMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Multiply for Int64
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Int64 target, IExpression multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Int64 target, IIntermediateFieldMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Int64 target, IIntermediateParameterMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Int64 target, IIntermediatePropertySignatureMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Int64 target, ILocalMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Multiply for SByte
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this SByte target, IExpression multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this SByte target, IIntermediateFieldMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this SByte target, IIntermediateParameterMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this SByte target, IIntermediatePropertySignatureMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this SByte target, ILocalMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Multiply for Single
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Single target, IExpression multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Single target, IIntermediateFieldMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Single target, IIntermediateParameterMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Single target, IIntermediatePropertySignatureMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this Single target, ILocalMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Multiply for UInt16
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this UInt16 target, IExpression multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this UInt16 target, IIntermediateFieldMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this UInt16 target, IIntermediateParameterMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this UInt16 target, IIntermediatePropertySignatureMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this UInt16 target, ILocalMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Multiply for UInt32
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this UInt32 target, IExpression multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this UInt32 target, IIntermediateFieldMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this UInt32 target, IIntermediateParameterMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this UInt32 target, IIntermediatePropertySignatureMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this UInt32 target, ILocalMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Multiply for UInt64
        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IExpression"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this UInt64 target, IExpression multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateFieldMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this UInt64 target, IIntermediateFieldMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediateParameterMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this UInt64 target, IIntermediateParameterMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="IIntermediatePropertySignatureMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this UInt64 target, IIntermediatePropertySignatureMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Multiplies the <paramref name="target"/> by the <paramref name="multiplier"/> provided as an expression.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the multiplication operation occurs.
        /// </param>
        /// <param name="multiplier">
        /// The <see cref="ILocalMember"/> upon which <paramref name="target"/> is multiplied by.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="multiplier"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Multiply(this UInt64 target, ILocalMember multiplier)
        {
            if (multiplier == null)
                throw new ArgumentNullException("multiplier");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Multiplication, ((IUnaryOperationExpression)(multiplier.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #endregion

        #region Modulus

        #region Modulus for Byte
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Byte target, IExpression moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Byte target, IIntermediateFieldMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Byte target, IIntermediateParameterMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Byte target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Byte"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Byte target, ILocalMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Modulus for Decimal
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Decimal target, IExpression moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Decimal target, IIntermediateFieldMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Decimal target, IIntermediateParameterMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Decimal target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Decimal"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Decimal target, ILocalMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Modulus for Double
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Double target, IExpression moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Double target, IIntermediateFieldMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Double target, IIntermediateParameterMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Double target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Double"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Double target, ILocalMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Modulus for IExpression
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Byte"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, Byte moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Decimal"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, Decimal moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Double"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, Double moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, IExpression moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, IIntermediateFieldMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, IIntermediateParameterMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, ILocalMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Int16"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, Int16 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Int32"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, Int32 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Int64"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, Int64 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="SByte"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, SByte moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Single"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, Single moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="UInt16"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, UInt16 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="UInt32"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, UInt32 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IExpression"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="UInt64"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IExpression target, UInt64 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Modulus for IIntermediateFieldMember
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Byte"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, Byte moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Decimal"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, Decimal moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Double"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, Double moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, IExpression moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, IIntermediateFieldMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, IIntermediateParameterMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, ILocalMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Int16"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, Int16 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Int32"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, Int32 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Int64"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, Int64 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="SByte"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, SByte moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Single"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, Single moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="UInt16"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, UInt16 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="UInt32"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, UInt32 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateFieldMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="UInt64"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateFieldMember target, UInt64 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Modulus for IIntermediateParameterMember
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Byte"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, Byte moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Decimal"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, Decimal moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Double"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, Double moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, IExpression moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, IIntermediateFieldMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, IIntermediateParameterMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, ILocalMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Int16"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, Int16 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Int32"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, Int32 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Int64"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, Int64 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="SByte"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, SByte moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Single"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, Single moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="UInt16"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, UInt16 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="UInt32"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, UInt32 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediateParameterMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="UInt64"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediateParameterMember target, UInt64 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Modulus for IIntermediatePropertySignatureMember
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Byte"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, Byte moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Decimal"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, Decimal moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Double"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, Double moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, IExpression moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, IIntermediateFieldMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, IIntermediateParameterMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, ILocalMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Int16"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, Int16 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Int32"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, Int32 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Int64"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, Int64 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="SByte"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, SByte moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Single"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, Single moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="UInt16"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, UInt16 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="UInt32"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, UInt32 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="IIntermediatePropertySignatureMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="UInt64"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this IIntermediatePropertySignatureMember target, UInt64 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Modulus for ILocalMember
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Byte"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, Byte moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Decimal"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, Decimal moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Double"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, Double moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, IExpression moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, IIntermediateFieldMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, IIntermediateParameterMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> or <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, ILocalMember moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Int16"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, Int16 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Int32"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, Int32 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Int64"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, Int64 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="SByte"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, SByte moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="Single"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, Single moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="UInt16"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, UInt16 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="UInt32"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, UInt32 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="ILocalMember"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="UInt64"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="target"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this ILocalMember target, UInt64 moduloPair)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.GetReference().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.ToPrimitive().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Modulus for Int16
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Int16 target, IExpression moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Int16 target, IIntermediateFieldMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Int16 target, IIntermediateParameterMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Int16 target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int16"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Int16 target, ILocalMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Modulus for Int32
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Int32 target, IExpression moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Int32 target, IIntermediateFieldMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Int32 target, IIntermediateParameterMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Int32 target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int32"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Int32 target, ILocalMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Modulus for Int64
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Int64 target, IExpression moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Int64 target, IIntermediateFieldMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Int64 target, IIntermediateParameterMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Int64 target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Int64"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Int64 target, ILocalMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Modulus for SByte
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this SByte target, IExpression moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this SByte target, IIntermediateFieldMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this SByte target, IIntermediateParameterMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this SByte target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="SByte"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this SByte target, ILocalMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Modulus for Single
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Single target, IExpression moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Single target, IIntermediateFieldMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Single target, IIntermediateParameterMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Single target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="Single"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this Single target, ILocalMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Modulus for UInt16
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this UInt16 target, IExpression moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this UInt16 target, IIntermediateFieldMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this UInt16 target, IIntermediateParameterMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this UInt16 target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt16"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this UInt16 target, ILocalMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Modulus for UInt32
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this UInt32 target, IExpression moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this UInt32 target, IIntermediateFieldMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this UInt32 target, IIntermediateParameterMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this UInt32 target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt32"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this UInt32 target, ILocalMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #region Modulus for UInt64
        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IExpression"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this UInt64 target, IExpression moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateFieldMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this UInt64 target, IIntermediateFieldMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediateParameterMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this UInt64 target, IIntermediateParameterMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="IIntermediatePropertySignatureMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this UInt64 target, IIntermediatePropertySignatureMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        /// <summary>
        /// Obtains the remainder of  the division between <paramref name="target"/> and <paramref name="moduloPair"/>.
        /// </summary>
        /// <param name="target">
        /// The target <see cref="UInt64"/> on which the modulus operation occurs.
        /// </param>
        /// <param name="moduloPair">
        /// The <see cref="ILocalMember"/> to use on <paramref name="target"/> to find the remainder as an expression.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// thrown when <paramref name="moduloPair"/> is null.
        /// </exception>
        public static ICSharpMulDivExpression Modulus(this UInt64 target, ILocalMember moduloPair)
        {
            if (moduloPair == null)
                throw new ArgumentNullException("moduloPair");
            return new CSharpMulDivExpression(((ICSharpMulDivExpression)(target.ToPrimitive().AffixTo(CSharpOperatorPrecedences.MulDivOperation))), CSharpMulDivOperation.Remainder, ((IUnaryOperationExpression)(moduloPair.GetReference().AffixTo(CSharpOperatorPrecedences.UnaryOperation))));
        }

        #endregion

        #endregion

    }
}
